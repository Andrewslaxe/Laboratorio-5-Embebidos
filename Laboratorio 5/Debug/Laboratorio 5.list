
Laboratorio 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be0  08008be0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008be8  08008be8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  20000160  08008d50  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee8  08008d50  00021ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147d1  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325d  00000000  00000000  00034961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00037bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa9b  00000000  00000000  00039e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dcf  00000000  00000000  000548a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c1e1  00000000  00000000  0006a672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  001068a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008b70 	.word	0x08008b70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	08008b70 	.word	0x08008b70

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fd55 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f837 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fa2d 	bl	8000958 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fe:	f000 f89b 	bl	8000638 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000502:	f000 f8eb 	bl	80006dc <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000506:	f007 fcdd 	bl	8007ec4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800050a:	f000 f989 	bl	8000820 <MX_TIM2_Init>
  MX_TIM3_Init();
 800050e:	f000 f9d5 	bl	80008bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <main+0x68>)
 8000514:	f003 f9f8 	bl	8003908 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x6c>)
 800051a:	f003 f9f5 	bl	8003908 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800051e:	2100      	movs	r1, #0
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0x70>)
 8000522:	f003 faa5 	bl	8003a70 <HAL_TIM_PWM_Start_IT>
  int Val=0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(__HAL_TIM_GET_COUNTER(&htim3)>=(1000) ){
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <main+0x6c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000534:	d3f9      	bcc.n	800052a <main+0x3e>
		 if(StartFlag!=0){
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <main+0x74>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d005      	beq.n	800054a <main+0x5e>
			 Send(01,rpm);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <main+0x78>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4619      	mov	r1, r3
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fa9f 	bl	8000a88 <Send>
		 }

		 __HAL_TIM_SET_COUNTER(&htim3, 0);
 800054a:	4b03      	ldr	r3, [pc, #12]	; (8000558 <main+0x6c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
	 if(__HAL_TIM_GET_COUNTER(&htim3)>=(1000) ){
 8000552:	e7ea      	b.n	800052a <main+0x3e>
 8000554:	2000020c 	.word	0x2000020c
 8000558:	20000254 	.word	0x20000254
 800055c:	200001c4 	.word	0x200001c4
 8000560:	200002bc 	.word	0x200002bc
 8000564:	200002c0 	.word	0x200002c0

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f008 f9f4 	bl	8008964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005d8:	2319      	movs	r3, #25
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fd0b 	bl	8003008 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 fb34 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2103      	movs	r1, #3
 8000618:	4618      	mov	r0, r3
 800061a:	f002 ff6d 	bl	80034f8 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 fb1e 	bl	8000c64 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_ADC1_Init+0x98>)
 800069a:	f000 fd17 	bl	80010cc <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 fade 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006ba:	f000 fd4b 	bl	8001154 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c4:	f000 face 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000017c 	.word	0x2000017c
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	; 0x58
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f008 f925 	bl	8008964 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <MX_TIM1_Init+0x13c>)
 800071c:	4a3f      	ldr	r2, [pc, #252]	; (800081c <MX_TIM1_Init+0x140>)
 800071e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 738;
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000722:	f240 22e2 	movw	r2, #738	; 0x2e2
 8000726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <MX_TIM1_Init+0x13c>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000730:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073c:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_TIM1_Init+0x13c>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000748:	4833      	ldr	r0, [pc, #204]	; (8000818 <MX_TIM1_Init+0x13c>)
 800074a:	f003 f88d 	bl	8003868 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 fa86 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000762:	4619      	mov	r1, r3
 8000764:	482c      	ldr	r0, [pc, #176]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000766:	f003 fb43 	bl	8003df0 <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000770:	f000 fa78 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000774:	4828      	ldr	r0, [pc, #160]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000776:	f003 f921 	bl	80039bc <HAL_TIM_PWM_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000780:	f000 fa70 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000790:	4619      	mov	r1, r3
 8000792:	4821      	ldr	r0, [pc, #132]	; (8000818 <MX_TIM1_Init+0x13c>)
 8000794:	f003 fec0 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800079e:	f000 fa61 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a2:	2360      	movs	r3, #96	; 0x60
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4814      	ldr	r0, [pc, #80]	; (8000818 <MX_TIM1_Init+0x13c>)
 80007c8:	f003 fa50 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80007d2:	f000 fa47 	bl	8000c64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <MX_TIM1_Init+0x13c>)
 80007fa:	f003 fefb 	bl	80045f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000804:	f000 fa2e 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_TIM1_Init+0x13c>)
 800080a:	f000 fae9 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 800080e:	bf00      	nop
 8000810:	3758      	adds	r7, #88	; 0x58
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001c4 	.word	0x200001c4
 800081c:	40010000 	.word	0x40010000

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM2_Init+0x98>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000846:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_TIM2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000854:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_TIM2_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000866:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000868:	f002 fffe 	bl	8003868 <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 f9f7 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000884:	f003 fab4 	bl	8003df0 <HAL_TIM_ConfigClockSource>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800088e:	f000 f9e9 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM2_Init+0x98>)
 80008a0:	f003 fe3a 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f9db 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000020c 	.word	0x2000020c

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM3_Init+0x94>)
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_TIM3_Init+0x98>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM3_Init+0x94>)
 80008e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM3_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM3_Init+0x94>)
 80008ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM3_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM3_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_TIM3_Init+0x94>)
 8000902:	f002 ffb1 	bl	8003868 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800090c:	f000 f9aa 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM3_Init+0x94>)
 800091e:	f003 fa67 	bl	8003df0 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 f99c 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_TIM3_Init+0x94>)
 800093a:	f003 fded 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f98e 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000254 	.word	0x20000254
 8000954:	40000400 	.word	0x40000400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <MX_GPIO_Init+0xec>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <MX_GPIO_Init+0xec>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_GPIO_Init+0xec>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <MX_GPIO_Init+0xec>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <MX_GPIO_Init+0xec>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_GPIO_Init+0xec>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_GPIO_Init+0xec>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <MX_GPIO_Init+0xec>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_GPIO_Init+0xec>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_GPIO_Init+0xec>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <MX_GPIO_Init+0xec>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_GPIO_Init+0xec>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_GPIO_Init+0xf0>)
 80009e6:	f001 f879 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_GPIO_Init+0xf0>)
 8000a04:	f000 fee6 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_GPIO_Init+0xf4>)
 8000a1c:	f000 feda 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0xf8>)
 8000a36:	f000 fecd 	bl	80017d4 <HAL_GPIO_Init>

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <Clear>:

/* USER CODE BEGIN 4 */

void Clear(){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
	int Aux;
	for(Aux=0;Aux<30;Aux++){
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	e007      	b.n	8000a70 <Clear+0x1c>
		texto[Aux]=0;
 8000a60:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <Clear+0x30>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
	for(Aux=0;Aux<30;Aux++){
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b1d      	cmp	r3, #29
 8000a74:	ddf4      	ble.n	8000a60 <Clear+0xc>
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	2000029c 	.word	0x2000029c

08000a88 <Send>:
void Send(int Cmd, int Info){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	Clear();
 8000a92:	f7ff ffdf 	bl	8000a54 <Clear>
	int Size=0x00,Parity=0,Contador=0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
	uint8_t *Data;

	if(Info<256){
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	2bff      	cmp	r3, #255	; 0xff
 8000aa6:	dc0c      	bgt.n	8000ac2 <Send+0x3a>
		Size=0x01;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
		Data=(uint8_t*)malloc(6*sizeof(int));
 8000aac:	2018      	movs	r0, #24
 8000aae:	f007 ff49 	bl	8008944 <malloc>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	60bb      	str	r3, [r7, #8]
		Data[3]=Info;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	3303      	adds	r3, #3
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e011      	b.n	8000ae6 <Send+0x5e>
	}
	else{
		Size=0x02;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	617b      	str	r3, [r7, #20]
		Data=(uint8_t*)malloc(7*sizeof(int));
 8000ac6:	201c      	movs	r0, #28
 8000ac8:	f007 ff3c 	bl	8008944 <malloc>
 8000acc:	4603      	mov	r3, r0
 8000ace:	60bb      	str	r3, [r7, #8]
		Data[3]=0x00FF & (Info >> 8);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	121a      	asrs	r2, r3, #8
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	701a      	strb	r2, [r3, #0]
		Data[4]=0x00FF & Info;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	701a      	strb	r2, [r3, #0]
	}
	Data[0]=Start;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2206      	movs	r2, #6
 8000aea:	701a      	strb	r2, [r3, #0]
	Data[1]=Size;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	701a      	strb	r2, [r3, #0]
	Data[2]=Cmd;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3302      	adds	r3, #2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	701a      	strb	r2, [r3, #0]
	for(Contador=0;Contador<Size+3;Contador++){
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e00a      	b.n	8000b1c <Send+0x94>
		Parity^=Data[Contador];
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4053      	eors	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
	for(Contador=0;Contador<Size+3;Contador++){
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	ddef      	ble.n	8000b06 <Send+0x7e>
	}
	Data[Size+3]=Parity;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3303      	adds	r3, #3
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	701a      	strb	r2, [r3, #0]
	Data[Size+4]=Stop;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3304      	adds	r3, #4
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
	/*
	sprintf(texto,"%d%d%d%d%d%d",Start,Size,Cmd,Info,Parity,Stop);
	Data[Size+3]=Parity;
	Data[Size+4]=Stop;
	}*/
	Contador=strlen(Data);
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f7ff fb49 	bl	80001d8 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS(Data,strlen(Data));
 8000b4a:	68b8      	ldr	r0, [r7, #8]
 8000b4c:	f7ff fb44 	bl	80001d8 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	68b8      	ldr	r0, [r7, #8]
 8000b58:	f007 fa78 	bl	800804c <CDC_Transmit_FS>
	free(Data);
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f007 fef9 	bl	8008954 <free>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <CDC_ReceiveCallBack>:

void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
	if(StartFlag==0){
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <CDC_ReceiveCallBack+0xec>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d105      	bne.n	8000b8a <CDC_ReceiveCallBack+0x1e>
		StartFlag++;
 8000b7e:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <CDC_ReceiveCallBack+0xec>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <CDC_ReceiveCallBack+0xec>)
 8000b88:	701a      	strb	r2, [r3, #0]
	}
	int Temp=0,Parity=0,Size;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
	if(Buf[0]==Start && Buf[Len-1]==Stop){ //Protocolo
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d157      	bne.n	8000c4a <CDC_ReceiveCallBack+0xde>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d150      	bne.n	8000c4a <CDC_ReceiveCallBack+0xde>
		Size=Buf[1];
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3301      	adds	r3, #1
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]
		if(Size==1){
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d116      	bne.n	8000be4 <CDC_ReceiveCallBack+0x78>
			Parity=Buf[0]^Buf[1]^Buf[2]^Buf[3];
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4053      	eors	r3, r2
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	613b      	str	r3, [r7, #16]
			Temp=Buf[3];
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3303      	adds	r3, #3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e01f      	b.n	8000c24 <CDC_ReceiveCallBack+0xb8>
		}
		else{
			Parity=Buf[0]^Buf[1]^Buf[2]^Buf[3]^Buf[4];
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4053      	eors	r3, r2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4053      	eors	r3, r2
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3303      	adds	r3, #3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4053      	eors	r3, r2
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4053      	eors	r3, r2
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	613b      	str	r3, [r7, #16]
			Temp=(Buf[3]<< 8) | Buf[4];
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3303      	adds	r3, #3
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	3204      	adds	r2, #4
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	617b      	str	r3, [r7, #20]
		}
		if(Buf[Size+3]==Parity){
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3303      	adds	r3, #3
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d109      	bne.n	8000c4a <CDC_ReceiveCallBack+0xde>
			rpm=Temp;
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <CDC_ReceiveCallBack+0xf0>)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	6013      	str	r3, [r2, #0]
			TIM1->CCR1=65*rpm;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <CDC_ReceiveCallBack+0xf0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4613      	mov	r3, r2
 8000c42:	019b      	lsls	r3, r3, #6
 8000c44:	441a      	add	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <CDC_ReceiveCallBack+0xf4>)
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}


}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200002bc 	.word	0x200002bc
 8000c5c:	200002c0 	.word	0x200002c0
 8000c60:	40010000 	.word	0x40010000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_ADC_MspInit+0x7c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d127      	bne.n	8000d32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_ADC_MspInit+0x80>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <HAL_ADC_MspInit+0x80>)
 8000cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_ADC_MspInit+0x80>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_ADC_MspInit+0x80>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_ADC_MspInit+0x80>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_ADC_MspInit+0x80>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_ADC_MspInit+0x84>)
 8000d2e:	f000 fd51 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40012000 	.word	0x40012000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10e      	bne.n	8000d78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d76:	e026      	b.n	8000dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d80:	d10e      	bne.n	8000da0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
}
 8000d9e:	e012      	b.n	8000dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x94>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10d      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40000400 	.word	0x40000400

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_TIM_MspPostInit+0x68>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11e      	bne.n	8000e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Pwm_Pin;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pwm_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_TIM_MspPostInit+0x70>)
 8000e3c:	f000 fcca 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8d0 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <OTG_FS_IRQHandler+0x10>)
 8000eae:	f000 ff7e 	bl	8001dae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200017ac 	.word	0x200017ac

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f007 fd00 	bl	80088f0 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200002c4 	.word	0x200002c4
 8000f24:	20001ee8 	.word	0x20001ee8

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f007 fcbf 	bl	80088fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fab5 	bl	80004ec <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000f90:	08008bf0 	.word	0x08008bf0
  ldr r2, =_sbss
 8000f94:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000f98:	20001ee8 	.word	0x20001ee8

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 fbc1 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe4c 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fbd9 	bl	80017ba <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 fba1 	bl	8001766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	200002c8 	.word	0x200002c8

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200002c8 	.word	0x200002c8

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e033      	b.n	800114a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fde8 	bl	8000cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	d118      	bne.n	800113c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001112:	f023 0302 	bic.w	r3, r3, #2
 8001116:	f043 0202 	orr.w	r2, r3, #2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f94a 	bl	80013b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
 800113a:	e001      	b.n	8001140 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1c>
 800116c:	2302      	movs	r3, #2
 800116e:	e113      	b.n	8001398 <HAL_ADC_ConfigChannel+0x244>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d925      	bls.n	80011cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d9      	ldr	r1, [r3, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4403      	add	r3, r0
 80011be:	3b1e      	subs	r3, #30
 80011c0:	409a      	lsls	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e022      	b.n	8001212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	2207      	movs	r2, #7
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	4603      	mov	r3, r0
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4403      	add	r3, r0
 8001208:	409a      	lsls	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d824      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3b05      	subs	r3, #5
 800122c:	221f      	movs	r2, #31
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b05      	subs	r3, #5
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e04c      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d824      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b23      	subs	r3, #35	; 0x23
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43da      	mvns	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b23      	subs	r3, #35	; 0x23
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
 80012b4:	e023      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	; 0x41
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <HAL_ADC_ConfigChannel+0x250>)
 8001300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <HAL_ADC_ConfigChannel+0x254>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d10f      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d8>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d10b      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_ADC_ConfigChannel+0x254>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_ADC_ConfigChannel+0x258>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x1f4>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b11      	cmp	r3, #17
 8001346:	d122      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_ADC_ConfigChannel+0x258>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d111      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_ADC_ConfigChannel+0x25c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_ADC_ConfigChannel+0x260>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9a      	lsrs	r2, r3, #18
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001380:	e002      	b.n	8001388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3b01      	subs	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40012300 	.word	0x40012300
 80013a8:	40012000 	.word	0x40012000
 80013ac:	10000012 	.word	0x10000012
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c0:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <ADC_Init+0x1f0>)
 80013c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <ADC_Init+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d022      	beq.n	8001496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800145e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	e00f      	b.n	80014b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0202 	bic.w	r2, r2, #2
 80014c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e1b      	ldrb	r3, [r3, #24]
 80014d0:	005a      	lsls	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	3b01      	subs	r3, #1
 8001510:	035a      	lsls	r2, r3, #13
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	e007      	b.n	800152c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	3b01      	subs	r3, #1
 8001548:	051a      	lsls	r2, r3, #20
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6899      	ldr	r1, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800156e:	025a      	lsls	r2, r3, #9
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	029a      	lsls	r2, r3, #10
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	0f000001 	.word	0x0f000001

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff8e 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff29 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff3e 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff8e 	bl	80016a4 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5d 	bl	8001650 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff31 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa2 	bl	800170c <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e159      	b.n	8001aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8148 	bne.w	8001a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a2 	beq.w	8001a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x202>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x1fe>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x1f6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x1f2>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f aea2 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b10:	b08f      	sub	sp, #60	; 0x3c
 8001b12:	af0a      	add	r7, sp, #40	; 0x28
 8001b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e10f      	b.n	8001d40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f006 fbce 	bl	80082dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 feaf 	bl	80048c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	687e      	ldr	r6, [r7, #4]
 8001b6c:	466d      	mov	r5, sp
 8001b6e:	f106 0410 	add.w	r4, r6, #16
 8001b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b82:	1d33      	adds	r3, r6, #4
 8001b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b86:	6838      	ldr	r0, [r7, #0]
 8001b88:	f002 fd86 	bl	8004698 <USB_CoreInit>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0d0      	b.n	8001d40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fe9d 	bl	80048e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e04a      	b.n	8001c46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	333d      	adds	r3, #61	; 0x3d
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	333c      	adds	r3, #60	; 0x3c
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3344      	adds	r3, #68	; 0x44
 8001bec:	4602      	mov	r2, r0
 8001bee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3340      	adds	r3, #64	; 0x40
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3348      	adds	r3, #72	; 0x48
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	334c      	adds	r3, #76	; 0x4c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	3354      	adds	r3, #84	; 0x54
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	3301      	adds	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d3af      	bcc.n	8001bb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e044      	b.n	8001ce0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d3b5      	bcc.n	8001c56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	687e      	ldr	r6, [r7, #4]
 8001cf2:	466d      	mov	r5, sp
 8001cf4:	f106 0410 	add.w	r4, r6, #16
 8001cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d08:	1d33      	adds	r3, r6, #4
 8001d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d0c:	6838      	ldr	r0, [r7, #0]
 8001d0e:	f002 fe35 	bl	800497c <USB_DevInit>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00d      	b.n	8001d40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 ff84 	bl	8005c46 <USB_DevDisconnect>

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_PCD_Start+0x1c>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e020      	b.n	8001da6 <HAL_PCD_Start+0x5e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d109      	bne.n	8001d88 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d005      	beq.n	8001d88 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 fd87 	bl	80048a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 ff34 	bl	8005c04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dae:	b590      	push	{r4, r7, lr}
 8001db0:	b08d      	sub	sp, #52	; 0x34
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fff2 	bl	8005dae <USB_GetMode>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 848a 	bne.w	80026e6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 ff56 	bl	8005c88 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8480 	beq.w	80026e4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 ff43 	bl	8005c88 <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d107      	bne.n	8001e1c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f002 0202 	and.w	r2, r2, #2
 8001e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 ff31 	bl	8005c88 <USB_ReadInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d161      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0210 	bic.w	r2, r2, #16
 8001e3e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	0c5b      	lsrs	r3, r3, #17
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d124      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d035      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6a38      	ldr	r0, [r7, #32]
 8001e8c:	f003 fd68 	bl	8005960 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9c:	441a      	add	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eae:	441a      	add	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	621a      	str	r2, [r3, #32]
 8001eb4:	e016      	b.n	8001ee4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	0c5b      	lsrs	r3, r3, #17
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d110      	bne.n	8001ee4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6a38      	ldr	r0, [r7, #32]
 8001ece:	f003 fd47 	bl	8005960 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ede:	441a      	add	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fec5 	bl	8005c88 <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f08:	f040 80a7 	bne.w	800205a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 feca 	bl	8005cae <USB_ReadDevAllOutEpInterrupt>
 8001f1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f1c:	e099      	b.n	8002052 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 808e 	beq.w	8002046 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 feee 	bl	8005d16 <USB_ReadDevOutEPInterrupt>
 8001f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2301      	movs	r3, #1
 8001f56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fec2 	bl	8002ce4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f76:	461a      	mov	r2, r3
 8001f78:	2308      	movs	r3, #8
 8001f7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 ff98 	bl	8002eb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d030      	beq.n	800200c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	d109      	bne.n	8001fca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	78db      	ldrb	r3, [r3, #3]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d108      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2200      	movs	r2, #0
 8001fec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f006 fa6d 	bl	80084d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	2302      	movs	r3, #2
 800200a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	2320      	movs	r3, #32
 8002026:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002044:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	f47f af62 	bne.w	8001f1e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fe12 	bl	8005c88 <USB_ReadInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800206e:	f040 80db 	bne.w	8002228 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fe33 	bl	8005ce2 <USB_ReadDevAllInEpInterrupt>
 800207c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002082:	e0cd      	b.n	8002220 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80c2 	beq.w	8002214 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fe59 	bl	8005d52 <USB_ReadDevInEPInterrupt>
 80020a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d057      	beq.n	800215c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	2201      	movs	r2, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69f9      	ldr	r1, [r7, #28]
 80020c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020cc:	4013      	ands	r3, r2
 80020ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020dc:	461a      	mov	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d132      	bne.n	8002150 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	334c      	adds	r3, #76	; 0x4c
 80020fa:	6819      	ldr	r1, [r3, #0]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4403      	add	r3, r0
 800210a:	3348      	adds	r3, #72	; 0x48
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4419      	add	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4403      	add	r3, r0
 800211e:	334c      	adds	r3, #76	; 0x4c
 8002120:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d113      	bne.n	8002150 <HAL_PCD_IRQHandler+0x3a2>
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3354      	adds	r3, #84	; 0x54
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002148:	461a      	mov	r2, r3
 800214a:	2101      	movs	r1, #1
 800214c:	f003 fe60 	bl	8005e10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f006 f941 	bl	80083de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002172:	461a      	mov	r2, r3
 8002174:	2308      	movs	r3, #8
 8002176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800218e:	461a      	mov	r2, r3
 8002190:	2310      	movs	r3, #16
 8002192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	461a      	mov	r2, r3
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d023      	beq.n	8002202 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021bc:	6a38      	ldr	r0, [r7, #32]
 80021be:	f002 fd41 	bl	8004c44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	3338      	adds	r3, #56	; 0x38
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	3304      	adds	r3, #4
 80021d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2200      	movs	r2, #0
 80021e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f006 f984 	bl	80084f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fc:	461a      	mov	r2, r3
 80021fe:	2302      	movs	r3, #2
 8002200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800220c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fcdb 	bl	8002bca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	3301      	adds	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	f47f af2e 	bne.w	8002084 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fd2b 	bl	8005c88 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223c:	d122      	bne.n	8002284 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002258:	2b01      	cmp	r3, #1
 800225a:	d108      	bne.n	800226e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002264:	2100      	movs	r1, #0
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fec2 	bl	8002ff0 <HAL_PCDEx_LPM_Callback>
 800226c:	e002      	b.n	8002274 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f006 f922 	bl	80084b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fcfd 	bl	8005c88 <USB_ReadInterrupts>
 800228e:	4603      	mov	r3, r0
 8002290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002298:	d112      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f006 f8de 	bl	800846c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fcdf 	bl	8005c88 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d4:	f040 80b7 	bne.w	8002446 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2110      	movs	r1, #16
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fca6 	bl	8004c44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fc:	e046      	b.n	800238c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230a:	461a      	mov	r2, r3
 800230c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002310:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	440a      	add	r2, r1
 8002328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800232c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002330:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	461a      	mov	r2, r3
 8002340:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002344:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002356:	0151      	lsls	r1, r2, #5
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	440a      	add	r2, r1
 800235c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002364:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	0151      	lsls	r1, r2, #5
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	440a      	add	r2, r1
 800237c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002384:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	3301      	adds	r3, #1
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002392:	429a      	cmp	r2, r3
 8002394:	d3b3      	bcc.n	80022fe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c2:	f043 030b 	orr.w	r3, r3, #11
 80023c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d8:	f043 030b 	orr.w	r3, r3, #11
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	e015      	b.n	800240c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002406:	f043 030b 	orr.w	r3, r3, #11
 800240a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800241e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002430:	461a      	mov	r2, r3
 8002432:	f003 fced 	bl	8005e10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fc1c 	bl	8005c88 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	d124      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fcb2 	bl	8005dca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fc67 	bl	8004d3e <USB_GetDevSpeed>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681c      	ldr	r4, [r3, #0]
 800247c:	f001 f9e8 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8002480:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4620      	mov	r0, r4
 800248c:	f002 f966 	bl	800475c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f005 ffcc 	bl	800842e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fbec 	bl	8005c88 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d10a      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f005 ffa9 	bl	8008412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f002 0208 	and.w	r2, r2, #8
 80024ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fbd7 	bl	8005c88 <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b80      	cmp	r3, #128	; 0x80
 80024e2:	d122      	bne.n	800252a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f0:	2301      	movs	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	e014      	b.n	8002520 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4619      	mov	r1, r3
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fb27 	bl	8002b68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	3301      	adds	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	429a      	cmp	r2, r3
 8002528:	d3e5      	bcc.n	80024f6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fbaa 	bl	8005c88 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253e:	d13b      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
 8002544:	e02b      	b.n	800259e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3340      	adds	r3, #64	; 0x40
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d115      	bne.n	8002598 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800256c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	da12      	bge.n	8002598 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	333f      	adds	r3, #63	; 0x3f
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fae8 	bl	8002b68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	3301      	adds	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3ce      	bcc.n	8002546 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fb63 	bl	8005c88 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025cc:	d155      	bne.n	800267a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ce:	2301      	movs	r3, #1
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	e045      	b.n	8002660 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d12e      	bne.n	800265a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da2b      	bge.n	800265a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800260e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002612:	429a      	cmp	r2, r3
 8002614:	d121      	bne.n	800265a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6053      	str	r3, [r2, #4]
            break;
 8002658:	e007      	b.n	800266a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3301      	adds	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	429a      	cmp	r2, r3
 8002668:	d3b4      	bcc.n	80025d4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fb02 	bl	8005c88 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d10a      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f005 ff43 	bl	800851c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 faec 	bl	8005c88 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d115      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f005 ff33 	bl	8008538 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e000      	b.n	80026e6 <HAL_PCD_IRQHandler+0x938>
      return;
 80026e4:	bf00      	nop
    }
  }
}
 80026e6:	3734      	adds	r7, #52	; 0x34
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}

080026ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_PCD_SetAddress+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e013      	b.n	800272e <HAL_PCD_SetAddress+0x42>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fa4a 	bl	8005bb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	4608      	mov	r0, r1
 8002740:	4611      	mov	r1, r2
 8002742:	461a      	mov	r2, r3
 8002744:	4603      	mov	r3, r0
 8002746:	70fb      	strb	r3, [r7, #3]
 8002748:	460b      	mov	r3, r1
 800274a:	803b      	strh	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002758:	2b00      	cmp	r3, #0
 800275a:	da0f      	bge.n	800277c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	3338      	adds	r3, #56	; 0x38
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	3304      	adds	r3, #4
 8002772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	705a      	strb	r2, [r3, #1]
 800277a:	e00f      	b.n	800279c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 020f 	and.w	r2, r3, #15
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	3304      	adds	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027a8:	883a      	ldrh	r2, [r7, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	78ba      	ldrb	r2, [r7, #2]
 80027b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027c6:	78bb      	ldrb	r3, [r7, #2]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d102      	bne.n	80027d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_PCD_EP_Open+0xaa>
 80027dc:	2302      	movs	r3, #2
 80027de:	e00e      	b.n	80027fe <HAL_PCD_EP_Open+0xc8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 faca 	bl	8004d88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027fc:	7afb      	ldrb	r3, [r7, #11]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002816:	2b00      	cmp	r3, #0
 8002818:	da0f      	bge.n	800283a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	3338      	adds	r3, #56	; 0x38
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	705a      	strb	r2, [r3, #1]
 8002838:	e00f      	b.n	800285a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_PCD_EP_Close+0x6e>
 8002870:	2302      	movs	r3, #2
 8002872:	e00e      	b.n	8002892 <HAL_PCD_EP_Close+0x8c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fb08 	bl	8004e98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	460b      	mov	r3, r1
 80028a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	3304      	adds	r3, #4
 80028c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028dc:	7afb      	ldrb	r3, [r7, #11]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d102      	bne.n	80028f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	f002 fde7 	bl	80054e0 <USB_EP0StartXfer>
 8002912:	e008      	b.n	8002926 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	f002 fb95 	bl	8005050 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	460b      	mov	r3, r1
 800296e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002970:	7afb      	ldrb	r3, [r7, #11]
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	3338      	adds	r3, #56	; 0x38
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2201      	movs	r2, #1
 800299e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a0:	7afb      	ldrb	r3, [r7, #11]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6979      	ldr	r1, [r7, #20]
 80029d2:	f002 fd85 	bl	80054e0 <USB_EP0StartXfer>
 80029d6:	e008      	b.n	80029ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6979      	ldr	r1, [r7, #20]
 80029e6:	f002 fb33 	bl	8005050 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d901      	bls.n	8002a12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e050      	b.n	8002ab4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da0f      	bge.n	8002a3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3338      	adds	r3, #56	; 0x38
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	705a      	strb	r2, [r3, #1]
 8002a38:	e00d      	b.n	8002a56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_EP_SetStall+0x82>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e01e      	b.n	8002ab4 <HAL_PCD_EP_SetStall+0xc0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 ffc3 	bl	8005a10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	b2d9      	uxtb	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f003 f9b3 	bl	8005e10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 020f 	and.w	r2, r3, #15
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d901      	bls.n	8002ada <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e042      	b.n	8002b60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	da0f      	bge.n	8002b02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	3338      	adds	r3, #56	; 0x38
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	705a      	strb	r2, [r3, #1]
 8002b00:	e00f      	b.n	8002b22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 020f 	and.w	r2, r3, #15
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_EP_ClrStall+0x86>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e00e      	b.n	8002b60 <HAL_PCD_EP_ClrStall+0xa4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 ffcb 	bl	8005aec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da0c      	bge.n	8002b96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3338      	adds	r3, #56	; 0x38
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e00c      	b.n	8002bb0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fdea 	bl	8005790 <USB_EPStopXfer>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b08a      	sub	sp, #40	; 0x28
 8002bce:	af02      	add	r7, sp, #8
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	3338      	adds	r3, #56	; 0x38
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d901      	bls.n	8002c02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06c      	b.n	8002cdc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d902      	bls.n	8002c1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3303      	adds	r3, #3
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c26:	e02b      	b.n	8002c80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d902      	bls.n	8002c44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3303      	adds	r3, #3
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6919      	ldr	r1, [r3, #16]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f002 fe3e 	bl	80058e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1a      	ldr	r2, [r3, #32]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d809      	bhi.n	8002caa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d203      	bcs.n	8002caa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1be      	bne.n	8002c28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d811      	bhi.n	8002cda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	6939      	ldr	r1, [r7, #16]
 8002cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	333c      	adds	r3, #60	; 0x3c
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d17b      	bne.n	8002e12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	4a61      	ldr	r2, [pc, #388]	; (8002eac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	f240 80b9 	bls.w	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80b3 	beq.w	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d4c:	6093      	str	r3, [r2, #8]
 8002d4e:	e0a7      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	461a      	mov	r2, r3
 8002d68:	2320      	movs	r3, #32
 8002d6a:	6093      	str	r3, [r2, #8]
 8002d6c:	e098      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 8093 	bne.w	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	; (8002eac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d90f      	bls.n	8002da2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	6093      	str	r3, [r2, #8]
 8002da0:	e07e      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	0159      	lsls	r1, r3, #5
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	1ad2      	subs	r2, r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d114      	bne.n	8002e04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dec:	461a      	mov	r2, r3
 8002dee:	2101      	movs	r1, #1
 8002df0:	f003 f80e 	bl	8005e10 <USB_EP0_OutStart>
 8002df4:	e006      	b.n	8002e04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f005 facc 	bl	80083a8 <HAL_PCD_DataOutStageCallback>
 8002e10:	e046      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d124      	bne.n	8002e64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e36:	6093      	str	r3, [r2, #8]
 8002e38:	e032      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	461a      	mov	r2, r3
 8002e52:	2320      	movs	r3, #32
 8002e54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f005 faa3 	bl	80083a8 <HAL_PCD_DataOutStageCallback>
 8002e62:	e01d      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d114      	bne.n	8002e94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d108      	bne.n	8002e94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f002 ffbe 	bl	8005e10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f005 fa84 	bl	80083a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	4f54300a 	.word	0x4f54300a
 8002eb0:	4f54310a 	.word	0x4f54310a

08002eb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	333c      	adds	r3, #60	; 0x3c
 8002ecc:	3304      	adds	r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d90e      	bls.n	8002f08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f005 fa3b 	bl	8008384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d90c      	bls.n	8002f30 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d108      	bne.n	8002f30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	f002 ff70 	bl	8005e10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	4f54300a 	.word	0x4f54300a

08002f40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f5e:	883b      	ldrh	r3, [r7, #0]
 8002f60:	0419      	lsls	r1, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6c:	e028      	b.n	8002fc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e00d      	b.n	8002f9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	3340      	adds	r3, #64	; 0x40
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4413      	add	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3ec      	bcc.n	8002f82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	0418      	lsls	r0, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4302      	orrs	r2, r0
 8002fb8:	3340      	adds	r3, #64	; 0x40
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e267      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d075      	beq.n	8003112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00c      	beq.n	800304c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d112      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4b82      	ldr	r3, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	4b7e      	ldr	r3, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <HAL_RCC_OscConfig+0x108>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d157      	bne.n	8003110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e242      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x74>
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x98>
 8003086:	4b70      	ldr	r3, [pc, #448]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6f      	ldr	r2, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6c      	ldr	r2, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 80030a0:	4b69      	ldr	r3, [pc, #420]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd ffd4 	bl	800106c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fd ffd0 	bl	800106c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e207      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xc0>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fd ffc0 	bl	800106c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fd ffbc 	bl	800106c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1f3      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0xe8>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1c7      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x244>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fd ff75 	bl	800106c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003186:	f7fd ff71 	bl	800106c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1a8      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x244>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd ff54 	bl	800106c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fd ff50 	bl	800106c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e187      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fd ff34 	bl	800106c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7fd ff30 	bl	800106c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e167      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x200>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fd ff1d 	bl	800106c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003236:	f7fd ff19 	bl	800106c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e150      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7d      	ldr	r3, [pc, #500]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b74      	ldr	r3, [pc, #464]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fd fed9 	bl	800106c <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fd fed5 	bl	800106c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e10c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ea>
 80032e4:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a63      	ldr	r2, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x30c>
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a5e      	ldr	r2, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a5b      	ldr	r2, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd fe9a 	bl	800106c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fd fe96 	bl	800106c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0cb      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b49      	ldr	r3, [pc, #292]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x334>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fd fe84 	bl	800106c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd fe80 	bl	800106c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0b5      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a38      	ldr	r2, [pc, #224]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a1 	beq.w	80034e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d05c      	beq.n	800346c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d141      	bne.n	800343e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd fe54 	bl	800106c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fe50 	bl	800106c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e087      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	491b      	ldr	r1, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fd fe29 	bl	800106c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fd fe25 	bl	800106c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e05c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x416>
 800343c:	e054      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fd fe12 	bl	800106c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd fe0e 	bl	800106c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e045      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x444>
 800346a:	e03d      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e038      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x4ec>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d028      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0cc      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d90c      	bls.n	8003534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b65      	ldr	r3, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d044      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e067      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4934      	ldr	r1, [pc, #208]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fd fd40 	bl	800106c <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fd fd3c 	bl	800106c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e04f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d20c      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fca0 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08008bd0 	.word	0x08008bd0
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b090      	sub	sp, #64	; 0x40
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
 80036d0:	2300      	movs	r3, #0
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	2300      	movs	r3, #0
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d00d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 80a1 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e09b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_GetSysClockFreq+0x184>)
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036fc:	e09b      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003702:	e098      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d028      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	627a      	str	r2, [r7, #36]	; 0x24
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800372c:	2100      	movs	r1, #0
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 8003730:	fb03 f201 	mul.w	r2, r3, r1
 8003734:	2300      	movs	r3, #0
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	4413      	add	r3, r2
 800373c:	4a43      	ldr	r2, [pc, #268]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 800373e:	fba0 1202 	umull	r1, r2, r0, r2
 8003742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003744:	460a      	mov	r2, r1
 8003746:	62ba      	str	r2, [r7, #40]	; 0x28
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	4413      	add	r3, r2
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	2200      	movs	r2, #0
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800375e:	f7fc fd43 	bl	80001e8 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4613      	mov	r3, r2
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376a:	e053      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	2200      	movs	r2, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	617a      	str	r2, [r7, #20]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800377e:	f04f 0b00 	mov.w	fp, #0
 8003782:	4652      	mov	r2, sl
 8003784:	465b      	mov	r3, fp
 8003786:	f04f 0000 	mov.w	r0, #0
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003794:	0150      	lsls	r0, r2, #5
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	ebb2 080a 	subs.w	r8, r2, sl
 800379e:	eb63 090b 	sbc.w	r9, r3, fp
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037b6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ba:	eb63 0509 	sbc.w	r5, r3, r9
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	00eb      	lsls	r3, r5, #3
 80037c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037cc:	00e2      	lsls	r2, r4, #3
 80037ce:	4614      	mov	r4, r2
 80037d0:	461d      	mov	r5, r3
 80037d2:	eb14 030a 	adds.w	r3, r4, sl
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	eb45 030b 	adc.w	r3, r5, fp
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ea:	4629      	mov	r1, r5
 80037ec:	028b      	lsls	r3, r1, #10
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f4:	4621      	mov	r1, r4
 80037f6:	028a      	lsls	r2, r1, #10
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	2200      	movs	r2, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	60fa      	str	r2, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	f7fc fcee 	bl	80001e8 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetSysClockFreq+0x184>)
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003838:	4618      	mov	r0, r3
 800383a:	3740      	adds	r7, #64	; 0x40
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	017d7840 	.word	0x017d7840

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e041      	b.n	80038fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fa5a 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f000 fb6a 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e03c      	b.n	800399a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <HAL_TIM_Base_Start+0xa0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d018      	beq.n	8003964 <HAL_TIM_Base_Start+0x5c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d013      	beq.n	8003964 <HAL_TIM_Base_Start+0x5c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_TIM_Base_Start+0xa4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_TIM_Base_Start+0x5c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_TIM_Base_Start+0xa8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIM_Base_Start+0x5c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_TIM_Base_Start+0xac>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIM_Base_Start+0x5c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_TIM_Base_Start+0xb0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d010      	beq.n	8003998 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	e007      	b.n	8003998 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40014000 	.word	0x40014000

080039bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f839 	bl	8003a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fac0 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start_IT+0x28>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e022      	b.n	8003ade <HAL_TIM_PWM_Start_IT+0x6e>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d109      	bne.n	8003ab2 <HAL_TIM_PWM_Start_IT+0x42>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e015      	b.n	8003ade <HAL_TIM_PWM_Start_IT+0x6e>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d109      	bne.n	8003acc <HAL_TIM_PWM_Start_IT+0x5c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e008      	b.n	8003ade <HAL_TIM_PWM_Start_IT+0x6e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0b3      	b.n	8003c4e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start_IT+0x86>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af4:	e013      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0xae>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start_IT+0x96>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	e00b      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0xae>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_PWM_Start_IT+0xa6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b14:	e003      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0xae>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d841      	bhi.n	8003ba8 <HAL_TIM_PWM_Start_IT+0x138>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <HAL_TIM_PWM_Start_IT+0xbc>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b61 	.word	0x08003b61
 8003b30:	08003ba9 	.word	0x08003ba9
 8003b34:	08003ba9 	.word	0x08003ba9
 8003b38:	08003ba9 	.word	0x08003ba9
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003ba9 	.word	0x08003ba9
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003ba9 	.word	0x08003ba9
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003ba9 	.word	0x08003ba9
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003b97 	.word	0x08003b97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0202 	orr.w	r2, r2, #2
 8003b6e:	60da      	str	r2, [r3, #12]
      break;
 8003b70:	e01d      	b.n	8003bae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0204 	orr.w	r2, r2, #4
 8003b80:	60da      	str	r2, [r3, #12]
      break;
 8003b82:	e014      	b.n	8003bae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	60da      	str	r2, [r3, #12]
      break;
 8003b94:	e00b      	b.n	8003bae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0210 	orr.w	r2, r2, #16
 8003ba4:	60da      	str	r2, [r3, #12]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d14b      	bne.n	8003c4c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	6839      	ldr	r1, [r7, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fc85 	bl	80044cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d018      	beq.n	8003c18 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d013      	beq.n	8003c18 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00e      	beq.n	8003c18 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d111      	bne.n	8003c3c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d010      	beq.n	8003c4c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3a:	e007      	b.n	8003c4c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ae      	b.n	8003de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	f200 809f 	bhi.w	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cd5 	.word	0x08003cd5
 8003ca4:	08003dd9 	.word	0x08003dd9
 8003ca8:	08003dd9 	.word	0x08003dd9
 8003cac:	08003dd9 	.word	0x08003dd9
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003dd9 	.word	0x08003dd9
 8003cb8:	08003dd9 	.word	0x08003dd9
 8003cbc:	08003dd9 	.word	0x08003dd9
 8003cc0:	08003d57 	.word	0x08003d57
 8003cc4:	08003dd9 	.word	0x08003dd9
 8003cc8:	08003dd9 	.word	0x08003dd9
 8003ccc:	08003dd9 	.word	0x08003dd9
 8003cd0:	08003d97 	.word	0x08003d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f9d0 	bl	8004080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
      break;
 8003d12:	e064      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fa16 	bl	800414c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	619a      	str	r2, [r3, #24]
      break;
 8003d54:	e043      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fa61 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
      break;
 8003d94:	e023      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 faab 	bl	80042f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	61da      	str	r2, [r3, #28]
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	75fb      	strb	r3, [r7, #23]
      break;
 8003ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_TIM_ConfigClockSource+0x1c>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0b4      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x186>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e44:	d03e      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4a:	f200 8087 	bhi.w	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	f000 8086 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x172>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d87f      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d01a      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0xa6>
 8003e60:	2b70      	cmp	r3, #112	; 0x70
 8003e62:	d87b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d050      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x11a>
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d877      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d03c      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xfa>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d873      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d058      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x13a>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d86f      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d064      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15a>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d86b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d060      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d867      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05c      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d05a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15a>
 8003e94:	e062      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f000 faf1 	bl	800448c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	609a      	str	r2, [r3, #8]
      break;
 8003ec2:	e04f      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f000 fada 	bl	800448c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee6:	609a      	str	r2, [r3, #8]
      break;
 8003ee8:	e03c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fa4e 	bl	8004398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2150      	movs	r1, #80	; 0x50
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 faa7 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f08:	e02c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fa6d 	bl	80043f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2160      	movs	r1, #96	; 0x60
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa97 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f28:	e01c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fa2e 	bl	8004398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2140      	movs	r1, #64	; 0x40
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa87 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f48:	e00c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f000 fa7e 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f5a:	e003      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e000      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a34      	ldr	r2, [pc, #208]	; (8004064 <TIM_Base_SetConfig+0xe4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00f      	beq.n	8003fb8 <TIM_Base_SetConfig+0x38>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d00b      	beq.n	8003fb8 <TIM_Base_SetConfig+0x38>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a31      	ldr	r2, [pc, #196]	; (8004068 <TIM_Base_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d007      	beq.n	8003fb8 <TIM_Base_SetConfig+0x38>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a30      	ldr	r2, [pc, #192]	; (800406c <TIM_Base_SetConfig+0xec>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0x38>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <TIM_Base_SetConfig+0xf0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d108      	bne.n	8003fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	; (8004064 <TIM_Base_SetConfig+0xe4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01b      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d017      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <TIM_Base_SetConfig+0xe8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <TIM_Base_SetConfig+0xec>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00f      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a20      	ldr	r2, [pc, #128]	; (8004070 <TIM_Base_SetConfig+0xf0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <TIM_Base_SetConfig+0xf4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <TIM_Base_SetConfig+0xf8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1d      	ldr	r2, [pc, #116]	; (800407c <TIM_Base_SetConfig+0xfc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <TIM_Base_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0201 	bic.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0302 	bic.w	r3, r3, #2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <TIM_OC1_SetConfig+0xc8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10c      	bne.n	80040f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0308 	bic.w	r3, r3, #8
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a13      	ldr	r2, [pc, #76]	; (8004148 <TIM_OC1_SetConfig+0xc8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d111      	bne.n	8004122 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800410c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40010000 	.word	0x40010000

0800414c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0210 	bic.w	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0320 	bic.w	r3, r3, #32
 8004196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <TIM_OC2_SetConfig+0xd4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10d      	bne.n	80041c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <TIM_OC2_SetConfig+0xd4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d113      	bne.n	80041f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <TIM_OC3_SetConfig+0xd0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10d      	bne.n	800429e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800429c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <TIM_OC3_SetConfig+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d113      	bne.n	80042ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	621a      	str	r2, [r3, #32]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40010000 	.word	0x40010000

080042f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <TIM_OC4_SetConfig+0x9c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d109      	bne.n	800436c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	019b      	lsls	r3, r3, #6
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000

08004398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0201 	bic.w	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 030a 	bic.w	r3, r3, #10
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0210 	bic.w	r2, r3, #16
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	031b      	lsls	r3, r3, #12
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	f043 0307 	orr.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	021a      	lsls	r2, r3, #8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	609a      	str	r2, [r3, #8]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2201      	movs	r2, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e050      	b.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d013      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10c      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40014000 	.word	0x40014000

080045f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800460c:	2302      	movs	r3, #2
 800460e:	e03d      	b.n	800468c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004698:	b084      	sub	sp, #16
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	f107 001c 	add.w	r0, r7, #28
 80046a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d122      	bne.n	80046f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 fbee 	bl	8005ecc <USB_CoreReset>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e01a      	b.n	800472c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fbe2 	bl	8005ecc <USB_CoreReset>
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	639a      	str	r2, [r3, #56]	; 0x38
 800471e:	e005      	b.n	800472c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10b      	bne.n	800474a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f043 0206 	orr.w	r2, r3, #6
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004756:	b004      	add	sp, #16
 8004758:	4770      	bx	lr
	...

0800475c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d165      	bne.n	800483c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a41      	ldr	r2, [pc, #260]	; (8004878 <USB_SetTurnaroundTime+0x11c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d906      	bls.n	8004786 <USB_SetTurnaroundTime+0x2a>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4a40      	ldr	r2, [pc, #256]	; (800487c <USB_SetTurnaroundTime+0x120>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d202      	bcs.n	8004786 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004780:	230f      	movs	r3, #15
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e062      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a3c      	ldr	r2, [pc, #240]	; (800487c <USB_SetTurnaroundTime+0x120>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d306      	bcc.n	800479c <USB_SetTurnaroundTime+0x40>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <USB_SetTurnaroundTime+0x124>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d202      	bcs.n	800479c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004796:	230e      	movs	r3, #14
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e057      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a38      	ldr	r2, [pc, #224]	; (8004880 <USB_SetTurnaroundTime+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d306      	bcc.n	80047b2 <USB_SetTurnaroundTime+0x56>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4a37      	ldr	r2, [pc, #220]	; (8004884 <USB_SetTurnaroundTime+0x128>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d202      	bcs.n	80047b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047ac:	230d      	movs	r3, #13
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e04c      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4a33      	ldr	r2, [pc, #204]	; (8004884 <USB_SetTurnaroundTime+0x128>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d306      	bcc.n	80047c8 <USB_SetTurnaroundTime+0x6c>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4a32      	ldr	r2, [pc, #200]	; (8004888 <USB_SetTurnaroundTime+0x12c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d802      	bhi.n	80047c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047c2:	230c      	movs	r3, #12
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e041      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <USB_SetTurnaroundTime+0x12c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d906      	bls.n	80047de <USB_SetTurnaroundTime+0x82>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4a2e      	ldr	r2, [pc, #184]	; (800488c <USB_SetTurnaroundTime+0x130>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d802      	bhi.n	80047de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047d8:	230b      	movs	r3, #11
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e036      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	; (800488c <USB_SetTurnaroundTime+0x130>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d906      	bls.n	80047f4 <USB_SetTurnaroundTime+0x98>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4a29      	ldr	r2, [pc, #164]	; (8004890 <USB_SetTurnaroundTime+0x134>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d802      	bhi.n	80047f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047ee:	230a      	movs	r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e02b      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <USB_SetTurnaroundTime+0x134>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d906      	bls.n	800480a <USB_SetTurnaroundTime+0xae>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <USB_SetTurnaroundTime+0x138>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d202      	bcs.n	800480a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004804:	2309      	movs	r3, #9
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e020      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a21      	ldr	r2, [pc, #132]	; (8004894 <USB_SetTurnaroundTime+0x138>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d306      	bcc.n	8004820 <USB_SetTurnaroundTime+0xc4>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4a20      	ldr	r2, [pc, #128]	; (8004898 <USB_SetTurnaroundTime+0x13c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d802      	bhi.n	8004820 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800481a:	2308      	movs	r3, #8
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e015      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <USB_SetTurnaroundTime+0x13c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d906      	bls.n	8004836 <USB_SetTurnaroundTime+0xda>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4a1c      	ldr	r2, [pc, #112]	; (800489c <USB_SetTurnaroundTime+0x140>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d202      	bcs.n	8004836 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004830:	2307      	movs	r3, #7
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e00a      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004836:	2306      	movs	r3, #6
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e007      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004842:	2309      	movs	r3, #9
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e001      	b.n	800484c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004848:	2309      	movs	r3, #9
 800484a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	00d8acbf 	.word	0x00d8acbf
 800487c:	00e4e1c0 	.word	0x00e4e1c0
 8004880:	00f42400 	.word	0x00f42400
 8004884:	01067380 	.word	0x01067380
 8004888:	011a499f 	.word	0x011a499f
 800488c:	01312cff 	.word	0x01312cff
 8004890:	014ca43f 	.word	0x014ca43f
 8004894:	016e3600 	.word	0x016e3600
 8004898:	01a6ab1f 	.word	0x01a6ab1f
 800489c:	01e84800 	.word	0x01e84800

080048a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f043 0201 	orr.w	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004912:	2001      	movs	r0, #1
 8004914:	f7fc fbb6 	bl	8001084 <HAL_Delay>
      ms++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 fa45 	bl	8005dae <USB_GetMode>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d01e      	beq.n	8004968 <USB_SetCurrentMode+0x84>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b31      	cmp	r3, #49	; 0x31
 800492e:	d9f0      	bls.n	8004912 <USB_SetCurrentMode+0x2e>
 8004930:	e01a      	b.n	8004968 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d115      	bne.n	8004964 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004944:	2001      	movs	r0, #1
 8004946:	f7fc fb9d 	bl	8001084 <HAL_Delay>
      ms++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f001 fa2c 	bl	8005dae <USB_GetMode>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <USB_SetCurrentMode+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b31      	cmp	r3, #49	; 0x31
 8004960:	d9f0      	bls.n	8004944 <USB_SetCurrentMode+0x60>
 8004962:	e001      	b.n	8004968 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e005      	b.n	8004974 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b32      	cmp	r3, #50	; 0x32
 800496c:	d101      	bne.n	8004972 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800497c:	b084      	sub	sp, #16
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800498a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e009      	b.n	80049b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	3340      	adds	r3, #64	; 0x40
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	2200      	movs	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3301      	adds	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0e      	cmp	r3, #14
 80049b4:	d9f2      	bls.n	800499c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11c      	bne.n	80049f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ca:	f043 0302 	orr.w	r3, r3, #2
 80049ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
 80049f4:	e00b      	b.n	8004a0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a14:	461a      	mov	r2, r3
 8004a16:	2300      	movs	r3, #0
 8004a18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a20:	4619      	mov	r1, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	461a      	mov	r2, r3
 8004a2a:	680b      	ldr	r3, [r1, #0]
 8004a2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f965 	bl	8004d0c <USB_SetDevSpeed>
 8004a42:	e008      	b.n	8004a56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a44:	2101      	movs	r1, #1
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f960 	bl	8004d0c <USB_SetDevSpeed>
 8004a4c:	e003      	b.n	8004a56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a4e:	2103      	movs	r1, #3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f95b 	bl	8004d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a56:	2110      	movs	r1, #16
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8f3 	bl	8004c44 <USB_FlushTxFifo>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f91f 	bl	8004cac <USB_FlushRxFifo>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	e043      	b.n	8004b2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab8:	d118      	bne.n	8004aec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e013      	b.n	8004afe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e008      	b.n	8004afe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	461a      	mov	r2, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3301      	adds	r3, #1
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d3b7      	bcc.n	8004aa2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e043      	b.n	8004bc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4e:	d118      	bne.n	8004b82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	461a      	mov	r2, r3
 8004b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e013      	b.n	8004b94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e008      	b.n	8004b94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3b7      	bcc.n	8004b38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f043 0210 	orr.w	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <USB_DevInit+0x2c4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f043 0208 	orr.w	r2, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d107      	bne.n	8004c30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c3c:	b004      	add	sp, #16
 8004c3e:	4770      	bx	lr
 8004c40:	803c3800 	.word	0x803c3800

08004c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_FlushTxFifo+0x64>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e01b      	b.n	8004c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	daf2      	bge.n	8004c52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	019b      	lsls	r3, r3, #6
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <USB_FlushTxFifo+0x64>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e006      	b.n	8004c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d0f0      	beq.n	8004c7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <USB_FlushRxFifo+0x5c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e018      	b.n	8004cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	daf2      	bge.n	8004cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <USB_FlushRxFifo+0x5c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e006      	b.n	8004cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d0f0      	beq.n	8004cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	00030d40 	.word	0x00030d40

08004d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0306 	and.w	r3, r3, #6
 8004d56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	75fb      	strb	r3, [r7, #23]
 8004d62:	e00a      	b.n	8004d7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d002      	beq.n	8004d70 <USB_GetDevSpeed+0x32>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b06      	cmp	r3, #6
 8004d6e:	d102      	bne.n	8004d76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d70:	2302      	movs	r3, #2
 8004d72:	75fb      	strb	r3, [r7, #23]
 8004d74:	e001      	b.n	8004d7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d76:	230f      	movs	r3, #15
 8004d78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d13a      	bne.n	8004e1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d155      	bne.n	8004e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	791b      	ldrb	r3, [r3, #4]
 8004df6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004df8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	059b      	lsls	r3, r3, #22
 8004dfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e00:	4313      	orrs	r3, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e036      	b.n	8004e88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	041b      	lsls	r3, r3, #16
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d11a      	bne.n	8004e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	791b      	ldrb	r3, [r3, #4]
 8004e6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d161      	bne.n	8004f78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eca:	d11f      	bne.n	8004f0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f50:	4013      	ands	r3, r2
 8004f52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	0159      	lsls	r1, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	440b      	add	r3, r1
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4b35      	ldr	r3, [pc, #212]	; (8005048 <USB_DeactivateEndpoint+0x1b0>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
 8004f76:	e060      	b.n	800503a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8e:	d11f      	bne.n	8004fd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004faa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	2101      	movs	r1, #1
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	43db      	mvns	r3, r3
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005014:	4013      	ands	r3, r2
 8005016:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	0159      	lsls	r1, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	440b      	add	r3, r1
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	4619      	mov	r1, r3
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <USB_DeactivateEndpoint+0x1b4>)
 8005036:	4013      	ands	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	ec337800 	.word	0xec337800
 800504c:	eff37800 	.word	0xeff37800

08005050 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 815c 	bne.w	800532a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d132      	bne.n	80050e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800509c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d8:	0cdb      	lsrs	r3, r3, #19
 80050da:	04db      	lsls	r3, r3, #19
 80050dc:	6113      	str	r3, [r2, #16]
 80050de:	e074      	b.n	80051ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fa:	0cdb      	lsrs	r3, r3, #19
 80050fc:	04db      	lsls	r3, r3, #19
 80050fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800511e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6999      	ldr	r1, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	440b      	add	r3, r1
 800513c:	1e59      	subs	r1, r3, #1
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	fbb1 f3f3 	udiv	r3, r1, r3
 8005146:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005148:	4b9d      	ldr	r3, [pc, #628]	; (80053c0 <USB_EPStartXfer+0x370>)
 800514a:	400b      	ands	r3, r1
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	0148      	lsls	r0, r1, #5
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	4401      	add	r1, r0
 8005154:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	0148      	lsls	r0, r1, #5
 8005176:	69f9      	ldr	r1, [r7, #28]
 8005178:	4401      	add	r1, r0
 800517a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800517e:	4313      	orrs	r3, r2
 8005180:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	791b      	ldrb	r3, [r3, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d11f      	bne.n	80051ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d14b      	bne.n	8005268 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	791b      	ldrb	r3, [r3, #4]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d128      	bne.n	8005246 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d110      	bne.n	8005226 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e00f      	b.n	8005246 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e133      	b.n	80054d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005286:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	791b      	ldrb	r3, [r3, #4]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d015      	beq.n	80052bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 811b 	beq.w	80054d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	2101      	movs	r1, #1
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	69f9      	ldr	r1, [r7, #28]
 80052b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b6:	4313      	orrs	r3, r2
 80052b8:	634b      	str	r3, [r1, #52]	; 0x34
 80052ba:	e109      	b.n	80054d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d110      	bne.n	80052ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e00f      	b.n	800530e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6919      	ldr	r1, [r3, #16]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	b298      	uxth	r0, r3
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	4603      	mov	r3, r0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fade 	bl	80058e4 <USB_WritePacket>
 8005328:	e0d2      	b.n	80054d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	0cdb      	lsrs	r3, r3, #19
 8005346:	04db      	lsls	r3, r3, #19
 8005348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d126      	bne.n	80053c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	0148      	lsls	r0, r1, #5
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	4401      	add	r1, r0
 8005394:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005398:	4313      	orrs	r3, r2
 800539a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ba:	6113      	str	r3, [r2, #16]
 80053bc:	e03a      	b.n	8005434 <USB_EPStartXfer+0x3e4>
 80053be:	bf00      	nop
 80053c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	8afa      	ldrh	r2, [r7, #22]
 80053e0:	fb03 f202 	mul.w	r2, r3, r2
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	8afb      	ldrh	r3, [r7, #22]
 80053f8:	04d9      	lsls	r1, r3, #19
 80053fa:	4b38      	ldr	r3, [pc, #224]	; (80054dc <USB_EPStartXfer+0x48c>)
 80053fc:	400b      	ands	r3, r1
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	0148      	lsls	r0, r1, #5
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	4401      	add	r1, r0
 8005406:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800540a:	4313      	orrs	r3, r2
 800540c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	0148      	lsls	r0, r1, #5
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	4401      	add	r1, r0
 800542c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10d      	bne.n	8005456 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6919      	ldr	r1, [r3, #16]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	460a      	mov	r2, r1
 8005454:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d128      	bne.n	80054b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d110      	bne.n	8005490 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005488:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e00f      	b.n	80054b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	1ff80000 	.word	0x1ff80000

080054e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	f040 80ce 	bne.w	800569e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d132      	bne.n	8005570 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005524:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005528:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800552c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800554c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	0cdb      	lsrs	r3, r3, #19
 800556a:	04db      	lsls	r3, r3, #19
 800556c:	6113      	str	r3, [r2, #16]
 800556e:	e04e      	b.n	800560e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	0cdb      	lsrs	r3, r3, #19
 800558c:	04db      	lsls	r3, r3, #19
 800558e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d903      	bls.n	80055c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055fe:	6939      	ldr	r1, [r7, #16]
 8005600:	0148      	lsls	r0, r1, #5
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	4401      	add	r1, r0
 8005606:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800560a:	4313      	orrs	r3, r2
 800560c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d11e      	bne.n	8005652 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	461a      	mov	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e097      	b.n	8005782 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005670:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8083 	beq.w	8005782 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	2101      	movs	r1, #1
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	6979      	ldr	r1, [r7, #20]
 8005694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005698:	4313      	orrs	r3, r2
 800569a:	634b      	str	r3, [r1, #52]	; 0x34
 800569c:	e071      	b.n	8005782 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b8:	0cdb      	lsrs	r3, r3, #19
 80056ba:	04db      	lsls	r3, r3, #19
 80056bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	6939      	ldr	r1, [r7, #16]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	6979      	ldr	r1, [r7, #20]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10d      	bne.n	8005762 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	460a      	mov	r2, r1
 8005760:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005780:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d14a      	bne.n	8005844 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c6:	f040 8086 	bne.w	80058d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005810:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f242 7210 	movw	r2, #10000	; 0x2710
 800581e:	4293      	cmp	r3, r2
 8005820:	d902      	bls.n	8005828 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
          break;
 8005826:	e056      	b.n	80058d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005840:	d0e7      	beq.n	8005812 <USB_EPStopXfer+0x82>
 8005842:	e048      	b.n	80058d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800585c:	d13b      	bne.n	80058d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	7812      	ldrb	r2, [r2, #0]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005880:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	7812      	ldrb	r2, [r2, #0]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d902      	bls.n	80058bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ba:	e00c      	b.n	80058d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d4:	d0e7      	beq.n	80058a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	; 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	460b      	mov	r3, r1
 80058f4:	71fb      	strb	r3, [r7, #7]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d123      	bne.n	8005952 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800590a:	88bb      	ldrh	r3, [r7, #4]
 800590c:	3303      	adds	r3, #3
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005912:	2300      	movs	r3, #0
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	e018      	b.n	800594a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	031a      	lsls	r2, r3, #12
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4413      	add	r3, r2
 8005920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005924:	461a      	mov	r2, r3
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3301      	adds	r3, #1
 8005936:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3301      	adds	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	3301      	adds	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	d3e2      	bcc.n	8005918 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3724      	adds	r7, #36	; 0x24
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005960:	b480      	push	{r7}
 8005962:	b08b      	sub	sp, #44	; 0x2c
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	b29b      	uxth	r3, r3
 800597c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	623b      	str	r3, [r7, #32]
 800598a:	e014      	b.n	80059b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	601a      	str	r2, [r3, #0]
    pDest++;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	3301      	adds	r3, #1
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	3301      	adds	r3, #1
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	3301      	adds	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	3301      	adds	r3, #1
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	6a3a      	ldr	r2, [r7, #32]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3e6      	bcc.n	800598c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059be:	8bfb      	ldrh	r3, [r7, #30]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01e      	beq.n	8005a02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ce:	461a      	mov	r2, r3
 80059d0:	f107 0310 	add.w	r3, r7, #16
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	701a      	strb	r2, [r3, #0]
      i++;
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	3301      	adds	r3, #1
 80059ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	3301      	adds	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059f6:	8bfb      	ldrh	r3, [r7, #30]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059fc:	8bfb      	ldrh	r3, [r7, #30]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1ea      	bne.n	80059d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	372c      	adds	r7, #44	; 0x2c
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d12c      	bne.n	8005a86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	db12      	blt.n	8005a64 <USB_EPSetStall+0x54>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e02b      	b.n	8005ade <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	db12      	blt.n	8005abe <USB_EPSetStall+0xae>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00f      	beq.n	8005abe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005abc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005adc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d128      	bne.n	8005b5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	791b      	ldrb	r3, [r3, #4]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d003      	beq.n	8005b38 <USB_EPClearStall+0x4c>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	791b      	ldrb	r3, [r3, #4]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d138      	bne.n	8005baa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e027      	b.n	8005baa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d003      	beq.n	8005b8a <USB_EPClearStall+0x9e>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	791b      	ldrb	r3, [r3, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d10f      	bne.n	8005baa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c32:	f023 0302 	bic.w	r3, r3, #2
 8005c36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	b29b      	uxth	r3, r3
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d44:	68bb      	ldr	r3, [r7, #8]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	01db      	lsls	r3, r3, #7
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005da0:	68bb      	ldr	r3, [r7, #8]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0301 	and.w	r3, r3, #1
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005de8:	f023 0307 	bic.w	r3, r3, #7
 8005dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	333c      	adds	r3, #60	; 0x3c
 8005e26:	3304      	adds	r3, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <USB_EP0_OutStart+0xb8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d90a      	bls.n	8005e4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e44:	d101      	bne.n	8005e4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e037      	b.n	8005eba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	461a      	mov	r2, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 0318 	orr.w	r3, r3, #24
 8005e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10f      	bne.n	8005eb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	4f54300a 	.word	0x4f54300a

08005ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <USB_CoreReset+0x64>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e01b      	b.n	8005f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	daf2      	bge.n	8005ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f043 0201 	orr.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <USB_CoreReset+0x64>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e006      	b.n	8005f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d0f0      	beq.n	8005f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	00030d40 	.word	0x00030d40

08005f34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f44:	f002 fc90 	bl	8008868 <USBD_static_malloc>
 8005f48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	32b0      	adds	r2, #176	; 0xb0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f60:	2302      	movs	r3, #2
 8005f62:	e0d4      	b.n	800610e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005f64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f68:	2100      	movs	r1, #0
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f002 fcfa 	bl	8008964 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32b0      	adds	r2, #176	; 0xb0
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	32b0      	adds	r2, #176	; 0xb0
 8005f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	7c1b      	ldrb	r3, [r3, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d138      	bne.n	800600e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f9c:	4b5e      	ldr	r3, [pc, #376]	; (8006118 <USBD_CDC_Init+0x1e4>)
 8005f9e:	7819      	ldrb	r1, [r3, #0]
 8005fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f002 fb3b 	bl	8008622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fac:	4b5a      	ldr	r3, [pc, #360]	; (8006118 <USBD_CDC_Init+0x1e4>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fc6:	4b55      	ldr	r3, [pc, #340]	; (800611c <USBD_CDC_Init+0x1e8>)
 8005fc8:	7819      	ldrb	r1, [r3, #0]
 8005fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fce:	2202      	movs	r2, #2
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f002 fb26 	bl	8008622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fd6:	4b51      	ldr	r3, [pc, #324]	; (800611c <USBD_CDC_Init+0x1e8>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fee:	2201      	movs	r2, #1
 8005ff0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ff2:	4b4b      	ldr	r3, [pc, #300]	; (8006120 <USBD_CDC_Init+0x1ec>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 020f 	and.w	r2, r3, #15
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3326      	adds	r3, #38	; 0x26
 8006008:	2210      	movs	r2, #16
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e035      	b.n	800607a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800600e:	4b42      	ldr	r3, [pc, #264]	; (8006118 <USBD_CDC_Init+0x1e4>)
 8006010:	7819      	ldrb	r1, [r3, #0]
 8006012:	2340      	movs	r3, #64	; 0x40
 8006014:	2202      	movs	r2, #2
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f002 fb03 	bl	8008622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800601c:	4b3e      	ldr	r3, [pc, #248]	; (8006118 <USBD_CDC_Init+0x1e4>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 020f 	and.w	r2, r3, #15
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3324      	adds	r3, #36	; 0x24
 8006032:	2201      	movs	r2, #1
 8006034:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006036:	4b39      	ldr	r3, [pc, #228]	; (800611c <USBD_CDC_Init+0x1e8>)
 8006038:	7819      	ldrb	r1, [r3, #0]
 800603a:	2340      	movs	r3, #64	; 0x40
 800603c:	2202      	movs	r2, #2
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 faef 	bl	8008622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006044:	4b35      	ldr	r3, [pc, #212]	; (800611c <USBD_CDC_Init+0x1e8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f003 020f 	and.w	r2, r3, #15
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800605c:	2201      	movs	r2, #1
 800605e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006060:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <USBD_CDC_Init+0x1ec>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	f003 020f 	and.w	r2, r3, #15
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	3326      	adds	r3, #38	; 0x26
 8006076:	2210      	movs	r2, #16
 8006078:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800607a:	4b29      	ldr	r3, [pc, #164]	; (8006120 <USBD_CDC_Init+0x1ec>)
 800607c:	7819      	ldrb	r1, [r3, #0]
 800607e:	2308      	movs	r3, #8
 8006080:	2203      	movs	r2, #3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f002 facd 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006088:	4b25      	ldr	r3, [pc, #148]	; (8006120 <USBD_CDC_Init+0x1ec>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	3324      	adds	r3, #36	; 0x24
 800609e:	2201      	movs	r2, #1
 80060a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	33b0      	adds	r3, #176	; 0xb0
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80060d8:	2302      	movs	r3, #2
 80060da:	e018      	b.n	800610e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7c1b      	ldrb	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <USBD_CDC_Init+0x1e8>)
 80060e6:	7819      	ldrb	r1, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f002 fb84 	bl	8008800 <USBD_LL_PrepareReceive>
 80060f8:	e008      	b.n	800610c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060fa:	4b08      	ldr	r3, [pc, #32]	; (800611c <USBD_CDC_Init+0x1e8>)
 80060fc:	7819      	ldrb	r1, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 fb7a 	bl	8008800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000093 	.word	0x20000093
 800611c:	20000094 	.word	0x20000094
 8006120:	20000095 	.word	0x20000095

08006124 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006130:	4b3a      	ldr	r3, [pc, #232]	; (800621c <USBD_CDC_DeInit+0xf8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f002 fa99 	bl	800866e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800613c:	4b37      	ldr	r3, [pc, #220]	; (800621c <USBD_CDC_DeInit+0xf8>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 020f 	and.w	r2, r3, #15
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	3324      	adds	r3, #36	; 0x24
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <USBD_CDC_DeInit+0xfc>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f002 fa86 	bl	800866e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006162:	4b2f      	ldr	r3, [pc, #188]	; (8006220 <USBD_CDC_DeInit+0xfc>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800617a:	2200      	movs	r2, #0
 800617c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <USBD_CDC_DeInit+0x100>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f002 fa72 	bl	800866e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800618a:	4b26      	ldr	r3, [pc, #152]	; (8006224 <USBD_CDC_DeInit+0x100>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	f003 020f 	and.w	r2, r3, #15
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	2200      	movs	r2, #0
 80061a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061a4:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <USBD_CDC_DeInit+0x100>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	3326      	adds	r3, #38	; 0x26
 80061ba:	2200      	movs	r2, #0
 80061bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	32b0      	adds	r2, #176	; 0xb0
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01f      	beq.n	8006210 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	33b0      	adds	r3, #176	; 0xb0
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	32b0      	adds	r2, #176	; 0xb0
 80061ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f002 fb46 	bl	8008884 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32b0      	adds	r2, #176	; 0xb0
 8006202:	2100      	movs	r1, #0
 8006204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000093 	.word	0x20000093
 8006220:	20000094 	.word	0x20000094
 8006224:	20000095 	.word	0x20000095

08006228 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	32b0      	adds	r2, #176	; 0xb0
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006254:	2303      	movs	r3, #3
 8006256:	e0bf      	b.n	80063d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006260:	2b00      	cmp	r3, #0
 8006262:	d050      	beq.n	8006306 <USBD_CDC_Setup+0xde>
 8006264:	2b20      	cmp	r3, #32
 8006266:	f040 80af 	bne.w	80063c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	88db      	ldrh	r3, [r3, #6]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d03a      	beq.n	80062e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b25b      	sxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	da1b      	bge.n	80062b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	33b0      	adds	r3, #176	; 0xb0
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006292:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	88d2      	ldrh	r2, [r2, #6]
 8006298:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	88db      	ldrh	r3, [r3, #6]
 800629e:	2b07      	cmp	r3, #7
 80062a0:	bf28      	it	cs
 80062a2:	2307      	movcs	r3, #7
 80062a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	89fa      	ldrh	r2, [r7, #14]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 fd89 	bl	8007dc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80062b2:	e090      	b.n	80063d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	785a      	ldrb	r2, [r3, #1]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	88db      	ldrh	r3, [r3, #6]
 80062c2:	2b3f      	cmp	r3, #63	; 0x3f
 80062c4:	d803      	bhi.n	80062ce <USBD_CDC_Setup+0xa6>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	88db      	ldrh	r3, [r3, #6]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	e000      	b.n	80062d0 <USBD_CDC_Setup+0xa8>
 80062ce:	2240      	movs	r2, #64	; 0x40
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80062d6:	6939      	ldr	r1, [r7, #16]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80062de:	461a      	mov	r2, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fd9b 	bl	8007e1c <USBD_CtlPrepareRx>
      break;
 80062e6:	e076      	b.n	80063d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	33b0      	adds	r3, #176	; 0xb0
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	7850      	ldrb	r0, [r2, #1]
 80062fe:	2200      	movs	r2, #0
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	4798      	blx	r3
      break;
 8006304:	e067      	b.n	80063d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b0b      	cmp	r3, #11
 800630c:	d851      	bhi.n	80063b2 <USBD_CDC_Setup+0x18a>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <USBD_CDC_Setup+0xec>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006345 	.word	0x08006345
 8006318:	080063c1 	.word	0x080063c1
 800631c:	080063b3 	.word	0x080063b3
 8006320:	080063b3 	.word	0x080063b3
 8006324:	080063b3 	.word	0x080063b3
 8006328:	080063b3 	.word	0x080063b3
 800632c:	080063b3 	.word	0x080063b3
 8006330:	080063b3 	.word	0x080063b3
 8006334:	080063b3 	.word	0x080063b3
 8006338:	080063b3 	.word	0x080063b3
 800633c:	0800636f 	.word	0x0800636f
 8006340:	08006399 	.word	0x08006399
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d107      	bne.n	8006360 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006350:	f107 030a 	add.w	r3, r7, #10
 8006354:	2202      	movs	r2, #2
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fd33 	bl	8007dc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800635e:	e032      	b.n	80063c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fcbd 	bl	8007ce2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	75fb      	strb	r3, [r7, #23]
          break;
 800636c:	e02b      	b.n	80063c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d107      	bne.n	800638a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800637a:	f107 030d 	add.w	r3, r7, #13
 800637e:	2201      	movs	r2, #1
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fd1e 	bl	8007dc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006388:	e01d      	b.n	80063c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 fca8 	bl	8007ce2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006392:	2303      	movs	r3, #3
 8006394:	75fb      	strb	r3, [r7, #23]
          break;
 8006396:	e016      	b.n	80063c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d00f      	beq.n	80063c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fc9b 	bl	8007ce2 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ac:	2303      	movs	r3, #3
 80063ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063b0:	e008      	b.n	80063c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fc94 	bl	8007ce2 <USBD_CtlError>
          ret = USBD_FAIL;
 80063ba:	2303      	movs	r3, #3
 80063bc:	75fb      	strb	r3, [r7, #23]
          break;
 80063be:	e002      	b.n	80063c6 <USBD_CDC_Setup+0x19e>
          break;
 80063c0:	bf00      	nop
 80063c2:	e008      	b.n	80063d6 <USBD_CDC_Setup+0x1ae>
          break;
 80063c4:	bf00      	nop
      }
      break;
 80063c6:	e006      	b.n	80063d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fc89 	bl	8007ce2 <USBD_CtlError>
      ret = USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	32b0      	adds	r2, #176	; 0xb0
 80063fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006406:	2303      	movs	r3, #3
 8006408:	e065      	b.n	80064d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	32b0      	adds	r2, #176	; 0xb0
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	3318      	adds	r3, #24
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02f      	beq.n	8006494 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	f003 020f 	and.w	r2, r3, #15
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	3318      	adds	r3, #24
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	f003 010f 	and.w	r1, r3, #15
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	460b      	mov	r3, r1
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	440b      	add	r3, r1
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4403      	add	r3, r0
 800645c:	3348      	adds	r3, #72	; 0x48
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	fbb2 f1f3 	udiv	r1, r2, r3
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800646a:	2b00      	cmp	r3, #0
 800646c:	d112      	bne.n	8006494 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	440b      	add	r3, r1
 8006480:	3318      	adds	r3, #24
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006486:	78f9      	ldrb	r1, [r7, #3]
 8006488:	2300      	movs	r3, #0
 800648a:	2200      	movs	r2, #0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f002 f996 	bl	80087be <USBD_LL_Transmit>
 8006492:	e01f      	b.n	80064d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	33b0      	adds	r3, #176	; 0xb0
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d010      	beq.n	80064d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	33b0      	adds	r3, #176	; 0xb0
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064d0:	78fa      	ldrb	r2, [r7, #3]
 80064d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	32b0      	adds	r2, #176	; 0xb0
 80064f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	32b0      	adds	r2, #176	; 0xb0
 8006504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e01a      	b.n	8006546 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f002 f994 	bl	8008842 <USBD_LL_GetRxDataSize>
 800651a:	4602      	mov	r2, r0
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	33b0      	adds	r3, #176	; 0xb0
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006540:	4611      	mov	r1, r2
 8006542:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	32b0      	adds	r2, #176	; 0xb0
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800656c:	2303      	movs	r3, #3
 800656e:	e025      	b.n	80065bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	33b0      	adds	r3, #176	; 0xb0
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01a      	beq.n	80065ba <USBD_CDC_EP0_RxReady+0x6c>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800658a:	2bff      	cmp	r3, #255	; 0xff
 800658c:	d015      	beq.n	80065ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	33b0      	adds	r3, #176	; 0xb0
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80065a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065ae:	b292      	uxth	r2, r2
 80065b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065cc:	2182      	movs	r1, #130	; 0x82
 80065ce:	4818      	ldr	r0, [pc, #96]	; (8006630 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065d0:	f000 fd4f 	bl	8007072 <USBD_GetEpDesc>
 80065d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065d6:	2101      	movs	r1, #1
 80065d8:	4815      	ldr	r0, [pc, #84]	; (8006630 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065da:	f000 fd4a 	bl	8007072 <USBD_GetEpDesc>
 80065de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065e0:	2181      	movs	r1, #129	; 0x81
 80065e2:	4813      	ldr	r0, [pc, #76]	; (8006630 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065e4:	f000 fd45 	bl	8007072 <USBD_GetEpDesc>
 80065e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2210      	movs	r2, #16
 80065f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2200      	movs	r2, #0
 8006600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006604:	711a      	strb	r2, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d006      	beq.n	800661e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006618:	711a      	strb	r2, [r3, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2243      	movs	r2, #67	; 0x43
 8006622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000050 	.word	0x20000050

08006634 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800663c:	2182      	movs	r1, #130	; 0x82
 800663e:	4818      	ldr	r0, [pc, #96]	; (80066a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006640:	f000 fd17 	bl	8007072 <USBD_GetEpDesc>
 8006644:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006646:	2101      	movs	r1, #1
 8006648:	4815      	ldr	r0, [pc, #84]	; (80066a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800664a:	f000 fd12 	bl	8007072 <USBD_GetEpDesc>
 800664e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006650:	2181      	movs	r1, #129	; 0x81
 8006652:	4813      	ldr	r0, [pc, #76]	; (80066a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006654:	f000 fd0d 	bl	8007072 <USBD_GetEpDesc>
 8006658:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2210      	movs	r2, #16
 8006664:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d006      	beq.n	800667a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2200      	movs	r2, #0
 8006670:	711a      	strb	r2, [r3, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f042 0202 	orr.w	r2, r2, #2
 8006678:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d006      	beq.n	800668e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	711a      	strb	r2, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f042 0202 	orr.w	r2, r2, #2
 800668c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2243      	movs	r2, #67	; 0x43
 8006692:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006694:	4b02      	ldr	r3, [pc, #8]	; (80066a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000050 	.word	0x20000050

080066a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066ac:	2182      	movs	r1, #130	; 0x82
 80066ae:	4818      	ldr	r0, [pc, #96]	; (8006710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066b0:	f000 fcdf 	bl	8007072 <USBD_GetEpDesc>
 80066b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066b6:	2101      	movs	r1, #1
 80066b8:	4815      	ldr	r0, [pc, #84]	; (8006710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066ba:	f000 fcda 	bl	8007072 <USBD_GetEpDesc>
 80066be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066c0:	2181      	movs	r1, #129	; 0x81
 80066c2:	4813      	ldr	r0, [pc, #76]	; (8006710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066c4:	f000 fcd5 	bl	8007072 <USBD_GetEpDesc>
 80066c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2210      	movs	r2, #16
 80066d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d006      	beq.n	80066ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2200      	movs	r2, #0
 80066e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e4:	711a      	strb	r2, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f8:	711a      	strb	r2, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2243      	movs	r2, #67	; 0x43
 8006702:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006704:	4b02      	ldr	r3, [pc, #8]	; (8006710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000050 	.word	0x20000050

08006714 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	220a      	movs	r2, #10
 8006720:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006722:	4b03      	ldr	r3, [pc, #12]	; (8006730 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	2000000c 	.word	0x2000000c

08006734 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006744:	2303      	movs	r3, #3
 8006746:	e009      	b.n	800675c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	33b0      	adds	r3, #176	; 0xb0
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	32b0      	adds	r2, #176	; 0xb0
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800678a:	2303      	movs	r3, #3
 800678c:	e008      	b.n	80067a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	32b0      	adds	r2, #176	; 0xb0
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e004      	b.n	80067da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32b0      	adds	r2, #176	; 0xb0
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32b0      	adds	r2, #176	; 0xb0
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	e025      	b.n	8006866 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11f      	bne.n	8006864 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2201      	movs	r2, #1
 8006828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800682c:	4b10      	ldr	r3, [pc, #64]	; (8006870 <USBD_CDC_TransmitPacket+0x88>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4403      	add	r3, r0
 8006846:	3318      	adds	r3, #24
 8006848:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <USBD_CDC_TransmitPacket+0x88>)
 800684c:	7819      	ldrb	r1, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 ffaf 	bl	80087be <USBD_LL_Transmit>

    ret = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000093 	.word	0x20000093

08006874 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	32b0      	adds	r2, #176	; 0xb0
 8006886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	; 0xb0
 8006896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	e018      	b.n	80068d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7c1b      	ldrb	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068aa:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <USBD_CDC_ReceivePacket+0x68>)
 80068ac:	7819      	ldrb	r1, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 ffa1 	bl	8008800 <USBD_LL_PrepareReceive>
 80068be:	e008      	b.n	80068d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <USBD_CDC_ReceivePacket+0x68>)
 80068c2:	7819      	ldrb	r1, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ca:	2340      	movs	r3, #64	; 0x40
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 ff97 	bl	8008800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000094 	.word	0x20000094

080068e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e01f      	b.n	8006938 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	79fa      	ldrb	r2, [r7, #7]
 800692a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 fe11 	bl	8008554 <USBD_LL_Init>
 8006932:	4603      	mov	r3, r0
 8006934:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006954:	2303      	movs	r3, #3
 8006956:	e025      	b.n	80069a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	32ae      	adds	r2, #174	; 0xae
 800696a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00f      	beq.n	8006994 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	32ae      	adds	r2, #174	; 0xae
 800697e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	f107 020e 	add.w	r2, r7, #14
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fe19 	bl	80085ec <USBD_LL_Start>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d009      	beq.n	8006a08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	4611      	mov	r1, r2
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 f908 	bl	8007c6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d01a      	beq.n	8006ab8 <USBD_LL_SetupStage+0x72>
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d822      	bhi.n	8006acc <USBD_LL_SetupStage+0x86>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <USBD_LL_SetupStage+0x4a>
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d00a      	beq.n	8006aa4 <USBD_LL_SetupStage+0x5e>
 8006a8e:	e01d      	b.n	8006acc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fb5f 	bl	800715c <USBD_StdDevReq>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa2:	e020      	b.n	8006ae6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fbc7 	bl	8007240 <USBD_StdItfReq>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab6:	e016      	b.n	8006ae6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fc29 	bl	8007318 <USBD_StdEPReq>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aca:	e00c      	b.n	8006ae6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ad2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fde6 	bl	80086ac <USBD_LL_StallEP>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae4:	bf00      	nop
  }

  return ret;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	460b      	mov	r3, r1
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d16e      	bne.n	8006be6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	f040 8098 	bne.w	8006c4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d913      	bls.n	8006b50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	bf28      	it	cs
 8006b42:	4613      	movcs	r3, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f001 f984 	bl	8007e56 <USBD_CtlContinueRx>
 8006b4e:	e07d      	b.n	8006c4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d014      	beq.n	8006b88 <USBD_LL_DataOutStage+0x98>
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d81d      	bhi.n	8006b9e <USBD_LL_DataOutStage+0xae>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <USBD_LL_DataOutStage+0x7c>
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d003      	beq.n	8006b72 <USBD_LL_DataOutStage+0x82>
 8006b6a:	e018      	b.n	8006b9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b70:	e018      	b.n	8006ba4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fa5e 	bl	800703e <USBD_CoreFindIF>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]
            break;
 8006b86:	e00d      	b.n	8006ba4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	4619      	mov	r1, r3
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fa60 	bl	8007058 <USBD_CoreFindEP>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b9c:	e002      	b.n	8006ba4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ba2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ba4:	7dbb      	ldrb	r3, [r7, #22]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d119      	bne.n	8006bde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d113      	bne.n	8006bde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006bb6:	7dba      	ldrb	r2, [r7, #22]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	32ae      	adds	r2, #174	; 0xae
 8006bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006bc6:	7dba      	ldrb	r2, [r7, #22]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bce:	7dba      	ldrb	r2, [r7, #22]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	32ae      	adds	r2, #174	; 0xae
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f001 f94a 	bl	8007e78 <USBD_CtlSendStatus>
 8006be4:	e032      	b.n	8006c4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4619      	mov	r1, r3
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fa31 	bl	8007058 <USBD_CoreFindEP>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bfa:	7dbb      	ldrb	r3, [r7, #22]
 8006bfc:	2bff      	cmp	r3, #255	; 0xff
 8006bfe:	d025      	beq.n	8006c4c <USBD_LL_DataOutStage+0x15c>
 8006c00:	7dbb      	ldrb	r3, [r7, #22]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d122      	bne.n	8006c4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d117      	bne.n	8006c42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c12:	7dba      	ldrb	r2, [r7, #22]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	32ae      	adds	r2, #174	; 0xae
 8006c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c22:	7dba      	ldrb	r2, [r7, #22]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c2a:	7dba      	ldrb	r2, [r7, #22]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	32ae      	adds	r2, #174	; 0xae
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	7afa      	ldrb	r2, [r7, #11]
 8006c38:	4611      	mov	r1, r2
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	4798      	blx	r3
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	e000      	b.n	8006c4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d16f      	bne.n	8006d4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3314      	adds	r3, #20
 8006c6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d15a      	bne.n	8006d30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d914      	bls.n	8006cb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f001 f8ac 	bl	8007dfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f001 fda9 	bl	8008800 <USBD_LL_PrepareReceive>
 8006cae:	e03f      	b.n	8006d30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d11c      	bne.n	8006cf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d316      	bcc.n	8006cf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d20f      	bcs.n	8006cf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 f88d 	bl	8007dfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f001 fd86 	bl	8008800 <USBD_LL_PrepareReceive>
 8006cf4:	e01c      	b.n	8006d30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d10f      	bne.n	8006d22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d22:	2180      	movs	r1, #128	; 0x80
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 fcc1 	bl	80086ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f001 f8b7 	bl	8007e9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d03a      	beq.n	8006db0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff fe42 	bl	80069c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d48:	e032      	b.n	8006db0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	4619      	mov	r1, r3
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f97f 	bl	8007058 <USBD_CoreFindEP>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	2bff      	cmp	r3, #255	; 0xff
 8006d62:	d025      	beq.n	8006db0 <USBD_LL_DataInStage+0x15a>
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d122      	bne.n	8006db0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d11c      	bne.n	8006db0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d76:	7dfa      	ldrb	r2, [r7, #23]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	32ae      	adds	r2, #174	; 0xae
 8006d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d014      	beq.n	8006db0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d86:	7dfa      	ldrb	r2, [r7, #23]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d8e:	7dfa      	ldrb	r2, [r7, #23]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	32ae      	adds	r2, #174	; 0xae
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	7afa      	ldrb	r2, [r7, #11]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006da6:	7dbb      	ldrb	r3, [r7, #22]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006dac:	7dbb      	ldrb	r3, [r7, #22]
 8006dae:	e000      	b.n	8006db2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d014      	beq.n	8006e20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00e      	beq.n	8006e20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6852      	ldr	r2, [r2, #4]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	4611      	mov	r1, r2
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e20:	2340      	movs	r3, #64	; 0x40
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fbfb 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2240      	movs	r2, #64	; 0x40
 8006e38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e3c:	2340      	movs	r3, #64	; 0x40
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2180      	movs	r1, #128	; 0x80
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fbed 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2240      	movs	r2, #64	; 0x40
 8006e52:	621a      	str	r2, [r3, #32]

  return ret;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d106      	bne.n	8006ecc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d110      	bne.n	8006f10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	32ae      	adds	r2, #174	; 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e01c      	b.n	8006f76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d115      	bne.n	8006f74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32ae      	adds	r2, #174	; 0xae
 8006f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	32ae      	adds	r2, #174	; 0xae
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32ae      	adds	r2, #174	; 0xae
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e01c      	b.n	8006fda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d115      	bne.n	8006fd8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32ae      	adds	r2, #174	; 0xae
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	; 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	78fa      	ldrb	r2, [r7, #3]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00e      	beq.n	8007034 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6852      	ldr	r2, [r2, #4]
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	4611      	mov	r1, r2
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800704a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007064:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	885b      	ldrh	r3, [r3, #2]
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	429a      	cmp	r2, r3
 8007098:	d920      	bls.n	80070dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070a2:	e013      	b.n	80070cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070a4:	f107 030a 	add.w	r3, r7, #10
 80070a8:	4619      	mov	r1, r3
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f000 f81b 	bl	80070e6 <USBD_GetNextDesc>
 80070b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d108      	bne.n	80070cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	78fa      	ldrb	r2, [r7, #3]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d008      	beq.n	80070da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d8e5      	bhi.n	80070a4 <USBD_GetEpDesc+0x32>
 80070d8:	e000      	b.n	80070dc <USBD_GetEpDesc+0x6a>
          break;
 80070da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070dc:	693b      	ldr	r3, [r7, #16]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4413      	add	r3, r2
 8007100:	b29a      	uxth	r2, r3
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007112:	68fb      	ldr	r3, [r7, #12]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	3301      	adds	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800713e:	8a3b      	ldrh	r3, [r7, #16]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	b21a      	sxth	r2, r3
 8007144:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007148:	4313      	orrs	r3, r2
 800714a:	b21b      	sxth	r3, r3
 800714c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800714e:	89fb      	ldrh	r3, [r7, #14]
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d005      	beq.n	8007182 <USBD_StdDevReq+0x26>
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d857      	bhi.n	800722a <USBD_StdDevReq+0xce>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00f      	beq.n	800719e <USBD_StdDevReq+0x42>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d153      	bne.n	800722a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	32ae      	adds	r2, #174	; 0xae
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
      break;
 800719c:	e04a      	b.n	8007234 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b09      	cmp	r3, #9
 80071a4:	d83b      	bhi.n	800721e <USBD_StdDevReq+0xc2>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_StdDevReq+0x50>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	08007201 	.word	0x08007201
 80071b0:	08007215 	.word	0x08007215
 80071b4:	0800721f 	.word	0x0800721f
 80071b8:	0800720b 	.word	0x0800720b
 80071bc:	0800721f 	.word	0x0800721f
 80071c0:	080071df 	.word	0x080071df
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	0800721f 	.word	0x0800721f
 80071cc:	080071f7 	.word	0x080071f7
 80071d0:	080071e9 	.word	0x080071e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa3c 	bl	8007654 <USBD_GetDescriptor>
          break;
 80071dc:	e024      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fba1 	bl	8007928 <USBD_SetAddress>
          break;
 80071e6:	e01f      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fbe0 	bl	80079b0 <USBD_SetConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
          break;
 80071f4:	e018      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fc83 	bl	8007b04 <USBD_GetConfig>
          break;
 80071fe:	e013      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fcb4 	bl	8007b70 <USBD_GetStatus>
          break;
 8007208:	e00e      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fce3 	bl	8007bd8 <USBD_SetFeature>
          break;
 8007212:	e009      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fd07 	bl	8007c2a <USBD_ClrFeature>
          break;
 800721c:	e004      	b.n	8007228 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fd5e 	bl	8007ce2 <USBD_CtlError>
          break;
 8007226:	bf00      	nop
      }
      break;
 8007228:	e004      	b.n	8007234 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fd58 	bl	8007ce2 <USBD_CtlError>
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d005      	beq.n	8007266 <USBD_StdItfReq+0x26>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d852      	bhi.n	8007304 <USBD_StdItfReq+0xc4>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <USBD_StdItfReq+0x26>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d14e      	bne.n	8007304 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	2b02      	cmp	r3, #2
 8007272:	d840      	bhi.n	80072f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	889b      	ldrh	r3, [r3, #4]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b01      	cmp	r3, #1
 800727c:	d836      	bhi.n	80072ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	889b      	ldrh	r3, [r3, #4]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fed9 	bl	800703e <USBD_CoreFindIF>
 800728c:	4603      	mov	r3, r0
 800728e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d01d      	beq.n	80072d2 <USBD_StdItfReq+0x92>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d11a      	bne.n	80072d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800729c:	7bba      	ldrb	r2, [r7, #14]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	; 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00f      	beq.n	80072cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072ac:	7bba      	ldrb	r2, [r7, #14]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072b4:	7bba      	ldrb	r2, [r7, #14]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32ae      	adds	r2, #174	; 0xae
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072ca:	e004      	b.n	80072d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072d0:	e001      	b.n	80072d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	88db      	ldrh	r3, [r3, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d110      	bne.n	8007300 <USBD_StdItfReq+0xc0>
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10d      	bne.n	8007300 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fdc7 	bl	8007e78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072ea:	e009      	b.n	8007300 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fcf7 	bl	8007ce2 <USBD_CtlError>
          break;
 80072f4:	e004      	b.n	8007300 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fcf2 	bl	8007ce2 <USBD_CtlError>
          break;
 80072fe:	e000      	b.n	8007302 <USBD_StdItfReq+0xc2>
          break;
 8007300:	bf00      	nop
      }
      break;
 8007302:	e004      	b.n	800730e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fceb 	bl	8007ce2 <USBD_CtlError>
      break;
 800730c:	bf00      	nop
  }

  return ret;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	889b      	ldrh	r3, [r3, #4]
 800732a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d007      	beq.n	8007348 <USBD_StdEPReq+0x30>
 8007338:	2b40      	cmp	r3, #64	; 0x40
 800733a:	f200 817f 	bhi.w	800763c <USBD_StdEPReq+0x324>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d02a      	beq.n	8007398 <USBD_StdEPReq+0x80>
 8007342:	2b20      	cmp	r3, #32
 8007344:	f040 817a 	bne.w	800763c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fe83 	bl	8007058 <USBD_CoreFindEP>
 8007352:	4603      	mov	r3, r0
 8007354:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007356:	7b7b      	ldrb	r3, [r7, #13]
 8007358:	2bff      	cmp	r3, #255	; 0xff
 800735a:	f000 8174 	beq.w	8007646 <USBD_StdEPReq+0x32e>
 800735e:	7b7b      	ldrb	r3, [r7, #13]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 8170 	bne.w	8007646 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007366:	7b7a      	ldrb	r2, [r7, #13]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800736e:	7b7a      	ldrb	r2, [r7, #13]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	32ae      	adds	r2, #174	; 0xae
 8007374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8163 	beq.w	8007646 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007380:	7b7a      	ldrb	r2, [r7, #13]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	32ae      	adds	r2, #174	; 0xae
 8007386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007396:	e156      	b.n	8007646 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d008      	beq.n	80073b2 <USBD_StdEPReq+0x9a>
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	f300 8145 	bgt.w	8007630 <USBD_StdEPReq+0x318>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 809b 	beq.w	80074e2 <USBD_StdEPReq+0x1ca>
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d03c      	beq.n	800742a <USBD_StdEPReq+0x112>
 80073b0:	e13e      	b.n	8007630 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d002      	beq.n	80073c4 <USBD_StdEPReq+0xac>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d016      	beq.n	80073f0 <USBD_StdEPReq+0xd8>
 80073c2:	e02c      	b.n	800741e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <USBD_StdEPReq+0xce>
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d00a      	beq.n	80073e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f969 	bl	80086ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073da:	2180      	movs	r1, #128	; 0x80
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f965 	bl	80086ac <USBD_LL_StallEP>
 80073e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e4:	e020      	b.n	8007428 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc7a 	bl	8007ce2 <USBD_CtlError>
              break;
 80073ee:	e01b      	b.n	8007428 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	885b      	ldrh	r3, [r3, #2]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10e      	bne.n	8007416 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <USBD_StdEPReq+0xfe>
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b80      	cmp	r3, #128	; 0x80
 8007402:	d008      	beq.n	8007416 <USBD_StdEPReq+0xfe>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	88db      	ldrh	r3, [r3, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f94b 	bl	80086ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fd2e 	bl	8007e78 <USBD_CtlSendStatus>

              break;
 800741c:	e004      	b.n	8007428 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc5e 	bl	8007ce2 <USBD_CtlError>
              break;
 8007426:	bf00      	nop
          }
          break;
 8007428:	e107      	b.n	800763a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d002      	beq.n	800743c <USBD_StdEPReq+0x124>
 8007436:	2b03      	cmp	r3, #3
 8007438:	d016      	beq.n	8007468 <USBD_StdEPReq+0x150>
 800743a:	e04b      	b.n	80074d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00d      	beq.n	800745e <USBD_StdEPReq+0x146>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b80      	cmp	r3, #128	; 0x80
 8007446:	d00a      	beq.n	800745e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 f92d 	bl	80086ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007452:	2180      	movs	r1, #128	; 0x80
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f929 	bl	80086ac <USBD_LL_StallEP>
 800745a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800745c:	e040      	b.n	80074e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc3e 	bl	8007ce2 <USBD_CtlError>
              break;
 8007466:	e03b      	b.n	80074e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	885b      	ldrh	r3, [r3, #2]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d136      	bne.n	80074de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 f933 	bl	80086ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fcf7 	bl	8007e78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fde2 	bl	8007058 <USBD_CoreFindEP>
 8007494:	4603      	mov	r3, r0
 8007496:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007498:	7b7b      	ldrb	r3, [r7, #13]
 800749a:	2bff      	cmp	r3, #255	; 0xff
 800749c:	d01f      	beq.n	80074de <USBD_StdEPReq+0x1c6>
 800749e:	7b7b      	ldrb	r3, [r7, #13]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11c      	bne.n	80074de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074a4:	7b7a      	ldrb	r2, [r7, #13]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074ac:	7b7a      	ldrb	r2, [r7, #13]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	32ae      	adds	r2, #174	; 0xae
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d010      	beq.n	80074de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074bc:	7b7a      	ldrb	r2, [r7, #13]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	32ae      	adds	r2, #174	; 0xae
 80074c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80074d2:	e004      	b.n	80074de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fc03 	bl	8007ce2 <USBD_CtlError>
              break;
 80074dc:	e000      	b.n	80074e0 <USBD_StdEPReq+0x1c8>
              break;
 80074de:	bf00      	nop
          }
          break;
 80074e0:	e0ab      	b.n	800763a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d002      	beq.n	80074f4 <USBD_StdEPReq+0x1dc>
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d032      	beq.n	8007558 <USBD_StdEPReq+0x240>
 80074f2:	e097      	b.n	8007624 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <USBD_StdEPReq+0x1f2>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b80      	cmp	r3, #128	; 0x80
 80074fe:	d004      	beq.n	800750a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fbed 	bl	8007ce2 <USBD_CtlError>
                break;
 8007508:	e091      	b.n	800762e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800750a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da0b      	bge.n	800752a <USBD_StdEPReq+0x212>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	3310      	adds	r3, #16
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	e00b      	b.n	8007542 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	3304      	adds	r3, #4
 8007542:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2202      	movs	r2, #2
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc37 	bl	8007dc4 <USBD_CtlSendData>
              break;
 8007556:	e06a      	b.n	800762e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da11      	bge.n	8007584 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 020f 	and.w	r2, r3, #15
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3324      	adds	r3, #36	; 0x24
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d117      	bne.n	80075aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fbb0 	bl	8007ce2 <USBD_CtlError>
                  break;
 8007582:	e054      	b.n	800762e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	f003 020f 	and.w	r2, r3, #15
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb9d 	bl	8007ce2 <USBD_CtlError>
                  break;
 80075a8:	e041      	b.n	800762e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da0b      	bge.n	80075ca <USBD_StdEPReq+0x2b2>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	3310      	adds	r3, #16
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	3304      	adds	r3, #4
 80075c8:	e00b      	b.n	80075e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <USBD_StdEPReq+0x2d8>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d103      	bne.n	80075f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e00e      	b.n	8007616 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f893 	bl	8008728 <USBD_LL_IsStallEP>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2202      	movs	r2, #2
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fbd1 	bl	8007dc4 <USBD_CtlSendData>
              break;
 8007622:	e004      	b.n	800762e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb5b 	bl	8007ce2 <USBD_CtlError>
              break;
 800762c:	bf00      	nop
          }
          break;
 800762e:	e004      	b.n	800763a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fb55 	bl	8007ce2 <USBD_CtlError>
          break;
 8007638:	bf00      	nop
      }
      break;
 800763a:	e005      	b.n	8007648 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fb4f 	bl	8007ce2 <USBD_CtlError>
      break;
 8007644:	e000      	b.n	8007648 <USBD_StdEPReq+0x330>
      break;
 8007646:	bf00      	nop
  }

  return ret;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	2b06      	cmp	r3, #6
 8007676:	f200 8128 	bhi.w	80078ca <USBD_GetDescriptor+0x276>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <USBD_GetDescriptor+0x2c>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	0800769d 	.word	0x0800769d
 8007684:	080076b5 	.word	0x080076b5
 8007688:	080076f5 	.word	0x080076f5
 800768c:	080078cb 	.word	0x080078cb
 8007690:	080078cb 	.word	0x080078cb
 8007694:	0800786b 	.word	0x0800786b
 8007698:	08007897 	.word	0x08007897
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	7c12      	ldrb	r2, [r2, #16]
 80076a8:	f107 0108 	add.w	r1, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
      break;
 80076b2:	e112      	b.n	80078da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7c1b      	ldrb	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10d      	bne.n	80076d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	f107 0208 	add.w	r2, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	2202      	movs	r2, #2
 80076d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076d6:	e100      	b.n	80078da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f107 0208 	add.w	r2, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	2202      	movs	r2, #2
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e0f2      	b.n	80078da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	885b      	ldrh	r3, [r3, #2]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b05      	cmp	r3, #5
 80076fc:	f200 80ac 	bhi.w	8007858 <USBD_GetDescriptor+0x204>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_GetDescriptor+0xb4>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	08007721 	.word	0x08007721
 800770c:	08007755 	.word	0x08007755
 8007710:	08007789 	.word	0x08007789
 8007714:	080077bd 	.word	0x080077bd
 8007718:	080077f1 	.word	0x080077f1
 800771c:	08007825 	.word	0x08007825
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e091      	b.n	8007868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 facb 	bl	8007ce2 <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e089      	b.n	8007868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007776:	e077      	b.n	8007868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fab1 	bl	8007ce2 <USBD_CtlError>
            err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
          break;
 8007786:	e06f      	b.n	8007868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077aa:	e05d      	b.n	8007868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa97 	bl	8007ce2 <USBD_CtlError>
            err++;
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	3301      	adds	r3, #1
 80077b8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ba:	e055      	b.n	8007868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	7c12      	ldrb	r2, [r2, #16]
 80077d4:	f107 0108 	add.w	r1, r7, #8
 80077d8:	4610      	mov	r0, r2
 80077da:	4798      	blx	r3
 80077dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077de:	e043      	b.n	8007868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa7d 	bl	8007ce2 <USBD_CtlError>
            err++;
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	3301      	adds	r3, #1
 80077ec:	72fb      	strb	r3, [r7, #11]
          break;
 80077ee:	e03b      	b.n	8007868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	7c12      	ldrb	r2, [r2, #16]
 8007808:	f107 0108 	add.w	r1, r7, #8
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
 8007810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007812:	e029      	b.n	8007868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa63 	bl	8007ce2 <USBD_CtlError>
            err++;
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	3301      	adds	r3, #1
 8007820:	72fb      	strb	r3, [r7, #11]
          break;
 8007822:	e021      	b.n	8007868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	7c12      	ldrb	r2, [r2, #16]
 800783c:	f107 0108 	add.w	r1, r7, #8
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007846:	e00f      	b.n	8007868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa49 	bl	8007ce2 <USBD_CtlError>
            err++;
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	3301      	adds	r3, #1
 8007854:	72fb      	strb	r3, [r7, #11]
          break;
 8007856:	e007      	b.n	8007868 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa41 	bl	8007ce2 <USBD_CtlError>
          err++;
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	3301      	adds	r3, #1
 8007864:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007866:	bf00      	nop
      }
      break;
 8007868:	e037      	b.n	80078da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7c1b      	ldrb	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	f107 0208 	add.w	r2, r7, #8
 800787e:	4610      	mov	r0, r2
 8007880:	4798      	blx	r3
 8007882:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007884:	e029      	b.n	80078da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa2a 	bl	8007ce2 <USBD_CtlError>
        err++;
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	3301      	adds	r3, #1
 8007892:	72fb      	strb	r3, [r7, #11]
      break;
 8007894:	e021      	b.n	80078da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	7c1b      	ldrb	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10d      	bne.n	80078ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f107 0208 	add.w	r2, r7, #8
 80078aa:	4610      	mov	r0, r2
 80078ac:	4798      	blx	r3
 80078ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3301      	adds	r3, #1
 80078b4:	2207      	movs	r2, #7
 80078b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078b8:	e00f      	b.n	80078da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa10 	bl	8007ce2 <USBD_CtlError>
        err++;
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	3301      	adds	r3, #1
 80078c6:	72fb      	strb	r3, [r7, #11]
      break;
 80078c8:	e007      	b.n	80078da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa08 	bl	8007ce2 <USBD_CtlError>
      err++;
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	3301      	adds	r3, #1
 80078d6:	72fb      	strb	r3, [r7, #11]
      break;
 80078d8:	bf00      	nop
  }

  if (err != 0U)
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11e      	bne.n	800791e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	88db      	ldrh	r3, [r3, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d016      	beq.n	8007916 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00e      	beq.n	800790c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88da      	ldrh	r2, [r3, #6]
 80078f2:	893b      	ldrh	r3, [r7, #8]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	bf28      	it	cs
 80078f8:	4613      	movcs	r3, r2
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078fe:	893b      	ldrh	r3, [r7, #8]
 8007900:	461a      	mov	r2, r3
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fa5d 	bl	8007dc4 <USBD_CtlSendData>
 800790a:	e009      	b.n	8007920 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f9e7 	bl	8007ce2 <USBD_CtlError>
 8007914:	e004      	b.n	8007920 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 faae 	bl	8007e78 <USBD_CtlSendStatus>
 800791c:	e000      	b.n	8007920 <USBD_GetDescriptor+0x2cc>
    return;
 800791e:	bf00      	nop
  }
}
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	889b      	ldrh	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d131      	bne.n	800799e <USBD_SetAddress+0x76>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d12d      	bne.n	800799e <USBD_SetAddress+0x76>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	885b      	ldrh	r3, [r3, #2]
 8007946:	2b7f      	cmp	r3, #127	; 0x7f
 8007948:	d829      	bhi.n	800799e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b03      	cmp	r3, #3
 8007960:	d104      	bne.n	800796c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9bc 	bl	8007ce2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796a:	e01d      	b.n	80079a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7bfa      	ldrb	r2, [r7, #15]
 8007970:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ff01 	bl	8008780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa7a 	bl	8007e78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007992:	e009      	b.n	80079a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799c:	e004      	b.n	80079a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f99e 	bl	8007ce2 <USBD_CtlError>
  }
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	4b4e      	ldr	r3, [pc, #312]	; (8007b00 <USBD_SetConfig+0x150>)
 80079c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079c8:	4b4d      	ldr	r3, [pc, #308]	; (8007b00 <USBD_SetConfig+0x150>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d905      	bls.n	80079dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f985 	bl	8007ce2 <USBD_CtlError>
    return USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	e08c      	b.n	8007af6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d002      	beq.n	80079ee <USBD_SetConfig+0x3e>
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d029      	beq.n	8007a40 <USBD_SetConfig+0x90>
 80079ec:	e075      	b.n	8007ada <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079ee:	4b44      	ldr	r3, [pc, #272]	; (8007b00 <USBD_SetConfig+0x150>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d020      	beq.n	8007a38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079f6:	4b42      	ldr	r3, [pc, #264]	; (8007b00 <USBD_SetConfig+0x150>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a00:	4b3f      	ldr	r3, [pc, #252]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fe ffe7 	bl	80069da <USBD_SetClassConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f962 	bl	8007ce2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a26:	e065      	b.n	8007af4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa25 	bl	8007e78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2203      	movs	r2, #3
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a36:	e05d      	b.n	8007af4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa1d 	bl	8007e78 <USBD_CtlSendStatus>
      break;
 8007a3e:	e059      	b.n	8007af4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a40:	4b2f      	ldr	r3, [pc, #188]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d112      	bne.n	8007a6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a50:	4b2b      	ldr	r3, [pc, #172]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a5a:	4b29      	ldr	r3, [pc, #164]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7fe ffd6 	bl	8006a12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa06 	bl	8007e78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a6c:	e042      	b.n	8007af4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d02a      	beq.n	8007ad2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fe ffc4 	bl	8006a12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <USBD_SetConfig+0x150>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fe ff9d 	bl	80069da <USBD_SetClassConfig>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f918 	bl	8007ce2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fe ffa9 	bl	8006a12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ac8:	e014      	b.n	8007af4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f9d4 	bl	8007e78 <USBD_CtlSendStatus>
      break;
 8007ad0:	e010      	b.n	8007af4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9d0 	bl	8007e78 <USBD_CtlSendStatus>
      break;
 8007ad8:	e00c      	b.n	8007af4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f900 	bl	8007ce2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ae2:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <USBD_SetConfig+0x150>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fe ff92 	bl	8006a12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007aee:	2303      	movs	r3, #3
 8007af0:	73fb      	strb	r3, [r7, #15]
      break;
 8007af2:	bf00      	nop
  }

  return ret;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	200002cc 	.word	0x200002cc

08007b04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	88db      	ldrh	r3, [r3, #6]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d004      	beq.n	8007b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f8e2 	bl	8007ce2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b1e:	e023      	b.n	8007b68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	dc02      	bgt.n	8007b32 <USBD_GetConfig+0x2e>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dc03      	bgt.n	8007b38 <USBD_GetConfig+0x34>
 8007b30:	e015      	b.n	8007b5e <USBD_GetConfig+0x5a>
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d00b      	beq.n	8007b4e <USBD_GetConfig+0x4a>
 8007b36:	e012      	b.n	8007b5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3308      	adds	r3, #8
 8007b42:	2201      	movs	r2, #1
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f93c 	bl	8007dc4 <USBD_CtlSendData>
        break;
 8007b4c:	e00c      	b.n	8007b68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3304      	adds	r3, #4
 8007b52:	2201      	movs	r2, #1
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f934 	bl	8007dc4 <USBD_CtlSendData>
        break;
 8007b5c:	e004      	b.n	8007b68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8be 	bl	8007ce2 <USBD_CtlError>
        break;
 8007b66:	bf00      	nop
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d81e      	bhi.n	8007bc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	88db      	ldrh	r3, [r3, #6]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d004      	beq.n	8007b9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8a5 	bl	8007ce2 <USBD_CtlError>
        break;
 8007b98:	e01a      	b.n	8007bd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f043 0202 	orr.w	r2, r3, #2
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	330c      	adds	r3, #12
 8007bba:	2202      	movs	r2, #2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f900 	bl	8007dc4 <USBD_CtlSendData>
      break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f88a 	bl	8007ce2 <USBD_CtlError>
      break;
 8007bce:	bf00      	nop
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	885b      	ldrh	r3, [r3, #2]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d107      	bne.n	8007bfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f940 	bl	8007e78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bf8:	e013      	b.n	8007c22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d10b      	bne.n	8007c1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	889b      	ldrh	r3, [r3, #4]
 8007c06:	0a1b      	lsrs	r3, r3, #8
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f930 	bl	8007e78 <USBD_CtlSendStatus>
}
 8007c18:	e003      	b.n	8007c22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f860 	bl	8007ce2 <USBD_CtlError>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d80b      	bhi.n	8007c5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10c      	bne.n	8007c64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f910 	bl	8007e78 <USBD_CtlSendStatus>
      }
      break;
 8007c58:	e004      	b.n	8007c64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f840 	bl	8007ce2 <USBD_CtlError>
      break;
 8007c62:	e000      	b.n	8007c66 <USBD_ClrFeature+0x3c>
      break;
 8007c64:	bf00      	nop
  }
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3301      	adds	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f7ff fa41 	bl	8007120 <SWAPBYTE>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fa34 	bl	8007120 <SWAPBYTE>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff fa27 	bl	8007120 <SWAPBYTE>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	80da      	strh	r2, [r3, #6]
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fcdc 	bl	80086ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fcd8 	bl	80086ac <USBD_LL_StallEP>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d036      	beq.n	8007d88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d1e:	6938      	ldr	r0, [r7, #16]
 8007d20:	f000 f836 	bl	8007d90 <USBD_GetLen>
 8007d24:	4603      	mov	r3, r0
 8007d26:	3301      	adds	r3, #1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	4413      	add	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	3301      	adds	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	4413      	add	r3, r2
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	3301      	adds	r3, #1
 8007d52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d54:	e013      	b.n	8007d7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3301      	adds	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
    idx++;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	4413      	add	r3, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e7      	bne.n	8007d56 <USBD_GetString+0x52>
 8007d86:	e000      	b.n	8007d8a <USBD_GetString+0x86>
    return;
 8007d88:	bf00      	nop
  }
}
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007da0:	e005      	b.n	8007dae <USBD_GetLen+0x1e>
  {
    len++;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	3301      	adds	r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f5      	bne.n	8007da2 <USBD_GetLen+0x12>
  }

  return len;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	2100      	movs	r1, #0
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fce7 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fcd6 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fcda 	bl	8008800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fcc9 	bl	8008800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2204      	movs	r2, #4
 8007e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc95 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fca3 	bl	8008800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4912      	ldr	r1, [pc, #72]	; (8007f14 <MX_USB_DEVICE_Init+0x50>)
 8007ecc:	4812      	ldr	r0, [pc, #72]	; (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007ece:	f7fe fd07 	bl	80068e0 <USBD_Init>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ed8:	f7f8 fec4 	bl	8000c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007edc:	490f      	ldr	r1, [pc, #60]	; (8007f1c <MX_USB_DEVICE_Init+0x58>)
 8007ede:	480e      	ldr	r0, [pc, #56]	; (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007ee0:	f7fe fd2e 	bl	8006940 <USBD_RegisterClass>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eea:	f7f8 febb 	bl	8000c64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007eee:	490c      	ldr	r1, [pc, #48]	; (8007f20 <MX_USB_DEVICE_Init+0x5c>)
 8007ef0:	4809      	ldr	r0, [pc, #36]	; (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007ef2:	f7fe fc1f 	bl	8006734 <USBD_CDC_RegisterInterface>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007efc:	f7f8 feb2 	bl	8000c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f00:	4805      	ldr	r0, [pc, #20]	; (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007f02:	f7fe fd53 	bl	80069ac <USBD_Start>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f0c:	f7f8 feaa 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200000ac 	.word	0x200000ac
 8007f18:	200002d0 	.word	0x200002d0
 8007f1c:	20000018 	.word	0x20000018
 8007f20:	20000098 	.word	0x20000098

08007f24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4905      	ldr	r1, [pc, #20]	; (8007f40 <CDC_Init_FS+0x1c>)
 8007f2c:	4805      	ldr	r0, [pc, #20]	; (8007f44 <CDC_Init_FS+0x20>)
 8007f2e:	f7fe fc1b 	bl	8006768 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f32:	4905      	ldr	r1, [pc, #20]	; (8007f48 <CDC_Init_FS+0x24>)
 8007f34:	4803      	ldr	r0, [pc, #12]	; (8007f44 <CDC_Init_FS+0x20>)
 8007f36:	f7fe fc39 	bl	80067ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000dac 	.word	0x20000dac
 8007f44:	200002d0 	.word	0x200002d0
 8007f48:	200005ac 	.word	0x200005ac

08007f4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	6039      	str	r1, [r7, #0]
 8007f66:	71fb      	strb	r3, [r7, #7]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b23      	cmp	r3, #35	; 0x23
 8007f70:	d84a      	bhi.n	8008008 <CDC_Control_FS+0xac>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <CDC_Control_FS+0x1c>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08008009 	.word	0x08008009
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	08008009 	.word	0x08008009
 8007f84:	08008009 	.word	0x08008009
 8007f88:	08008009 	.word	0x08008009
 8007f8c:	08008009 	.word	0x08008009
 8007f90:	08008009 	.word	0x08008009
 8007f94:	08008009 	.word	0x08008009
 8007f98:	08008009 	.word	0x08008009
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	08008009 	.word	0x08008009
 8007fac:	08008009 	.word	0x08008009
 8007fb0:	08008009 	.word	0x08008009
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	08008009 	.word	0x08008009
 8007fc0:	08008009 	.word	0x08008009
 8007fc4:	08008009 	.word	0x08008009
 8007fc8:	08008009 	.word	0x08008009
 8007fcc:	08008009 	.word	0x08008009
 8007fd0:	08008009 	.word	0x08008009
 8007fd4:	08008009 	.word	0x08008009
 8007fd8:	08008009 	.word	0x08008009
 8007fdc:	08008009 	.word	0x08008009
 8007fe0:	08008009 	.word	0x08008009
 8007fe4:	08008009 	.word	0x08008009
 8007fe8:	08008009 	.word	0x08008009
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	08008009 	.word	0x08008009
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008009 	.word	0x08008009
 8008000:	08008009 	.word	0x08008009
 8008004:	08008009 	.word	0x08008009
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008008:	bf00      	nop
  }

  return (USBD_OK);
 800800a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	4808      	ldr	r0, [pc, #32]	; (8008048 <CDC_Receive_FS+0x30>)
 8008026:	f7fe fbc1 	bl	80067ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800802a:	4807      	ldr	r0, [pc, #28]	; (8008048 <CDC_Receive_FS+0x30>)
 800802c:	f7fe fc22 	bl	8006874 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f8 fd98 	bl	8000b6c <CDC_ReceiveCallBack>
  return (USBD_OK);
 800803c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200002d0 	.word	0x200002d0

0800804c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <CDC_Transmit_FS+0x48>)
 800805e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008062:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800806e:	2301      	movs	r3, #1
 8008070:	e00b      	b.n	800808a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008072:	887b      	ldrh	r3, [r7, #2]
 8008074:	461a      	mov	r2, r3
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4806      	ldr	r0, [pc, #24]	; (8008094 <CDC_Transmit_FS+0x48>)
 800807a:	f7fe fb75 	bl	8006768 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800807e:	4805      	ldr	r0, [pc, #20]	; (8008094 <CDC_Transmit_FS+0x48>)
 8008080:	f7fe fbb2 	bl	80067e8 <USBD_CDC_TransmitPacket>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200002d0 	.word	0x200002d0

08008098 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	4613      	mov	r3, r2
 80080a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
	...

080080bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	6039      	str	r1, [r7, #0]
 80080c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2212      	movs	r2, #18
 80080cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080ce:	4b03      	ldr	r3, [pc, #12]	; (80080dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	200000c8 	.word	0x200000c8

080080e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2204      	movs	r2, #4
 80080f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080f2:	4b03      	ldr	r3, [pc, #12]	; (8008100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	200000dc 	.word	0x200000dc

08008104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4907      	ldr	r1, [pc, #28]	; (8008138 <USBD_FS_ProductStrDescriptor+0x34>)
 800811a:	4808      	ldr	r0, [pc, #32]	; (800813c <USBD_FS_ProductStrDescriptor+0x38>)
 800811c:	f7ff fdf2 	bl	8007d04 <USBD_GetString>
 8008120:	e004      	b.n	800812c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <USBD_FS_ProductStrDescriptor+0x34>)
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <USBD_FS_ProductStrDescriptor+0x38>)
 8008128:	f7ff fdec 	bl	8007d04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200015ac 	.word	0x200015ac
 800813c:	08008b88 	.word	0x08008b88

08008140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	4904      	ldr	r1, [pc, #16]	; (8008160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008150:	4804      	ldr	r0, [pc, #16]	; (8008164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008152:	f7ff fdd7 	bl	8007d04 <USBD_GetString>
  return USBD_StrDesc;
 8008156:	4b02      	ldr	r3, [pc, #8]	; (8008160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200015ac 	.word	0x200015ac
 8008164:	08008ba0 	.word	0x08008ba0

08008168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	221a      	movs	r2, #26
 8008178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800817a:	f000 f843 	bl	8008204 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800817e:	4b02      	ldr	r3, [pc, #8]	; (8008188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	200000e0 	.word	0x200000e0

0800818c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4907      	ldr	r1, [pc, #28]	; (80081c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081a2:	4808      	ldr	r0, [pc, #32]	; (80081c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a4:	f7ff fdae 	bl	8007d04 <USBD_GetString>
 80081a8:	e004      	b.n	80081b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4904      	ldr	r1, [pc, #16]	; (80081c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ae:	4805      	ldr	r0, [pc, #20]	; (80081c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b0:	f7ff fda8 	bl	8007d04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200015ac 	.word	0x200015ac
 80081c4:	08008bb4 	.word	0x08008bb4

080081c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4907      	ldr	r1, [pc, #28]	; (80081fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081de:	4808      	ldr	r0, [pc, #32]	; (8008200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e0:	f7ff fd90 	bl	8007d04 <USBD_GetString>
 80081e4:	e004      	b.n	80081f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4904      	ldr	r1, [pc, #16]	; (80081fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ea:	4805      	ldr	r0, [pc, #20]	; (8008200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081ec:	f7ff fd8a 	bl	8007d04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f0:	4b02      	ldr	r3, [pc, #8]	; (80081fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200015ac 	.word	0x200015ac
 8008200:	08008bc0 	.word	0x08008bc0

08008204 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800820a:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <Get_SerialNum+0x44>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008210:	4b0e      	ldr	r3, [pc, #56]	; (800824c <Get_SerialNum+0x48>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008216:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <Get_SerialNum+0x4c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800822a:	2208      	movs	r2, #8
 800822c:	4909      	ldr	r1, [pc, #36]	; (8008254 <Get_SerialNum+0x50>)
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f814 	bl	800825c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008234:	2204      	movs	r2, #4
 8008236:	4908      	ldr	r1, [pc, #32]	; (8008258 <Get_SerialNum+0x54>)
 8008238:	68b8      	ldr	r0, [r7, #8]
 800823a:	f000 f80f 	bl	800825c <IntToUnicode>
  }
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	1fff7a10 	.word	0x1fff7a10
 800824c:	1fff7a14 	.word	0x1fff7a14
 8008250:	1fff7a18 	.word	0x1fff7a18
 8008254:	200000e2 	.word	0x200000e2
 8008258:	200000f2 	.word	0x200000f2

0800825c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]
 8008272:	e027      	b.n	80082c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	0f1b      	lsrs	r3, r3, #28
 8008278:	2b09      	cmp	r3, #9
 800827a:	d80b      	bhi.n	8008294 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	0f1b      	lsrs	r3, r3, #28
 8008280:	b2da      	uxtb	r2, r3
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4619      	mov	r1, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	440b      	add	r3, r1
 800828c:	3230      	adds	r2, #48	; 0x30
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e00a      	b.n	80082aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	0f1b      	lsrs	r3, r3, #28
 8008298:	b2da      	uxtb	r2, r3
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	4619      	mov	r1, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	440b      	add	r3, r1
 80082a4:	3237      	adds	r2, #55	; 0x37
 80082a6:	b2d2      	uxtb	r2, r2
 80082a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	3301      	adds	r3, #1
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4413      	add	r3, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	3301      	adds	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
 80082c4:	7dfa      	ldrb	r2, [r7, #23]
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3d3      	bcc.n	8008274 <IntToUnicode+0x18>
  }
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
	...

080082dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	; 0x28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	609a      	str	r2, [r3, #8]
 80082f0:	60da      	str	r2, [r3, #12]
 80082f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082fc:	d13a      	bne.n	8008374 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082fe:	2300      	movs	r3, #0
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	4b1e      	ldr	r3, [pc, #120]	; (800837c <HAL_PCD_MspInit+0xa0>)
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	4a1d      	ldr	r2, [pc, #116]	; (800837c <HAL_PCD_MspInit+0xa0>)
 8008308:	f043 0301 	orr.w	r3, r3, #1
 800830c:	6313      	str	r3, [r2, #48]	; 0x30
 800830e:	4b1b      	ldr	r3, [pc, #108]	; (800837c <HAL_PCD_MspInit+0xa0>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800831a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800831e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008320:	2302      	movs	r3, #2
 8008322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008328:	2303      	movs	r3, #3
 800832a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800832c:	230a      	movs	r3, #10
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4619      	mov	r1, r3
 8008336:	4812      	ldr	r0, [pc, #72]	; (8008380 <HAL_PCD_MspInit+0xa4>)
 8008338:	f7f9 fa4c 	bl	80017d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800833c:	4b0f      	ldr	r3, [pc, #60]	; (800837c <HAL_PCD_MspInit+0xa0>)
 800833e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <HAL_PCD_MspInit+0xa0>)
 8008342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008346:	6353      	str	r3, [r2, #52]	; 0x34
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	4b0b      	ldr	r3, [pc, #44]	; (800837c <HAL_PCD_MspInit+0xa0>)
 800834e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008350:	4a0a      	ldr	r2, [pc, #40]	; (800837c <HAL_PCD_MspInit+0xa0>)
 8008352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008356:	6453      	str	r3, [r2, #68]	; 0x44
 8008358:	4b08      	ldr	r3, [pc, #32]	; (800837c <HAL_PCD_MspInit+0xa0>)
 800835a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008364:	2200      	movs	r2, #0
 8008366:	2100      	movs	r1, #0
 8008368:	2043      	movs	r0, #67	; 0x43
 800836a:	f7f9 f9fc 	bl	8001766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800836e:	2043      	movs	r0, #67	; 0x43
 8008370:	f7f9 fa15 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008374:	bf00      	nop
 8008376:	3728      	adds	r7, #40	; 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40023800 	.word	0x40023800
 8008380:	40020000 	.word	0x40020000

08008384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008398:	4619      	mov	r1, r3
 800839a:	4610      	mov	r0, r2
 800839c:	f7fe fb53 	bl	8006a46 <USBD_LL_SetupStage>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80083ba:	78fa      	ldrb	r2, [r7, #3]
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	4613      	mov	r3, r2
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	4619      	mov	r1, r3
 80083d2:	f7fe fb8d 	bl	8006af0 <USBD_LL_DataOutStage>
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	4613      	mov	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	334c      	adds	r3, #76	; 0x4c
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	4619      	mov	r1, r3
 8008406:	f7fe fc26 	bl	8006c56 <USBD_LL_DataInStage>
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fd5a 	bl	8006eda <USBD_LL_SOF>
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d001      	beq.n	8008446 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008442:	f7f8 fc0f 	bl	8000c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800844c:	7bfa      	ldrb	r2, [r7, #15]
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fd04 	bl	8006e5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fcac 	bl	8006dba <USBD_LL_Reset>
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fcff 	bl	8006e7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6812      	ldr	r2, [r2, #0]
 800848e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <HAL_PCD_SuspendCallback+0x48>)
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <HAL_PCD_SuspendCallback+0x48>)
 80084a6:	f043 0306 	orr.w	r3, r3, #6
 80084aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe fcef 	bl	8006eaa <USBD_LL_Resume>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fd47 	bl	8006f7e <USBD_LL_IsoOUTIncomplete>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fd03 	bl	8006f1a <USBD_LL_IsoINIncomplete>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fd59 	bl	8006fe2 <USBD_LL_DevConnected>
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fd56 	bl	8006ff8 <USBD_LL_DevDisconnected>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d13c      	bne.n	80085de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008564:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <USBD_LL_Init+0x94>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <USBD_LL_Init+0x94>)
 8008570:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008574:	4b1c      	ldr	r3, [pc, #112]	; (80085e8 <USBD_LL_Init+0x94>)
 8008576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800857a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800857c:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <USBD_LL_Init+0x94>)
 800857e:	2204      	movs	r2, #4
 8008580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008582:	4b19      	ldr	r3, [pc, #100]	; (80085e8 <USBD_LL_Init+0x94>)
 8008584:	2202      	movs	r2, #2
 8008586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008588:	4b17      	ldr	r3, [pc, #92]	; (80085e8 <USBD_LL_Init+0x94>)
 800858a:	2200      	movs	r2, #0
 800858c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800858e:	4b16      	ldr	r3, [pc, #88]	; (80085e8 <USBD_LL_Init+0x94>)
 8008590:	2202      	movs	r2, #2
 8008592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008594:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <USBD_LL_Init+0x94>)
 8008596:	2200      	movs	r2, #0
 8008598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <USBD_LL_Init+0x94>)
 800859c:	2200      	movs	r2, #0
 800859e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <USBD_LL_Init+0x94>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <USBD_LL_Init+0x94>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80085ac:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <USBD_LL_Init+0x94>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80085b2:	480d      	ldr	r0, [pc, #52]	; (80085e8 <USBD_LL_Init+0x94>)
 80085b4:	f7f9 faab 	bl	8001b0e <HAL_PCD_Init>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80085be:	f7f8 fb51 	bl	8000c64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80085c2:	2180      	movs	r1, #128	; 0x80
 80085c4:	4808      	ldr	r0, [pc, #32]	; (80085e8 <USBD_LL_Init+0x94>)
 80085c6:	f7fa fd02 	bl	8002fce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80085ca:	2240      	movs	r2, #64	; 0x40
 80085cc:	2100      	movs	r1, #0
 80085ce:	4806      	ldr	r0, [pc, #24]	; (80085e8 <USBD_LL_Init+0x94>)
 80085d0:	f7fa fcb6 	bl	8002f40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80085d4:	2280      	movs	r2, #128	; 0x80
 80085d6:	2101      	movs	r1, #1
 80085d8:	4803      	ldr	r0, [pc, #12]	; (80085e8 <USBD_LL_Init+0x94>)
 80085da:	f7fa fcb1 	bl	8002f40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	200017ac 	.word	0x200017ac

080085ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008602:	4618      	mov	r0, r3
 8008604:	f7f9 fba0 	bl	8001d48 <HAL_PCD_Start>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f942 	bl	8008898 <USBD_Get_USB_Status>
 8008614:	4603      	mov	r3, r0
 8008616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008618:	7bbb      	ldrb	r3, [r7, #14]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	4603      	mov	r3, r0
 8008632:	70fb      	strb	r3, [r7, #3]
 8008634:	460b      	mov	r3, r1
 8008636:	70bb      	strb	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800864a:	78bb      	ldrb	r3, [r7, #2]
 800864c:	883a      	ldrh	r2, [r7, #0]
 800864e:	78f9      	ldrb	r1, [r7, #3]
 8008650:	f7fa f871 	bl	8002736 <HAL_PCD_EP_Open>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f91c 	bl	8008898 <USBD_Get_USB_Status>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7fa f8ba 	bl	8002806 <HAL_PCD_EP_Close>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f8fd 	bl	8008898 <USBD_Get_USB_Status>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fa f992 	bl	80029f4 <HAL_PCD_EP_SetStall>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f8de 	bl	8008898 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7fa f9d7 	bl	8002abc <HAL_PCD_EP_ClrStall>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f8bf 	bl	8008898 <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800873a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800873c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0b      	bge.n	800875c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	4613      	mov	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	333e      	adds	r3, #62	; 0x3e
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	e00b      	b.n	8008774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	4613      	mov	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008772:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f9 ffa4 	bl	80026ec <HAL_PCD_SetAddress>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f874 	bl	8008898 <USBD_Get_USB_Status>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	460b      	mov	r3, r1
 80087cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087dc:	7af9      	ldrb	r1, [r7, #11]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	f7fa f8bd 	bl	8002960 <HAL_PCD_EP_Transmit>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f853 	bl	8008898 <USBD_Get_USB_Status>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	460b      	mov	r3, r1
 800880e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800881e:	7af9      	ldrb	r1, [r7, #11]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f7fa f839 	bl	800289a <HAL_PCD_EP_Receive>
 8008828:	4603      	mov	r3, r0
 800882a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f832 	bl	8008898 <USBD_Get_USB_Status>
 8008834:	4603      	mov	r3, r0
 8008836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008838:	7dbb      	ldrb	r3, [r7, #22]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f7fa f869 	bl	8002930 <HAL_PCD_EP_GetRxCount>
 800885e:	4603      	mov	r3, r0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008870:	4b03      	ldr	r3, [pc, #12]	; (8008880 <USBD_static_malloc+0x18>)
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20001cb8 	.word	0x20001cb8

08008884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d817      	bhi.n	80088dc <USBD_Get_USB_Status+0x44>
 80088ac:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <USBD_Get_USB_Status+0x1c>)
 80088ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b2:	bf00      	nop
 80088b4:	080088c5 	.word	0x080088c5
 80088b8:	080088cb 	.word	0x080088cb
 80088bc:	080088d1 	.word	0x080088d1
 80088c0:	080088d7 	.word	0x080088d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
    break;
 80088c8:	e00b      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088ca:	2303      	movs	r3, #3
 80088cc:	73fb      	strb	r3, [r7, #15]
    break;
 80088ce:	e008      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
    break;
 80088d4:	e005      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
    break;
 80088da:	e002      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	bf00      	nop
  }
  return usb_status;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <__errno>:
 80088f0:	4b01      	ldr	r3, [pc, #4]	; (80088f8 <__errno+0x8>)
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	200000fc 	.word	0x200000fc

080088fc <__libc_init_array>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	4d0d      	ldr	r5, [pc, #52]	; (8008934 <__libc_init_array+0x38>)
 8008900:	4c0d      	ldr	r4, [pc, #52]	; (8008938 <__libc_init_array+0x3c>)
 8008902:	1b64      	subs	r4, r4, r5
 8008904:	10a4      	asrs	r4, r4, #2
 8008906:	2600      	movs	r6, #0
 8008908:	42a6      	cmp	r6, r4
 800890a:	d109      	bne.n	8008920 <__libc_init_array+0x24>
 800890c:	4d0b      	ldr	r5, [pc, #44]	; (800893c <__libc_init_array+0x40>)
 800890e:	4c0c      	ldr	r4, [pc, #48]	; (8008940 <__libc_init_array+0x44>)
 8008910:	f000 f92e 	bl	8008b70 <_init>
 8008914:	1b64      	subs	r4, r4, r5
 8008916:	10a4      	asrs	r4, r4, #2
 8008918:	2600      	movs	r6, #0
 800891a:	42a6      	cmp	r6, r4
 800891c:	d105      	bne.n	800892a <__libc_init_array+0x2e>
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	f855 3b04 	ldr.w	r3, [r5], #4
 8008924:	4798      	blx	r3
 8008926:	3601      	adds	r6, #1
 8008928:	e7ee      	b.n	8008908 <__libc_init_array+0xc>
 800892a:	f855 3b04 	ldr.w	r3, [r5], #4
 800892e:	4798      	blx	r3
 8008930:	3601      	adds	r6, #1
 8008932:	e7f2      	b.n	800891a <__libc_init_array+0x1e>
 8008934:	08008be8 	.word	0x08008be8
 8008938:	08008be8 	.word	0x08008be8
 800893c:	08008be8 	.word	0x08008be8
 8008940:	08008bec 	.word	0x08008bec

08008944 <malloc>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <malloc+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f000 b87f 	b.w	8008a4c <_malloc_r>
 800894e:	bf00      	nop
 8008950:	200000fc 	.word	0x200000fc

08008954 <free>:
 8008954:	4b02      	ldr	r3, [pc, #8]	; (8008960 <free+0xc>)
 8008956:	4601      	mov	r1, r0
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	f000 b80b 	b.w	8008974 <_free_r>
 800895e:	bf00      	nop
 8008960:	200000fc 	.word	0x200000fc

08008964 <memset>:
 8008964:	4402      	add	r2, r0
 8008966:	4603      	mov	r3, r0
 8008968:	4293      	cmp	r3, r2
 800896a:	d100      	bne.n	800896e <memset+0xa>
 800896c:	4770      	bx	lr
 800896e:	f803 1b01 	strb.w	r1, [r3], #1
 8008972:	e7f9      	b.n	8008968 <memset+0x4>

08008974 <_free_r>:
 8008974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008976:	2900      	cmp	r1, #0
 8008978:	d044      	beq.n	8008a04 <_free_r+0x90>
 800897a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897e:	9001      	str	r0, [sp, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f1a1 0404 	sub.w	r4, r1, #4
 8008986:	bfb8      	it	lt
 8008988:	18e4      	addlt	r4, r4, r3
 800898a:	f000 f8e3 	bl	8008b54 <__malloc_lock>
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <_free_r+0x94>)
 8008990:	9801      	ldr	r0, [sp, #4]
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	b933      	cbnz	r3, 80089a4 <_free_r+0x30>
 8008996:	6063      	str	r3, [r4, #4]
 8008998:	6014      	str	r4, [r2, #0]
 800899a:	b003      	add	sp, #12
 800899c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089a0:	f000 b8de 	b.w	8008b60 <__malloc_unlock>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d908      	bls.n	80089ba <_free_r+0x46>
 80089a8:	6825      	ldr	r5, [r4, #0]
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	428b      	cmp	r3, r1
 80089ae:	bf01      	itttt	eq
 80089b0:	6819      	ldreq	r1, [r3, #0]
 80089b2:	685b      	ldreq	r3, [r3, #4]
 80089b4:	1949      	addeq	r1, r1, r5
 80089b6:	6021      	streq	r1, [r4, #0]
 80089b8:	e7ed      	b.n	8008996 <_free_r+0x22>
 80089ba:	461a      	mov	r2, r3
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	b10b      	cbz	r3, 80089c4 <_free_r+0x50>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d9fa      	bls.n	80089ba <_free_r+0x46>
 80089c4:	6811      	ldr	r1, [r2, #0]
 80089c6:	1855      	adds	r5, r2, r1
 80089c8:	42a5      	cmp	r5, r4
 80089ca:	d10b      	bne.n	80089e4 <_free_r+0x70>
 80089cc:	6824      	ldr	r4, [r4, #0]
 80089ce:	4421      	add	r1, r4
 80089d0:	1854      	adds	r4, r2, r1
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	d1e0      	bne.n	800899a <_free_r+0x26>
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	6053      	str	r3, [r2, #4]
 80089de:	4421      	add	r1, r4
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	e7da      	b.n	800899a <_free_r+0x26>
 80089e4:	d902      	bls.n	80089ec <_free_r+0x78>
 80089e6:	230c      	movs	r3, #12
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	e7d6      	b.n	800899a <_free_r+0x26>
 80089ec:	6825      	ldr	r5, [r4, #0]
 80089ee:	1961      	adds	r1, r4, r5
 80089f0:	428b      	cmp	r3, r1
 80089f2:	bf04      	itt	eq
 80089f4:	6819      	ldreq	r1, [r3, #0]
 80089f6:	685b      	ldreq	r3, [r3, #4]
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	bf04      	itt	eq
 80089fc:	1949      	addeq	r1, r1, r5
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	6054      	str	r4, [r2, #4]
 8008a02:	e7ca      	b.n	800899a <_free_r+0x26>
 8008a04:	b003      	add	sp, #12
 8008a06:	bd30      	pop	{r4, r5, pc}
 8008a08:	20001ed8 	.word	0x20001ed8

08008a0c <sbrk_aligned>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4e0e      	ldr	r6, [pc, #56]	; (8008a48 <sbrk_aligned+0x3c>)
 8008a10:	460c      	mov	r4, r1
 8008a12:	6831      	ldr	r1, [r6, #0]
 8008a14:	4605      	mov	r5, r0
 8008a16:	b911      	cbnz	r1, 8008a1e <sbrk_aligned+0x12>
 8008a18:	f000 f88c 	bl	8008b34 <_sbrk_r>
 8008a1c:	6030      	str	r0, [r6, #0]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f887 	bl	8008b34 <_sbrk_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d00a      	beq.n	8008a40 <sbrk_aligned+0x34>
 8008a2a:	1cc4      	adds	r4, r0, #3
 8008a2c:	f024 0403 	bic.w	r4, r4, #3
 8008a30:	42a0      	cmp	r0, r4
 8008a32:	d007      	beq.n	8008a44 <sbrk_aligned+0x38>
 8008a34:	1a21      	subs	r1, r4, r0
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f87c 	bl	8008b34 <_sbrk_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d101      	bne.n	8008a44 <sbrk_aligned+0x38>
 8008a40:	f04f 34ff 	mov.w	r4, #4294967295
 8008a44:	4620      	mov	r0, r4
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	20001edc 	.word	0x20001edc

08008a4c <_malloc_r>:
 8008a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a50:	1ccd      	adds	r5, r1, #3
 8008a52:	f025 0503 	bic.w	r5, r5, #3
 8008a56:	3508      	adds	r5, #8
 8008a58:	2d0c      	cmp	r5, #12
 8008a5a:	bf38      	it	cc
 8008a5c:	250c      	movcc	r5, #12
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	4607      	mov	r7, r0
 8008a62:	db01      	blt.n	8008a68 <_malloc_r+0x1c>
 8008a64:	42a9      	cmp	r1, r5
 8008a66:	d905      	bls.n	8008a74 <_malloc_r+0x28>
 8008a68:	230c      	movs	r3, #12
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	4630      	mov	r0, r6
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	4e2e      	ldr	r6, [pc, #184]	; (8008b30 <_malloc_r+0xe4>)
 8008a76:	f000 f86d 	bl	8008b54 <__malloc_lock>
 8008a7a:	6833      	ldr	r3, [r6, #0]
 8008a7c:	461c      	mov	r4, r3
 8008a7e:	bb34      	cbnz	r4, 8008ace <_malloc_r+0x82>
 8008a80:	4629      	mov	r1, r5
 8008a82:	4638      	mov	r0, r7
 8008a84:	f7ff ffc2 	bl	8008a0c <sbrk_aligned>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	d14d      	bne.n	8008b2a <_malloc_r+0xde>
 8008a8e:	6834      	ldr	r4, [r6, #0]
 8008a90:	4626      	mov	r6, r4
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	d140      	bne.n	8008b18 <_malloc_r+0xcc>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	eb04 0803 	add.w	r8, r4, r3
 8008aa0:	f000 f848 	bl	8008b34 <_sbrk_r>
 8008aa4:	4580      	cmp	r8, r0
 8008aa6:	d13a      	bne.n	8008b1e <_malloc_r+0xd2>
 8008aa8:	6821      	ldr	r1, [r4, #0]
 8008aaa:	3503      	adds	r5, #3
 8008aac:	1a6d      	subs	r5, r5, r1
 8008aae:	f025 0503 	bic.w	r5, r5, #3
 8008ab2:	3508      	adds	r5, #8
 8008ab4:	2d0c      	cmp	r5, #12
 8008ab6:	bf38      	it	cc
 8008ab8:	250c      	movcc	r5, #12
 8008aba:	4629      	mov	r1, r5
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ffa5 	bl	8008a0c <sbrk_aligned>
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d02b      	beq.n	8008b1e <_malloc_r+0xd2>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	442b      	add	r3, r5
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	e00e      	b.n	8008aec <_malloc_r+0xa0>
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	1b52      	subs	r2, r2, r5
 8008ad2:	d41e      	bmi.n	8008b12 <_malloc_r+0xc6>
 8008ad4:	2a0b      	cmp	r2, #11
 8008ad6:	d916      	bls.n	8008b06 <_malloc_r+0xba>
 8008ad8:	1961      	adds	r1, r4, r5
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	6025      	str	r5, [r4, #0]
 8008ade:	bf18      	it	ne
 8008ae0:	6059      	strne	r1, [r3, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	bf08      	it	eq
 8008ae6:	6031      	streq	r1, [r6, #0]
 8008ae8:	5162      	str	r2, [r4, r5]
 8008aea:	604b      	str	r3, [r1, #4]
 8008aec:	4638      	mov	r0, r7
 8008aee:	f104 060b 	add.w	r6, r4, #11
 8008af2:	f000 f835 	bl	8008b60 <__malloc_unlock>
 8008af6:	f026 0607 	bic.w	r6, r6, #7
 8008afa:	1d23      	adds	r3, r4, #4
 8008afc:	1af2      	subs	r2, r6, r3
 8008afe:	d0b6      	beq.n	8008a6e <_malloc_r+0x22>
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	50a3      	str	r3, [r4, r2]
 8008b04:	e7b3      	b.n	8008a6e <_malloc_r+0x22>
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	bf0c      	ite	eq
 8008b0c:	6032      	streq	r2, [r6, #0]
 8008b0e:	605a      	strne	r2, [r3, #4]
 8008b10:	e7ec      	b.n	8008aec <_malloc_r+0xa0>
 8008b12:	4623      	mov	r3, r4
 8008b14:	6864      	ldr	r4, [r4, #4]
 8008b16:	e7b2      	b.n	8008a7e <_malloc_r+0x32>
 8008b18:	4634      	mov	r4, r6
 8008b1a:	6876      	ldr	r6, [r6, #4]
 8008b1c:	e7b9      	b.n	8008a92 <_malloc_r+0x46>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	603b      	str	r3, [r7, #0]
 8008b22:	4638      	mov	r0, r7
 8008b24:	f000 f81c 	bl	8008b60 <__malloc_unlock>
 8008b28:	e7a1      	b.n	8008a6e <_malloc_r+0x22>
 8008b2a:	6025      	str	r5, [r4, #0]
 8008b2c:	e7de      	b.n	8008aec <_malloc_r+0xa0>
 8008b2e:	bf00      	nop
 8008b30:	20001ed8 	.word	0x20001ed8

08008b34 <_sbrk_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d06      	ldr	r5, [pc, #24]	; (8008b50 <_sbrk_r+0x1c>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	f7f8 f9bc 	bl	8000ebc <_sbrk>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d102      	bne.n	8008b4e <_sbrk_r+0x1a>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	b103      	cbz	r3, 8008b4e <_sbrk_r+0x1a>
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	20001ee0 	.word	0x20001ee0

08008b54 <__malloc_lock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__malloc_lock+0x8>)
 8008b56:	f000 b809 	b.w	8008b6c <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	20001ee4 	.word	0x20001ee4

08008b60 <__malloc_unlock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_unlock+0x8>)
 8008b62:	f000 b804 	b.w	8008b6e <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	20001ee4 	.word	0x20001ee4

08008b6c <__retarget_lock_acquire_recursive>:
 8008b6c:	4770      	bx	lr

08008b6e <__retarget_lock_release_recursive>:
 8008b6e:	4770      	bx	lr

08008b70 <_init>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr

08008b7c <_fini>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr
