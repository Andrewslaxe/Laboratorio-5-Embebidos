
Laboratorio 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b4  080098b4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098bc  080098bc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080098c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  20000160  08009a24  00020160  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f24  08009a24  00021f24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014944  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327c  00000000  00000000  00034ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00037d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00038f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aae3  00000000  00000000  00039fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f1c  00000000  00000000  00054a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c272  00000000  00000000  0006a9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106c19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  00106c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009844 	.word	0x08009844

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	08009844 	.word	0x08009844

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__gedf2>:
 80007b4:	f04f 3cff 	mov.w	ip, #4294967295
 80007b8:	e006      	b.n	80007c8 <__cmpdf2+0x4>
 80007ba:	bf00      	nop

080007bc <__ledf2>:
 80007bc:	f04f 0c01 	mov.w	ip, #1
 80007c0:	e002      	b.n	80007c8 <__cmpdf2+0x4>
 80007c2:	bf00      	nop

080007c4 <__cmpdf2>:
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007de:	d01b      	beq.n	8000818 <__cmpdf2+0x54>
 80007e0:	b001      	add	sp, #4
 80007e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007e6:	bf0c      	ite	eq
 80007e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007ec:	ea91 0f03 	teqne	r1, r3
 80007f0:	bf02      	ittt	eq
 80007f2:	ea90 0f02 	teqeq	r0, r2
 80007f6:	2000      	moveq	r0, #0
 80007f8:	4770      	bxeq	lr
 80007fa:	f110 0f00 	cmn.w	r0, #0
 80007fe:	ea91 0f03 	teq	r1, r3
 8000802:	bf58      	it	pl
 8000804:	4299      	cmppl	r1, r3
 8000806:	bf08      	it	eq
 8000808:	4290      	cmpeq	r0, r2
 800080a:	bf2c      	ite	cs
 800080c:	17d8      	asrcs	r0, r3, #31
 800080e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000812:	f040 0001 	orr.w	r0, r0, #1
 8000816:	4770      	bx	lr
 8000818:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d102      	bne.n	8000828 <__cmpdf2+0x64>
 8000822:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000826:	d107      	bne.n	8000838 <__cmpdf2+0x74>
 8000828:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800082c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000830:	d1d6      	bne.n	80007e0 <__cmpdf2+0x1c>
 8000832:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000836:	d0d3      	beq.n	80007e0 <__cmpdf2+0x1c>
 8000838:	f85d 0b04 	ldr.w	r0, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <__aeabi_cdrcmple>:
 8000840:	4684      	mov	ip, r0
 8000842:	4610      	mov	r0, r2
 8000844:	4662      	mov	r2, ip
 8000846:	468c      	mov	ip, r1
 8000848:	4619      	mov	r1, r3
 800084a:	4663      	mov	r3, ip
 800084c:	e000      	b.n	8000850 <__aeabi_cdcmpeq>
 800084e:	bf00      	nop

08000850 <__aeabi_cdcmpeq>:
 8000850:	b501      	push	{r0, lr}
 8000852:	f7ff ffb7 	bl	80007c4 <__cmpdf2>
 8000856:	2800      	cmp	r0, #0
 8000858:	bf48      	it	mi
 800085a:	f110 0f00 	cmnmi.w	r0, #0
 800085e:	bd01      	pop	{r0, pc}

08000860 <__aeabi_dcmpeq>:
 8000860:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000864:	f7ff fff4 	bl	8000850 <__aeabi_cdcmpeq>
 8000868:	bf0c      	ite	eq
 800086a:	2001      	moveq	r0, #1
 800086c:	2000      	movne	r0, #0
 800086e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000872:	bf00      	nop

08000874 <__aeabi_dcmplt>:
 8000874:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000878:	f7ff ffea 	bl	8000850 <__aeabi_cdcmpeq>
 800087c:	bf34      	ite	cc
 800087e:	2001      	movcc	r0, #1
 8000880:	2000      	movcs	r0, #0
 8000882:	f85d fb08 	ldr.w	pc, [sp], #8
 8000886:	bf00      	nop

08000888 <__aeabi_dcmple>:
 8000888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800088c:	f7ff ffe0 	bl	8000850 <__aeabi_cdcmpeq>
 8000890:	bf94      	ite	ls
 8000892:	2001      	movls	r0, #1
 8000894:	2000      	movhi	r0, #0
 8000896:	f85d fb08 	ldr.w	pc, [sp], #8
 800089a:	bf00      	nop

0800089c <__aeabi_dcmpge>:
 800089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a0:	f7ff ffce 	bl	8000840 <__aeabi_cdrcmple>
 80008a4:	bf94      	ite	ls
 80008a6:	2001      	movls	r0, #1
 80008a8:	2000      	movhi	r0, #0
 80008aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ae:	bf00      	nop

080008b0 <__aeabi_dcmpgt>:
 80008b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b4:	f7ff ffc4 	bl	8000840 <__aeabi_cdrcmple>
 80008b8:	bf34      	ite	cc
 80008ba:	2001      	movcc	r0, #1
 80008bc:	2000      	movcs	r0, #0
 80008be:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c2:	bf00      	nop

080008c4 <__aeabi_uldivmod>:
 80008c4:	b953      	cbnz	r3, 80008dc <__aeabi_uldivmod+0x18>
 80008c6:	b94a      	cbnz	r2, 80008dc <__aeabi_uldivmod+0x18>
 80008c8:	2900      	cmp	r1, #0
 80008ca:	bf08      	it	eq
 80008cc:	2800      	cmpeq	r0, #0
 80008ce:	bf1c      	itt	ne
 80008d0:	f04f 31ff 	movne.w	r1, #4294967295
 80008d4:	f04f 30ff 	movne.w	r0, #4294967295
 80008d8:	f000 b974 	b.w	8000bc4 <__aeabi_idiv0>
 80008dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e4:	f000 f806 	bl	80008f4 <__udivmoddi4>
 80008e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f0:	b004      	add	sp, #16
 80008f2:	4770      	bx	lr

080008f4 <__udivmoddi4>:
 80008f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f8:	9d08      	ldr	r5, [sp, #32]
 80008fa:	4604      	mov	r4, r0
 80008fc:	468e      	mov	lr, r1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d14d      	bne.n	800099e <__udivmoddi4+0xaa>
 8000902:	428a      	cmp	r2, r1
 8000904:	4694      	mov	ip, r2
 8000906:	d969      	bls.n	80009dc <__udivmoddi4+0xe8>
 8000908:	fab2 f282 	clz	r2, r2
 800090c:	b152      	cbz	r2, 8000924 <__udivmoddi4+0x30>
 800090e:	fa01 f302 	lsl.w	r3, r1, r2
 8000912:	f1c2 0120 	rsb	r1, r2, #32
 8000916:	fa20 f101 	lsr.w	r1, r0, r1
 800091a:	fa0c fc02 	lsl.w	ip, ip, r2
 800091e:	ea41 0e03 	orr.w	lr, r1, r3
 8000922:	4094      	lsls	r4, r2
 8000924:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000928:	0c21      	lsrs	r1, r4, #16
 800092a:	fbbe f6f8 	udiv	r6, lr, r8
 800092e:	fa1f f78c 	uxth.w	r7, ip
 8000932:	fb08 e316 	mls	r3, r8, r6, lr
 8000936:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800093a:	fb06 f107 	mul.w	r1, r6, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d90a      	bls.n	8000958 <__udivmoddi4+0x64>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f106 30ff 	add.w	r0, r6, #4294967295
 800094a:	f080 811f 	bcs.w	8000b8c <__udivmoddi4+0x298>
 800094e:	4299      	cmp	r1, r3
 8000950:	f240 811c 	bls.w	8000b8c <__udivmoddi4+0x298>
 8000954:	3e02      	subs	r6, #2
 8000956:	4463      	add	r3, ip
 8000958:	1a5b      	subs	r3, r3, r1
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3310 	mls	r3, r8, r0, r3
 8000964:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000968:	fb00 f707 	mul.w	r7, r0, r7
 800096c:	42a7      	cmp	r7, r4
 800096e:	d90a      	bls.n	8000986 <__udivmoddi4+0x92>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 33ff 	add.w	r3, r0, #4294967295
 8000978:	f080 810a 	bcs.w	8000b90 <__udivmoddi4+0x29c>
 800097c:	42a7      	cmp	r7, r4
 800097e:	f240 8107 	bls.w	8000b90 <__udivmoddi4+0x29c>
 8000982:	4464      	add	r4, ip
 8000984:	3802      	subs	r0, #2
 8000986:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098a:	1be4      	subs	r4, r4, r7
 800098c:	2600      	movs	r6, #0
 800098e:	b11d      	cbz	r5, 8000998 <__udivmoddi4+0xa4>
 8000990:	40d4      	lsrs	r4, r2
 8000992:	2300      	movs	r3, #0
 8000994:	e9c5 4300 	strd	r4, r3, [r5]
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	428b      	cmp	r3, r1
 80009a0:	d909      	bls.n	80009b6 <__udivmoddi4+0xc2>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	f000 80ef 	beq.w	8000b86 <__udivmoddi4+0x292>
 80009a8:	2600      	movs	r6, #0
 80009aa:	e9c5 0100 	strd	r0, r1, [r5]
 80009ae:	4630      	mov	r0, r6
 80009b0:	4631      	mov	r1, r6
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	fab3 f683 	clz	r6, r3
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d14a      	bne.n	8000a54 <__udivmoddi4+0x160>
 80009be:	428b      	cmp	r3, r1
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xd4>
 80009c2:	4282      	cmp	r2, r0
 80009c4:	f200 80f9 	bhi.w	8000bba <__udivmoddi4+0x2c6>
 80009c8:	1a84      	subs	r4, r0, r2
 80009ca:	eb61 0303 	sbc.w	r3, r1, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	469e      	mov	lr, r3
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d0e0      	beq.n	8000998 <__udivmoddi4+0xa4>
 80009d6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009da:	e7dd      	b.n	8000998 <__udivmoddi4+0xa4>
 80009dc:	b902      	cbnz	r2, 80009e0 <__udivmoddi4+0xec>
 80009de:	deff      	udf	#255	; 0xff
 80009e0:	fab2 f282 	clz	r2, r2
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	f040 8092 	bne.w	8000b0e <__udivmoddi4+0x21a>
 80009ea:	eba1 010c 	sub.w	r1, r1, ip
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2601      	movs	r6, #1
 80009f8:	0c20      	lsrs	r0, r4, #16
 80009fa:	fbb1 f3f7 	udiv	r3, r1, r7
 80009fe:	fb07 1113 	mls	r1, r7, r3, r1
 8000a02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a06:	fb0e f003 	mul.w	r0, lr, r3
 8000a0a:	4288      	cmp	r0, r1
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x12c>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x12a>
 8000a18:	4288      	cmp	r0, r1
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2c0>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	1a09      	subs	r1, r1, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1110 	mls	r1, r7, r0, r1
 8000a2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x156>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x154>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2ca>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a52:	e79c      	b.n	800098e <__udivmoddi4+0x9a>
 8000a54:	f1c6 0720 	rsb	r7, r6, #32
 8000a58:	40b3      	lsls	r3, r6
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa20 f407 	lsr.w	r4, r0, r7
 8000a66:	fa01 f306 	lsl.w	r3, r1, r6
 8000a6a:	431c      	orrs	r4, r3
 8000a6c:	40f9      	lsrs	r1, r7
 8000a6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a72:	fa00 f306 	lsl.w	r3, r0, r6
 8000a76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a7a:	0c20      	lsrs	r0, r4, #16
 8000a7c:	fa1f fe8c 	uxth.w	lr, ip
 8000a80:	fb09 1118 	mls	r1, r9, r8, r1
 8000a84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a88:	fb08 f00e 	mul.w	r0, r8, lr
 8000a8c:	4288      	cmp	r0, r1
 8000a8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b8>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2bc>
 8000aa0:	4288      	cmp	r0, r1
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2bc>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4461      	add	r1, ip
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ab4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ab8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000abc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac0:	458e      	cmp	lr, r1
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1e2>
 8000ac4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2b4>
 8000ace:	458e      	cmp	lr, r1
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2b4>
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	4461      	add	r1, ip
 8000ad6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ada:	fba0 9402 	umull	r9, r4, r0, r2
 8000ade:	eba1 010e 	sub.w	r1, r1, lr
 8000ae2:	42a1      	cmp	r1, r4
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46a6      	mov	lr, r4
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x2a4>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x2a0>
 8000aec:	b15d      	cbz	r5, 8000b06 <__udivmoddi4+0x212>
 8000aee:	ebb3 0208 	subs.w	r2, r3, r8
 8000af2:	eb61 010e 	sbc.w	r1, r1, lr
 8000af6:	fa01 f707 	lsl.w	r7, r1, r7
 8000afa:	fa22 f306 	lsr.w	r3, r2, r6
 8000afe:	40f1      	lsrs	r1, r6
 8000b00:	431f      	orrs	r7, r3
 8000b02:	e9c5 7100 	strd	r7, r1, [r5]
 8000b06:	2600      	movs	r6, #0
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	f1c2 0320 	rsb	r3, r2, #32
 8000b12:	40d8      	lsrs	r0, r3
 8000b14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b18:	fa21 f303 	lsr.w	r3, r1, r3
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	4301      	orrs	r1, r0
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b30:	0c0b      	lsrs	r3, r1, #16
 8000b32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b36:	fb00 f60e 	mul.w	r6, r0, lr
 8000b3a:	429e      	cmp	r6, r3
 8000b3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x260>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b8>
 8000b4c:	429e      	cmp	r6, r3
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b8>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4463      	add	r3, ip
 8000b54:	1b9b      	subs	r3, r3, r6
 8000b56:	b289      	uxth	r1, r1
 8000b58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b64:	fb06 f30e 	mul.w	r3, r6, lr
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x28a>
 8000b6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2b0>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2b0>
 8000b7a:	3e02      	subs	r6, #2
 8000b7c:	4461      	add	r1, ip
 8000b7e:	1ac9      	subs	r1, r1, r3
 8000b80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0x104>
 8000b86:	462e      	mov	r6, r5
 8000b88:	4628      	mov	r0, r5
 8000b8a:	e705      	b.n	8000998 <__udivmoddi4+0xa4>
 8000b8c:	4606      	mov	r6, r0
 8000b8e:	e6e3      	b.n	8000958 <__udivmoddi4+0x64>
 8000b90:	4618      	mov	r0, r3
 8000b92:	e6f8      	b.n	8000986 <__udivmoddi4+0x92>
 8000b94:	454b      	cmp	r3, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f8>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba0:	3801      	subs	r0, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f8>
 8000ba4:	4646      	mov	r6, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x28a>
 8000ba8:	4620      	mov	r0, r4
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1e2>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x260>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b8>
 8000bb4:	3b02      	subs	r3, #2
 8000bb6:	4461      	add	r1, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x12c>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e709      	b.n	80009d2 <__udivmoddi4+0xde>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x156>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fedb 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f891 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 faff 	bl	80011d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bda:	f000 f8f5 	bl	8000dc8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bde:	f000 f945 	bl	8000e6c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000be2:	f007 ffd9 	bl	8008b98 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000be6:	f000 f9e3 	bl	8000fb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bea:	f000 fa2f 	bl	800104c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bee:	f000 fa7b 	bl	80010e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000bf2:	4836      	ldr	r0, [pc, #216]	; (8000ccc <main+0x104>)
 8000bf4:	f003 fc3e 	bl	8004474 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000bf8:	4835      	ldr	r0, [pc, #212]	; (8000cd0 <main+0x108>)
 8000bfa:	f003 fc3b 	bl	8004474 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000bfe:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <main+0x10c>)
 8000c00:	f003 fc38 	bl	8004474 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c04:	2100      	movs	r1, #0
 8000c06:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <main+0x110>)
 8000c08:	f003 fd40 	bl	800468c <HAL_TIM_PWM_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000c0c:	4833      	ldr	r0, [pc, #204]	; (8000cdc <main+0x114>)
 8000c0e:	f000 ff95 	bl	8001b3c <HAL_ADC_Start>
  int Val=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SendFlag==1){
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <main+0x118>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d1fb      	bne.n	8000c16 <main+0x4e>
		  if(__HAL_TIM_GET_COUNTER(&htim4)>=(Time*100)){
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <main+0x10c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fd4b 	bl	80006c0 <__aeabi_ui2d>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	460d      	mov	r5, r1
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <main+0x11c>)
 8000c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <main+0x120>)
 8000c3a:	f7ff fad5 	bl	80001e8 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4620      	mov	r0, r4
 8000c44:	4629      	mov	r1, r5
 8000c46:	f7ff fe29 	bl	800089c <__aeabi_dcmpge>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d01e      	beq.n	8000c8e <main+0xc6>
		  		  if(Time>=50){  //Si el tiempo supera el timer entonces:
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <main+0x11c>)
 8000c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <main+0x124>)
 8000c5c:	f7ff fe1e 	bl	800089c <__aeabi_dcmpge>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d011      	beq.n	8000c8a <main+0xc2>
		  			  __HAL_TIM_SET_COUNTER(&htim4,0);
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <main+0x10c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
		  			  Time-=50;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <main+0x11c>)
 8000c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <main+0x124>)
 8000c7a:	f7ff fbe3 	bl	8000444 <__aeabi_dsub>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4918      	ldr	r1, [pc, #96]	; (8000ce4 <main+0x11c>)
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
 8000c88:	e001      	b.n	8000c8e <main+0xc6>
		  		  }
		  		  else{
		  			   Clear();
 8000c8a:	f000 fb37 	bl	80012fc <Clear>
		  		  }
		  	  }
		  	  if(__HAL_TIM_GET_COUNTER(&htim3)>=(1000) ){
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <main+0x108>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c98:	d3bd      	bcc.n	8000c16 <main+0x4e>
		  			 Current=HAL_ADC_GetValue(&hadc1);
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <main+0x114>)
 8000c9c:	f001 f802 	bl	8001ca4 <HAL_ADC_GetValue>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <main+0x128>)
 8000ca6:	601a      	str	r2, [r3, #0]
		  			 Send(02,rpm);
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <main+0x12c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f000 fb44 	bl	800133c <Send>
		  			 Send(03,Current);
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <main+0x128>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f000 fb3e 	bl	800133c <Send>
		  			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <main+0x108>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
	  if(SendFlag==1){
 8000cc8:	e7a5      	b.n	8000c16 <main+0x4e>
 8000cca:	bf00      	nop
 8000ccc:	2000020c 	.word	0x2000020c
 8000cd0:	20000254 	.word	0x20000254
 8000cd4:	2000029c 	.word	0x2000029c
 8000cd8:	200001c4 	.word	0x200001c4
 8000cdc:	2000017c 	.word	0x2000017c
 8000ce0:	200002f0 	.word	0x200002f0
 8000ce4:	200002e8 	.word	0x200002e8
 8000ce8:	40590000 	.word	0x40590000
 8000cec:	40490000 	.word	0x40490000
 8000cf0:	200002fc 	.word	0x200002fc
 8000cf4:	200002f4 	.word	0x200002f4

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2230      	movs	r2, #48	; 0x30
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 fc96 	bl	8009638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <SystemClock_Config+0xc8>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <SystemClock_Config+0xc8>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <SystemClock_Config+0xc8>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d68:	2319      	movs	r3, #25
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d6c:	23c0      	movs	r3, #192	; 0xc0
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fef9 	bl	8003b74 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d88:	f000 fc22 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2302      	movs	r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2103      	movs	r1, #3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 f95b 	bl	8004064 <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000db4:	f000 fc0c 	bl	80015d0 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3750      	adds	r7, #80	; 0x50
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000

08000dc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_ADC1_Init+0x9c>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xa0>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e2a:	f000 fe43 	bl	8001ab4 <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 fbcc 	bl	80015d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e4a:	f000 ff39 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e54:	f000 fbbc 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000017c 	.word	0x2000017c
 8000e64:	40012000 	.word	0x40012000
 8000e68:	0f000001 	.word	0x0f000001

08000e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b096      	sub	sp, #88	; 0x58
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fbc7 	bl	8009638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000eac:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <MX_TIM1_Init+0x140>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600;
 8000eb0:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000eb2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed8:	4833      	ldr	r0, [pc, #204]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000eda:	f003 fa7b 	bl	80043d4 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 fb74 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482c      	ldr	r0, [pc, #176]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000ef6:	f003 fde5 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f00:	f000 fb66 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000f06:	f003 fb68 	bl	80045da <HAL_TIM_PWM_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f10:	f000 fb5e 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f20:	4619      	mov	r1, r3
 8000f22:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000f24:	f004 f962 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f2e:	f000 fb4f 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f32:	2360      	movs	r3, #96	; 0x60
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000f58:	f003 fcf2 	bl	8004940 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f62:	f000 fb35 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000f8a:	f004 f99d 	bl	80052c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f94:	f000 fb1c 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <MX_TIM1_Init+0x13c>)
 8000f9a:	f000 fbed 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8000f9e:	bf00      	nop
 8000fa0:	3758      	adds	r7, #88	; 0x58
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001c4 	.word	0x200001c4
 8000fac:	40010000 	.word	0x40010000

08000fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fd6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fe4:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM2_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_TIM2_Init+0x98>)
 8000ff8:	f003 f9ec 	bl	80043d4 <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001002:	f000 fae5 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_TIM2_Init+0x98>)
 8001014:	f003 fd56 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800101e:	f000 fad7 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_TIM2_Init+0x98>)
 8001030:	f004 f8dc 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800103a:	f000 fac9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000020c 	.word	0x2000020c

0800104c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM3_Init+0x94>)
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <MX_TIM3_Init+0x98>)
 800106c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_TIM3_Init+0x94>)
 8001070:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001074:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM3_Init+0x94>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_TIM3_Init+0x94>)
 800107e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_TIM3_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_TIM3_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_TIM3_Init+0x94>)
 8001092:	f003 f99f 	bl	80043d4 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800109c:	f000 fa98 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_TIM3_Init+0x94>)
 80010ae:	f003 fd09 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 fa8a 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM3_Init+0x94>)
 80010ca:	f004 f88f 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f000 fa7c 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000254 	.word	0x20000254
 80010e4:	40000400 	.word	0x40000400

080010e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <MX_TIM4_Init+0xe8>)
 800111a:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <MX_TIM4_Init+0xec>)
 800111c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9600;
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <MX_TIM4_Init+0xe8>)
 8001120:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001124:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <MX_TIM4_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50001;
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_TIM4_Init+0xe8>)
 800112e:	f24c 3251 	movw	r2, #50001	; 0xc351
 8001132:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <MX_TIM4_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_TIM4_Init+0xe8>)
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001140:	4823      	ldr	r0, [pc, #140]	; (80011d0 <MX_TIM4_Init+0xe8>)
 8001142:	f003 f947 	bl	80043d4 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800114c:	f000 fa40 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115a:	4619      	mov	r1, r3
 800115c:	481c      	ldr	r0, [pc, #112]	; (80011d0 <MX_TIM4_Init+0xe8>)
 800115e:	f003 fcb1 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001168:	f000 fa32 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800116c:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_TIM4_Init+0xe8>)
 800116e:	f003 f9db 	bl	8004528 <HAL_TIM_OC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001178:	f000 fa2a 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4619      	mov	r1, r3
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_TIM4_Init+0xe8>)
 800118c:	f004 f82e 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001196:	f000 fa1b 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_TIM4_Init+0xe8>)
 80011b2:	f003 fb69 	bl	8004888 <HAL_TIM_OC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80011bc:	f000 fa08 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <MX_TIM4_Init+0xe8>)
 80011c2:	f000 fad9 	bl	8001778 <HAL_TIM_MspPostInit>

}
 80011c6:	bf00      	nop
 80011c8:	3738      	adds	r7, #56	; 0x38
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000029c 	.word	0x2000029c
 80011d4:	40000800 	.word	0x40000800

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <MX_GPIO_Init+0x114>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <MX_GPIO_Init+0x114>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <MX_GPIO_Init+0x114>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <MX_GPIO_Init+0x114>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a36      	ldr	r2, [pc, #216]	; (80012ec <MX_GPIO_Init+0x114>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <MX_GPIO_Init+0x114>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <MX_GPIO_Init+0x114>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <MX_GPIO_Init+0x114>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MX_GPIO_Init+0x114>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <MX_GPIO_Init+0x114>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a28      	ldr	r2, [pc, #160]	; (80012ec <MX_GPIO_Init+0x114>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <MX_GPIO_Init+0x114>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	4822      	ldr	r0, [pc, #136]	; (80012f0 <MX_GPIO_Init+0x118>)
 8001266:	f001 f9ef 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Pin|Forward_Pin|Backward_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001270:	4820      	ldr	r0, [pc, #128]	; (80012f4 <MX_GPIO_Init+0x11c>)
 8001272:	f001 f9e9 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4818      	ldr	r0, [pc, #96]	; (80012f0 <MX_GPIO_Init+0x118>)
 8001290:	f001 f856 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001294:	2301      	movs	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4814      	ldr	r0, [pc, #80]	; (80012f8 <MX_GPIO_Init+0x120>)
 80012a8:	f001 f84a 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_Pin Forward_Pin Backward_Pin */
  GPIO_InitStruct.Pin = Enable_Pin|Forward_Pin|Backward_Pin;
 80012ac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_GPIO_Init+0x11c>)
 80012c6:	f001 f83b 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 80012ca:	2320      	movs	r3, #32
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_GPIO_Init+0x11c>)
 80012e0:	f001 f82e 	bl	8002340 <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020000 	.word	0x40020000

080012fc <Clear>:

/* USER CODE BEGIN 4 */

void Clear(){
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	rpm=0;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <Clear+0x30>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
	pwm=0;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <Clear+0x34>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
	Time=0;
 800130c:	4909      	ldr	r1, [pc, #36]	; (8001334 <Clear+0x38>)
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
	TIM1->CCR1=0;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <Clear+0x3c>)
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200002f4 	.word	0x200002f4
 8001330:	200002f8 	.word	0x200002f8
 8001334:	200002e8 	.word	0x200002e8
 8001338:	40010000 	.word	0x40010000

0800133c <Send>:
void Send(int Cmd, int Info){
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]

	//Cmd=0  Rpm
	//Cmd=1	 mA
	int Size=0x00,Parity=0,Contador=0;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
	uint8_t *Data;

	if(Info<256){
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	dc0c      	bgt.n	8001372 <Send+0x36>
		Size=0x01;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
		Data=(uint8_t*)malloc(6*sizeof(int));
 800135c:	2018      	movs	r0, #24
 800135e:	f008 f95b 	bl	8009618 <malloc>
 8001362:	4603      	mov	r3, r0
 8001364:	60bb      	str	r3, [r7, #8]
		Data[3]=Info;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3303      	adds	r3, #3
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e011      	b.n	8001396 <Send+0x5a>
	}
	else{
		Size=0x02;
 8001372:	2302      	movs	r3, #2
 8001374:	617b      	str	r3, [r7, #20]
		Data=(uint8_t*)malloc(7*sizeof(int));
 8001376:	201c      	movs	r0, #28
 8001378:	f008 f94e 	bl	8009618 <malloc>
 800137c:	4603      	mov	r3, r0
 800137e:	60bb      	str	r3, [r7, #8]
		Data[3]=0x00FF & (Info >> 8);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	121a      	asrs	r2, r3, #8
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3303      	adds	r3, #3
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
		Data[4]=0x00FF & Info;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3304      	adds	r3, #4
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
	}
	Data[0]=Start;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2206      	movs	r2, #6
 800139a:	701a      	strb	r2, [r3, #0]
	Data[1]=Size;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
	Data[2]=Cmd;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3302      	adds	r3, #2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
	for(Contador=0;Contador<Size+3;Contador++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e00a      	b.n	80013cc <Send+0x90>
		Parity^=Data[Contador];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4053      	eors	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
	for(Contador=0;Contador<Size+3;Contador++){
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3302      	adds	r3, #2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	ddef      	ble.n	80013b6 <Send+0x7a>
	}
	Data[Size+3]=Parity;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3303      	adds	r3, #3
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]
	Data[Size+4]=Stop;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3304      	adds	r3, #4
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	4413      	add	r3, r2
 80013ec:	2207      	movs	r2, #7
 80013ee:	701a      	strb	r2, [r3, #0]

	Contador=strlen(Data);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7fe fef1 	bl	80001d8 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS(Data,strlen(Data));
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f7fe feec 	bl	80001d8 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29b      	uxth	r3, r3
 8001404:	4619      	mov	r1, r3
 8001406:	68b8      	ldr	r0, [r7, #8]
 8001408:	f007 fc8a 	bl	8008d20 <CDC_Transmit_FS>
	free(Data);
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f008 f90b 	bl	8009628 <free>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <CDC_ReceiveCallBack>:

void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len){
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	int Cmd,Aux;
	int Temp=0,Parity=0,Size;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
	if(Buf[0]==Start && Buf[Len-1]==Stop){ //Protocolo
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b06      	cmp	r3, #6
 8001434:	f040 80b9 	bne.w	80015aa <CDC_ReceiveCallBack+0x18e>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b07      	cmp	r3, #7
 8001444:	f040 80b1 	bne.w	80015aa <CDC_ReceiveCallBack+0x18e>
		Size=Buf[1];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
		Cmd=Buf[2];
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3302      	adds	r3, #2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]
		if(Size==1){
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d116      	bne.n	800148c <CDC_ReceiveCallBack+0x70>
			Parity=Buf[0]^Buf[1]^Buf[2]^Buf[3];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4053      	eors	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3302      	adds	r3, #2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4053      	eors	r3, r2
 8001474:	b2da      	uxtb	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3303      	adds	r3, #3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4053      	eors	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	617b      	str	r3, [r7, #20]
			Temp=Buf[3];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3303      	adds	r3, #3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e00b      	b.n	80014a4 <CDC_ReceiveCallBack+0x88>
		}
		else if(Size==2){
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d108      	bne.n	80014a4 <CDC_ReceiveCallBack+0x88>
			Temp=(Buf[3]<< 8) | Buf[4];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3303      	adds	r3, #3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	3204      	adds	r2, #4
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
		}
		for(Aux=0;Aux<Len-3;Aux++){
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e00a      	b.n	80014c0 <CDC_ReceiveCallBack+0xa4>
			Parity^=Buf[Aux];
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4053      	eors	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]
		for(Aux=0;Aux<Len-3;Aux++){
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	1eda      	subs	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d8ef      	bhi.n	80014aa <CDC_ReceiveCallBack+0x8e>
		}
		if(Buf[Len-2]==Parity){
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3b02      	subs	r3, #2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4293      	cmp	r3, r2
 80014da:	d166      	bne.n	80015aa <CDC_ReceiveCallBack+0x18e>
			if(Cmd==1){ //Le pide a la STM enviar Info
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d103      	bne.n	80014ea <CDC_ReceiveCallBack+0xce>
				SendFlag=1;
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <CDC_ReceiveCallBack+0x198>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, SET);
				TIM1->CCR1=650*pwm;
			}
		}
	}
}
 80014e8:	e05f      	b.n	80015aa <CDC_ReceiveCallBack+0x18e>
			else if(Cmd==0){ //Le pide que deje de enviar Info
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <CDC_ReceiveCallBack+0xdc>
				SendFlag=0;
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <CDC_ReceiveCallBack+0x198>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	e058      	b.n	80015aa <CDC_ReceiveCallBack+0x18e>
			else if(Cmd==2){ //Porcentaje PWM
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d111      	bne.n	8001522 <CDC_ReceiveCallBack+0x106>
				pwm=Temp;
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <CDC_ReceiveCallBack+0x19c>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <CDC_ReceiveCallBack+0x1a0>)
 800150c:	f001 f89c 	bl	8002648 <HAL_GPIO_WritePin>
				TIM1->CCR1=650*pwm;
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <CDC_ReceiveCallBack+0x19c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f240 228a 	movw	r2, #650	; 0x28a
 8001518:	fb03 f202 	mul.w	r2, r3, r2
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <CDC_ReceiveCallBack+0x1a4>)
 800151e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001520:	e043      	b.n	80015aa <CDC_ReceiveCallBack+0x18e>
			else if(Cmd==3){    //RPM  Suponiendo q el TIM1 al máximo tiene una salida de 2000rpm
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d10b      	bne.n	8001540 <CDC_ReceiveCallBack+0x124>
				rpm=Temp;
 8001528:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <CDC_ReceiveCallBack+0x1a8>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]
				TIM1->CCR1=(Temp*650/2);
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	019a      	lsls	r2, r3, #6
 8001538:	441a      	add	r2, r3
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <CDC_ReceiveCallBack+0x1a4>)
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800153e:	e034      	b.n	80015aa <CDC_ReceiveCallBack+0x18e>
			else if(Cmd==4){ //Tiempo de envio en 100 ms
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d10c      	bne.n	8001560 <CDC_ReceiveCallBack+0x144>
				__HAL_TIM_SET_COUNTER(&htim4,0);
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <CDC_ReceiveCallBack+0x1ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
				Time=Temp;
 800154e:	69b8      	ldr	r0, [r7, #24]
 8001550:	f7ff f8c6 	bl	80006e0 <__aeabi_i2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	491c      	ldr	r1, [pc, #112]	; (80015cc <CDC_ReceiveCallBack+0x1b0>)
 800155a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800155e:	e024      	b.n	80015aa <CDC_ReceiveCallBack+0x18e>
			else if(Cmd==42){		//PWM y Tiempo
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b2a      	cmp	r3, #42	; 0x2a
 8001564:	d121      	bne.n	80015aa <CDC_ReceiveCallBack+0x18e>
				__HAL_TIM_SET_COUNTER(&htim4,0);
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <CDC_ReceiveCallBack+0x1ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
				Time=Temp;
 800156e:	69b8      	ldr	r0, [r7, #24]
 8001570:	f7ff f8b6 	bl	80006e0 <__aeabi_i2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4914      	ldr	r1, [pc, #80]	; (80015cc <CDC_ReceiveCallBack+0x1b0>)
 800157a:	e9c1 2300 	strd	r2, r3, [r1]
				pwm=Buf[Len-3];
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3b03      	subs	r3, #3
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <CDC_ReceiveCallBack+0x19c>)
 800158c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <CDC_ReceiveCallBack+0x1a0>)
 8001596:	f001 f857 	bl	8002648 <HAL_GPIO_WritePin>
				TIM1->CCR1=650*pwm;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <CDC_ReceiveCallBack+0x19c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f240 228a 	movw	r2, #650	; 0x28a
 80015a2:	fb03 f202 	mul.w	r2, r3, r2
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <CDC_ReceiveCallBack+0x1a4>)
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002f0 	.word	0x200002f0
 80015b8:	200002f8 	.word	0x200002f8
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40010000 	.word	0x40010000
 80015c4:	200002f4 	.word	0x200002f4
 80015c8:	2000029c 	.word	0x2000029c
 80015cc:	200002e8 	.word	0x200002e8

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_ADC_MspInit+0x7c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d127      	bne.n	800169e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_ADC_MspInit+0x80>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168a:	2303      	movs	r3, #3
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_ADC_MspInit+0x84>)
 800169a:	f000 fe51 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40012000 	.word	0x40012000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000

080016b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a29      	ldr	r2, [pc, #164]	; (8001768 <HAL_TIM_Base_MspInit+0xb4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10e      	bne.n	80016e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a27      	ldr	r2, [pc, #156]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016e2:	e03a      	b.n	800175a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
}
 800170a:	e026      	b.n	800175a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_TIM_Base_MspInit+0xbc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	e012      	b.n	800175a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_TIM_Base_MspInit+0xc0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10d      	bne.n	800175a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_TIM_Base_MspInit+0xb8>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40010000 	.word	0x40010000
 800176c:	40023800 	.word	0x40023800
 8001770:	40000400 	.word	0x40000400
 8001774:	40000800 	.word	0x40000800

08001778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a24      	ldr	r2, [pc, #144]	; (8001828 <HAL_TIM_MspPostInit+0xb0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11f      	bne.n	80017da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_TIM_MspPostInit+0xb4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a22      	ldr	r2, [pc, #136]	; (800182c <HAL_TIM_MspPostInit+0xb4>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_TIM_MspPostInit+0xb4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Pwm_Pin;
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pwm_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4817      	ldr	r0, [pc, #92]	; (8001830 <HAL_TIM_MspPostInit+0xb8>)
 80017d4:	f000 fdb4 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017d8:	e022      	b.n	8001820 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <HAL_TIM_MspPostInit+0xbc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d11d      	bne.n	8001820 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_TIM_MspPostInit+0xb4>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_TIM_MspPostInit+0xb4>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_TIM_MspPostInit+0xb4>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001810:	2302      	movs	r3, #2
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <HAL_TIM_MspPostInit+0xc0>)
 800181c:	f000 fd90 	bl	8002340 <HAL_GPIO_Init>
}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40010000 	.word	0x40010000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	40000800 	.word	0x40000800
 8001838:	40020400 	.word	0x40020400

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f8d0 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <OTG_FS_IRQHandler+0x10>)
 8001896:	f001 f840 	bl	800291a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200017e8 	.word	0x200017e8

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f007 fe76 	bl	80095c4 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20020000 	.word	0x20020000
 8001904:	00000400 	.word	0x00000400
 8001908:	20000300 	.word	0x20000300
 800190c:	20001f28 	.word	0x20001f28

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff ffd7 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f007 fe35 	bl	80095d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff f92f 	bl	8000bc8 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001978:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 800197c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001980:	20001f24 	.word	0x20001f24

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_Init+0x40>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_Init+0x40>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x40>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 fc83 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	200f      	movs	r0, #15
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fe0e 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fc9b 	bl	8002326 <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 fc63 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000304 	.word	0x20000304

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000304 	.word	0x20000304

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e033      	b.n	8001b32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fdaa 	bl	800162c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001afa:	f023 0302 	bic.w	r3, r3, #2
 8001afe:	f043 0202 	orr.w	r2, r3, #2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fa0c 	bl	8001f24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
 8001b22:	e001      	b.n	8001b28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Start+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e097      	b.n	8001c86 <HAL_ADC_Start+0x14a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d018      	beq.n	8001b9e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7c:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <HAL_ADC_Start+0x158>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a45      	ldr	r2, [pc, #276]	; (8001c98 <HAL_ADC_Start+0x15c>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9a      	lsrs	r2, r3, #18
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b90:	e002      	b.n	8001b98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d15f      	bne.n	8001c6c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f023 0206 	bic.w	r2, r3, #6
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_ADC_Start+0x160>)
 8001c0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d129      	bne.n	8001c84 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e020      	b.n	8001c84 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_ADC_Start+0x164>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d11b      	bne.n	8001c84 <HAL_ADC_Start+0x148>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d114      	bne.n	8001c84 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	e00b      	b.n	8001c84 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	40012300 	.word	0x40012300
 8001ca0:	40012000 	.word	0x40012000

08001ca4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1c>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e113      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x244>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	d925      	bls.n	8001d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68d9      	ldr	r1, [r3, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b1e      	subs	r3, #30
 8001d02:	2207      	movs	r2, #7
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	400a      	ands	r2, r1
 8001d10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68d9      	ldr	r1, [r3, #12]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4403      	add	r3, r0
 8001d2a:	3b1e      	subs	r3, #30
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	e022      	b.n	8001d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4403      	add	r3, r0
 8001d74:	409a      	lsls	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d824      	bhi.n	8001dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b05      	subs	r3, #5
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b05      	subs	r3, #5
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001dce:	e04c      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d824      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b23      	subs	r3, #35	; 0x23
 8001dea:	221f      	movs	r2, #31
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43da      	mvns	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	400a      	ands	r2, r1
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	3b23      	subs	r3, #35	; 0x23
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e20:	e023      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b41      	subs	r3, #65	; 0x41
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b41      	subs	r3, #65	; 0x41
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_ADC_ConfigChannel+0x250>)
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <HAL_ADC_ConfigChannel+0x254>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10f      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1d8>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d10b      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_ADC_ConfigChannel+0x254>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12b      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x23a>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_ADC_ConfigChannel+0x258>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b11      	cmp	r3, #17
 8001eb2:	d122      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_ADC_ConfigChannel+0x258>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d111      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_ADC_ConfigChannel+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_ADC_ConfigChannel+0x260>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9a      	lsrs	r2, r3, #18
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001eec:	e002      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f9      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40012300 	.word	0x40012300
 8001f14:	40012000 	.word	0x40012000
 8001f18:	10000012 	.word	0x10000012
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	431bde83 	.word	0x431bde83

08001f24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2c:	4b79      	ldr	r3, [pc, #484]	; (8002114 <ADC_Init+0x1f0>)
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	021a      	lsls	r2, r3, #8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6899      	ldr	r1, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	4a58      	ldr	r2, [pc, #352]	; (8002118 <ADC_Init+0x1f4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d022      	beq.n	8002002 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6899      	ldr	r1, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	e00f      	b.n	8002022 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002020:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0202 	bic.w	r2, r2, #2
 8002030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7e1b      	ldrb	r3, [r3, #24]
 800203c:	005a      	lsls	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800206e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6859      	ldr	r1, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	3b01      	subs	r3, #1
 800207c:	035a      	lsls	r2, r3, #13
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e007      	b.n	8002098 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002096:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	051a      	lsls	r2, r3, #20
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020da:	025a      	lsls	r2, r3, #9
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	029a      	lsls	r2, r3, #10
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40012300 	.word	0x40012300
 8002118:	0f000001 	.word	0x0f000001

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ff8e 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff29 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff3e 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff8e 	bl	8002210 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff31 	bl	8002180 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e159      	b.n	8002610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8148 	bne.w	800260a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d005      	beq.n	8002392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	2b02      	cmp	r3, #2
 8002390:	d130      	bne.n	80023f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d017      	beq.n	8002430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d123      	bne.n	8002484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a2 	beq.w	800260a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b54      	ldr	r3, [pc, #336]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e2:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_GPIO_Init+0x2ec>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_GPIO_Init+0x2f0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x202>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_GPIO_Init+0x2f4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x1fe>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a47      	ldr	r2, [pc, #284]	; (8002638 <HAL_GPIO_Init+0x2f8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x1fa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a46      	ldr	r2, [pc, #280]	; (800263c <HAL_GPIO_Init+0x2fc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x1f6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a45      	ldr	r2, [pc, #276]	; (8002640 <HAL_GPIO_Init+0x300>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x1f2>
 800252e:	2304      	movs	r3, #4
 8002530:	e008      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002532:	2307      	movs	r3, #7
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002536:	2303      	movs	r3, #3
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x204>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x204>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002542:	2300      	movs	r3, #0
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002554:	4935      	ldr	r1, [pc, #212]	; (800262c <HAL_GPIO_Init+0x2ec>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002562:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_GPIO_Init+0x304>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002586:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <HAL_GPIO_Init+0x304>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_GPIO_Init+0x304>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <HAL_GPIO_Init+0x304>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_GPIO_Init+0x304>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025da:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <HAL_GPIO_Init+0x304>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_GPIO_Init+0x304>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002604:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_GPIO_Init+0x304>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f67f aea2 	bls.w	800235c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	40013800 	.word	0x40013800
 8002630:	40020000 	.word	0x40020000
 8002634:	40020400 	.word	0x40020400
 8002638:	40020800 	.word	0x40020800
 800263c:	40020c00 	.word	0x40020c00
 8002640:	40021000 	.word	0x40021000
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800267a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267c:	b08f      	sub	sp, #60	; 0x3c
 800267e:	af0a      	add	r7, sp, #40	; 0x28
 8002680:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e10f      	b.n	80028ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f006 fc82 	bl	8008fb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2203      	movs	r2, #3
 80026b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 ff63 	bl	8005596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	687e      	ldr	r6, [r7, #4]
 80026d8:	466d      	mov	r5, sp
 80026da:	f106 0410 	add.w	r4, r6, #16
 80026de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ee:	1d33      	adds	r3, r6, #4
 80026f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f2:	6838      	ldr	r0, [r7, #0]
 80026f4:	f002 fe3a 	bl	800536c <USB_CoreInit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0d0      	b.n	80028ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f002 ff51 	bl	80055b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e04a      	b.n	80027b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	333d      	adds	r3, #61	; 0x3d
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	333c      	adds	r3, #60	; 0x3c
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	b298      	uxth	r0, r3
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3344      	adds	r3, #68	; 0x44
 8002758:	4602      	mov	r2, r0
 800275a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3340      	adds	r3, #64	; 0x40
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3348      	adds	r3, #72	; 0x48
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334c      	adds	r3, #76	; 0x4c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3354      	adds	r3, #84	; 0x54
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3301      	adds	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3af      	bcc.n	800271c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e044      	b.n	800284c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	3301      	adds	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d3b5      	bcc.n	80027c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	687e      	ldr	r6, [r7, #4]
 800285e:	466d      	mov	r5, sp
 8002860:	f106 0410 	add.w	r4, r6, #16
 8002864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002870:	e885 0003 	stmia.w	r5, {r0, r1}
 8002874:	1d33      	adds	r3, r6, #4
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	f002 fee9 	bl	8005650 <USB_DevInit>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e00d      	b.n	80028ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f838 	bl	800691a <USB_DevDisconnect>

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_PCD_Start+0x1c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e020      	b.n	8002912 <HAL_PCD_Start+0x5e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d109      	bne.n	80028f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d005      	beq.n	80028f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fe3b 	bl	8005574 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f003 ffe8 	bl	80068d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800291a:	b590      	push	{r4, r7, lr}
 800291c:	b08d      	sub	sp, #52	; 0x34
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 f8a6 	bl	8006a82 <USB_GetMode>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 848a 	bne.w	8003252 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f004 f80a 	bl	800695c <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8480 	beq.w	8003250 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fff7 	bl	800695c <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	d107      	bne.n	8002988 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f002 0202 	and.w	r2, r2, #2
 8002986:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 ffe5 	bl	800695c <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b10      	cmp	r3, #16
 800299a:	d161      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0210 	bic.w	r2, r2, #16
 80029aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	0c5b      	lsrs	r3, r3, #17
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d124      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d035      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a38      	ldr	r0, [r7, #32]
 80029f8:	f003 fe1c 	bl	8006634 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a08:	441a      	add	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1a:	441a      	add	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	621a      	str	r2, [r3, #32]
 8002a20:	e016      	b.n	8002a50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	0c5b      	lsrs	r3, r3, #17
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d110      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a34:	2208      	movs	r2, #8
 8002a36:	4619      	mov	r1, r3
 8002a38:	6a38      	ldr	r0, [r7, #32]
 8002a3a:	f003 fdfb 	bl	8006634 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6a1a      	ldr	r2, [r3, #32]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4a:	441a      	add	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0210 	orr.w	r2, r2, #16
 8002a5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 ff79 	bl	800695c <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a74:	f040 80a7 	bne.w	8002bc6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 ff7e 	bl	8006982 <USB_ReadDevAllOutEpInterrupt>
 8002a86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a88:	e099      	b.n	8002bbe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 808e 	beq.w	8002bb2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 ffa2 	bl	80069ea <USB_ReadDevOutEPInterrupt>
 8002aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fec2 	bl	8003850 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 ff98 	bl	8003a20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	461a      	mov	r2, r3
 8002b08:	2310      	movs	r3, #16
 8002b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d030      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b80      	cmp	r3, #128	; 0x80
 8002b20:	d109      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b34:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	78db      	ldrb	r3, [r3, #3]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d108      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f006 fb21 	bl	80091a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b72:	461a      	mov	r2, r3
 8002b74:	2302      	movs	r3, #2
 8002b76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2320      	movs	r3, #32
 8002b92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002baa:	461a      	mov	r2, r3
 8002bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f af62 	bne.w	8002a8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fec6 	bl	800695c <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bda:	f040 80db 	bne.w	8002d94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fee7 	bl	80069b6 <USB_ReadDevAllInEpInterrupt>
 8002be8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bee:	e0cd      	b.n	8002d8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80c2 	beq.w	8002d80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 ff0d 	bl	8006a26 <USB_ReadDevInEPInterrupt>
 8002c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d057      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2201      	movs	r2, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69f9      	ldr	r1, [r7, #28]
 8002c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c38:	4013      	ands	r3, r2
 8002c3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d132      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334c      	adds	r3, #76	; 0x4c
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4403      	add	r3, r0
 8002c76:	3348      	adds	r3, #72	; 0x48
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4419      	add	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4403      	add	r3, r0
 8002c8a:	334c      	adds	r3, #76	; 0x4c
 8002c8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d113      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x3a2>
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3354      	adds	r3, #84	; 0x54
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	f003 ff14 	bl	8006ae4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f006 f9f5 	bl	80090b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d16:	461a      	mov	r2, r3
 8002d18:	2340      	movs	r3, #64	; 0x40
 8002d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d28:	6a38      	ldr	r0, [r7, #32]
 8002d2a:	f002 fdf5 	bl	8005918 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3338      	adds	r3, #56	; 0x38
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d108      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f006 fa38 	bl	80091cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fcdb 	bl	8003736 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f af2e 	bne.w	8002bf0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fddf 	bl	800695c <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da8:	d122      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d108      	bne.n	8002dda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fec2 	bl	8003b5c <HAL_PCDEx_LPM_Callback>
 8002dd8:	e002      	b.n	8002de0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f006 f9d6 	bl	800918c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fdb1 	bl	800695c <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e04:	d112      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f006 f992 	bl	8009140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e2a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fd93 	bl	800695c <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e40:	f040 80b7 	bne.w	8002fb2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fd5a 	bl	8005918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e68:	e046      	b.n	8002ef8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e76:	461a      	mov	r2, r3
 8002e78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8e:	0151      	lsls	r1, r2, #5
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	440a      	add	r2, r1
 8002e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec2:	0151      	lsls	r1, r2, #5
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ecc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ed0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ef0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d3b3      	bcc.n	8002e6a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2e:	f043 030b 	orr.w	r3, r3, #11
 8002f32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f44:	f043 030b 	orr.w	r3, r3, #11
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	e015      	b.n	8002f78 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f5e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f72:	f043 030b 	orr.w	r3, r3, #11
 8002f76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f003 fda1 	bl	8006ae4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fcd0 	bl	800695c <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc6:	d124      	bne.n	8003012 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fd66 	bl	8006a9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fd1b 	bl	8005a12 <USB_GetDevSpeed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	f001 f9e8 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8002fec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f002 fa1a 	bl	8005430 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f006 f880 	bl	8009102 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003010:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fca0 	bl	800695c <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b08      	cmp	r3, #8
 8003024:	d10a      	bne.n	800303c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f006 f85d 	bl	80090e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f002 0208 	and.w	r2, r2, #8
 800303a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fc8b 	bl	800695c <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d122      	bne.n	8003096 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
 8003060:	e014      	b.n	800308c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fb27 	bl	80036d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	3301      	adds	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	429a      	cmp	r2, r3
 8003094:	d3e5      	bcc.n	8003062 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fc5e 	bl	800695c <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030aa:	d13b      	bne.n	8003124 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ac:	2301      	movs	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e02b      	b.n	800310a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3340      	adds	r3, #64	; 0x40
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d115      	bne.n	8003104 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da12      	bge.n	8003104 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333f      	adds	r3, #63	; 0x3f
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fae8 	bl	80036d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	3301      	adds	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	429a      	cmp	r2, r3
 8003112:	d3ce      	bcc.n	80030b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fc17 	bl	800695c <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003138:	d155      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313a:	2301      	movs	r3, #1
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e045      	b.n	80031cc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d12e      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003168:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	da2b      	bge.n	80031c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800317a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800317e:	429a      	cmp	r2, r3
 8003180:	d121      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c2:	6053      	str	r3, [r2, #4]
            break;
 80031c4:	e007      	b.n	80031d6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	3301      	adds	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3b4      	bcc.n	8003140 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fbb6 	bl	800695c <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d10a      	bne.n	8003212 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f005 fff7 	bl	80091f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f003 fba0 	bl	800695c <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d115      	bne.n	8003252 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f005 ffe7 	bl	800920c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e000      	b.n	8003252 <HAL_PCD_IRQHandler+0x938>
      return;
 8003250:	bf00      	nop
    }
  }
}
 8003252:	3734      	adds	r7, #52	; 0x34
 8003254:	46bd      	mov	sp, r7
 8003256:	bd90      	pop	{r4, r7, pc}

08003258 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_PCD_SetAddress+0x1a>
 800326e:	2302      	movs	r3, #2
 8003270:	e013      	b.n	800329a <HAL_PCD_SetAddress+0x42>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fafe 	bl	800688c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	4608      	mov	r0, r1
 80032ac:	4611      	mov	r1, r2
 80032ae:	461a      	mov	r2, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	70fb      	strb	r3, [r7, #3]
 80032b4:	460b      	mov	r3, r1
 80032b6:	803b      	strh	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da0f      	bge.n	80032e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3338      	adds	r3, #56	; 0x38
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	705a      	strb	r2, [r3, #1]
 80032e6:	e00f      	b.n	8003308 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	3304      	adds	r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003314:	883a      	ldrh	r2, [r7, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	78ba      	ldrb	r2, [r7, #2]
 800331e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003332:	78bb      	ldrb	r3, [r7, #2]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d102      	bne.n	800333e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_PCD_EP_Open+0xaa>
 8003348:	2302      	movs	r3, #2
 800334a:	e00e      	b.n	800336a <HAL_PCD_EP_Open+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	4618      	mov	r0, r3
 800335c:	f002 fb7e 	bl	8005a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003368:	7afb      	ldrb	r3, [r7, #11]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800337e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	da0f      	bge.n	80033a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	3338      	adds	r3, #56	; 0x38
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	3304      	adds	r3, #4
 800339c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	705a      	strb	r2, [r3, #1]
 80033a4:	e00f      	b.n	80033c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	3304      	adds	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_PCD_EP_Close+0x6e>
 80033dc:	2302      	movs	r3, #2
 80033de:	e00e      	b.n	80033fe <HAL_PCD_EP_Close+0x8c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fbbc 	bl	8005b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	460b      	mov	r3, r1
 8003414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003416:	7afb      	ldrb	r3, [r7, #11]
 8003418:	f003 020f 	and.w	r2, r3, #15
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	b2da      	uxtb	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d102      	bne.n	8003462 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	f002 fe9b 	bl	80061b4 <USB_EP0StartXfer>
 800347e:	e008      	b.n	8003492 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	6979      	ldr	r1, [r7, #20]
 800348e:	f002 fc49 	bl	8005d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	460b      	mov	r3, r1
 80034da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034dc:	7afb      	ldrb	r3, [r7, #11]
 80034de:	f003 020f 	and.w	r2, r3, #15
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3338      	adds	r3, #56	; 0x38
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2200      	movs	r2, #0
 8003504:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2201      	movs	r2, #1
 800350a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	b2da      	uxtb	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	6979      	ldr	r1, [r7, #20]
 800353e:	f002 fe39 	bl	80061b4 <USB_EP0StartXfer>
 8003542:	e008      	b.n	8003556 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6979      	ldr	r1, [r7, #20]
 8003552:	f002 fbe7 	bl	8005d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	d901      	bls.n	800357e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e050      	b.n	8003620 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800357e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003582:	2b00      	cmp	r3, #0
 8003584:	da0f      	bge.n	80035a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	3338      	adds	r3, #56	; 0x38
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	705a      	strb	r2, [r3, #1]
 80035a4:	e00d      	b.n	80035c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_PCD_EP_SetStall+0x82>
 80035de:	2302      	movs	r3, #2
 80035e0:	e01e      	b.n	8003620 <HAL_PCD_EP_SetStall+0xc0>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 f877 	bl	80066e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	b2d9      	uxtb	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003610:	461a      	mov	r2, r3
 8003612:	f003 fa67 	bl	8006ae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f003 020f 	and.w	r2, r3, #15
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d901      	bls.n	8003646 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e042      	b.n	80036cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da0f      	bge.n	800366e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	3338      	adds	r3, #56	; 0x38
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	705a      	strb	r2, [r3, #1]
 800366c:	e00f      	b.n	800368e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	b2da      	uxtb	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_PCD_EP_ClrStall+0x86>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e00e      	b.n	80036cc <HAL_PCD_EP_ClrStall+0xa4>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 f87f 	bl	80067c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da0c      	bge.n	8003702 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 020f 	and.w	r2, r3, #15
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3338      	adds	r3, #56	; 0x38
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e00c      	b.n	800371c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68f9      	ldr	r1, [r7, #12]
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fe9e 	bl	8006464 <USB_EPStopXfer>
 8003728:	4603      	mov	r3, r0
 800372a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800372c:	7afb      	ldrb	r3, [r7, #11]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b08a      	sub	sp, #40	; 0x28
 800373a:	af02      	add	r7, sp, #8
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3338      	adds	r3, #56	; 0x38
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d901      	bls.n	800376e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06c      	b.n	8003848 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	d902      	bls.n	800378a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3303      	adds	r3, #3
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003792:	e02b      	b.n	80037ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d902      	bls.n	80037b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3303      	adds	r3, #3
 80037b4:	089b      	lsrs	r3, r3, #2
 80037b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6919      	ldr	r1, [r3, #16]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4603      	mov	r3, r0
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f002 fef2 	bl	80065b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	441a      	add	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	441a      	add	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d809      	bhi.n	8003816 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800380a:	429a      	cmp	r2, r3
 800380c:	d203      	bcs.n	8003816 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1be      	bne.n	8003794 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	429a      	cmp	r2, r3
 8003820:	d811      	bhi.n	8003846 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	2201      	movs	r2, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	43db      	mvns	r3, r3
 800383c:	6939      	ldr	r1, [r7, #16]
 800383e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003842:	4013      	ands	r3, r2
 8003844:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	333c      	adds	r3, #60	; 0x3c
 8003868:	3304      	adds	r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d17b      	bne.n	800397e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4a61      	ldr	r2, [pc, #388]	; (8003a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	f240 80b9 	bls.w	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80b3 	beq.w	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b8:	6093      	str	r3, [r2, #8]
 80038ba:	e0a7      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	461a      	mov	r2, r3
 80038d4:	2320      	movs	r3, #32
 80038d6:	6093      	str	r3, [r2, #8]
 80038d8:	e098      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8093 	bne.w	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	; (8003a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d90f      	bls.n	800390e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	6093      	str	r3, [r2, #8]
 800390c:	e07e      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	0159      	lsls	r1, r3, #5
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	440b      	add	r3, r1
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d114      	bne.n	8003970 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003958:	461a      	mov	r2, r3
 800395a:	2101      	movs	r1, #1
 800395c:	f003 f8c2 	bl	8006ae4 <USB_EP0_OutStart>
 8003960:	e006      	b.n	8003970 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f005 fb80 	bl	800907c <HAL_PCD_DataOutStageCallback>
 800397c:	e046      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d124      	bne.n	80039d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	e032      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2320      	movs	r3, #32
 80039c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f005 fb57 	bl	800907c <HAL_PCD_DataOutStageCallback>
 80039ce:	e01d      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f8:	461a      	mov	r2, r3
 80039fa:	2100      	movs	r1, #0
 80039fc:	f003 f872 	bl	8006ae4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f005 fb38 	bl	800907c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	4f54300a 	.word	0x4f54300a
 8003a1c:	4f54310a 	.word	0x4f54310a

08003a20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d90e      	bls.n	8003a74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f005 faef 	bl	8009058 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d90c      	bls.n	8003a9c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a94:	461a      	mov	r2, r3
 8003a96:	2101      	movs	r1, #1
 8003a98:	f003 f824 	bl	8006ae4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	4f54300a 	.word	0x4f54300a

08003aac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d107      	bne.n	8003ada <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aca:	883b      	ldrh	r3, [r7, #0]
 8003acc:	0419      	lsls	r1, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad8:	e028      	b.n	8003b2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e00d      	b.n	8003b0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	3340      	adds	r3, #64	; 0x40
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	3301      	adds	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3ec      	bcc.n	8003aee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b14:	883b      	ldrh	r3, [r7, #0]
 8003b16:	0418      	lsls	r0, r3, #16
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4302      	orrs	r2, r0
 8003b24:	3340      	adds	r3, #64	; 0x40
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e267      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e242      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x74>
 8003bda:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a75      	ldr	r2, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6f      	ldr	r2, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6c      	ldr	r2, [pc, #432]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd ff12 	bl	8001a54 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd ff0e 	bl	8001a54 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e207      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b5b      	ldr	r3, [pc, #364]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fefe 	bl	8001a54 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fefa 	bl	8001a54 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1f3      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1c7      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4937      	ldr	r1, [pc, #220]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd feb3 	bl	8001a54 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fd feaf 	bl	8001a54 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1a8      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b28      	ldr	r3, [pc, #160]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4925      	ldr	r1, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fe92 	bl	8001a54 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fd fe8e 	bl	8001a54 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e187      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d036      	beq.n	8003dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fe72 	bl	8001a54 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd fe6e 	bl	8001a54 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e167      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x200>
 8003d92:	e01b      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fe5b 	bl	8001a54 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fd fe57 	bl	8001a54 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d907      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e150      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470000 	.word	0x42470000
 8003dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ea      	bne.n	8003da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dde:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b77      	ldr	r3, [pc, #476]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b74      	ldr	r3, [pc, #464]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a73      	ldr	r2, [pc, #460]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fd fe17 	bl	8001a54 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fd fe13 	bl	8001a54 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e10c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2ea>
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a63      	ldr	r2, [pc, #396]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x30c>
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a5e      	ldr	r2, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e80:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a57      	ldr	r2, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fdd8 	bl	8001a54 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fdd4 	bl	8001a54 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0cb      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x334>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fdc2 	bl	8001a54 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fd fdbe 	bl	8001a54 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0b5      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a1 	beq.w	8004054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d05c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d141      	bne.n	8003faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fd92 	bl	8001a54 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fd8e 	bl	8001a54 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e087      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	491b      	ldr	r1, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7fd fd67 	bl	8001a54 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fd fd63 	bl	8001a54 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e05c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x416>
 8003fa8:	e054      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fd50 	bl	8001a54 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd fd4c 	bl	8001a54 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e045      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x444>
 8003fd6:	e03d      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e038      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fd fc7e 	bl	8001a54 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fc7a 	bl	8001a54 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fbde 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	080098a4 	.word	0x080098a4
 8004228:	20000000 	.word	0x20000000
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b090      	sub	sp, #64	; 0x40
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
 800423c:	2300      	movs	r3, #0
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	2300      	movs	r3, #0
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80a1 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x16c>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e09b      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004268:	e09b      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800426e:	e098      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427a:	4b4d      	ldr	r3, [pc, #308]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	2200      	movs	r2, #0
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	627a      	str	r2, [r7, #36]	; 0x24
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004298:	2100      	movs	r1, #0
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800429c:	fb03 f201 	mul.w	r2, r3, r1
 80042a0:	2300      	movs	r3, #0
 80042a2:	fb00 f303 	mul.w	r3, r0, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042aa:	fba0 1202 	umull	r1, r2, r0, r2
 80042ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b0:	460a      	mov	r2, r1
 80042b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80042b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b6:	4413      	add	r3, r2
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	2200      	movs	r2, #0
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	61fa      	str	r2, [r7, #28]
 80042c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ca:	f7fc fafb 	bl	80008c4 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4613      	mov	r3, r2
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d6:	e053      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d8:	4b35      	ldr	r3, [pc, #212]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	2200      	movs	r2, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	617a      	str	r2, [r7, #20]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ea:	f04f 0b00 	mov.w	fp, #0
 80042ee:	4652      	mov	r2, sl
 80042f0:	465b      	mov	r3, fp
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	0159      	lsls	r1, r3, #5
 80042fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004300:	0150      	lsls	r0, r2, #5
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	ebb2 080a 	subs.w	r8, r2, sl
 800430a:	eb63 090b 	sbc.w	r9, r3, fp
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800431a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800431e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004322:	ebb2 0408 	subs.w	r4, r2, r8
 8004326:	eb63 0509 	sbc.w	r5, r3, r9
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	00eb      	lsls	r3, r5, #3
 8004334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004338:	00e2      	lsls	r2, r4, #3
 800433a:	4614      	mov	r4, r2
 800433c:	461d      	mov	r5, r3
 800433e:	eb14 030a 	adds.w	r3, r4, sl
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	eb45 030b 	adc.w	r3, r5, fp
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004356:	4629      	mov	r1, r5
 8004358:	028b      	lsls	r3, r1, #10
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004360:	4621      	mov	r1, r4
 8004362:	028a      	lsls	r2, r1, #10
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	2200      	movs	r2, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	60fa      	str	r2, [r7, #12]
 8004370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004374:	f7fc faa6 	bl	80008c4 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800439e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3740      	adds	r7, #64	; 0x40
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	017d7840 	.word	0x017d7840

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e041      	b.n	800446a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd f95a 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fc1e 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e03c      	b.n	8004506 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_TIM_Base_Start+0xa0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_TIM_Base_Start+0x5c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d013      	beq.n	80044d0 <HAL_TIM_Base_Start+0x5c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_TIM_Base_Start+0xa4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_Base_Start+0x5c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_TIM_Base_Start+0xa8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_Base_Start+0x5c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_TIM_Base_Start+0xac>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_Base_Start+0x5c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <HAL_TIM_Base_Start+0xb0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d010      	beq.n	8004504 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	e007      	b.n	8004504 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010000 	.word	0x40010000
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00
 8004524:	40014000 	.word	0x40014000

08004528 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e041      	b.n	80045be <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f839 	bl	80045c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fb74 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e041      	b.n	8004670 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f839 	bl	8004678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f000 fb1b 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start_IT+0x28>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e022      	b.n	80046fa <HAL_TIM_PWM_Start_IT+0x6e>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d109      	bne.n	80046ce <HAL_TIM_PWM_Start_IT+0x42>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e015      	b.n	80046fa <HAL_TIM_PWM_Start_IT+0x6e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d109      	bne.n	80046e8 <HAL_TIM_PWM_Start_IT+0x5c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e008      	b.n	80046fa <HAL_TIM_PWM_Start_IT+0x6e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0b3      	b.n	800486a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start_IT+0x86>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004710:	e013      	b.n	800473a <HAL_TIM_PWM_Start_IT+0xae>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start_IT+0x96>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	e00b      	b.n	800473a <HAL_TIM_PWM_Start_IT+0xae>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start_IT+0xa6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	e003      	b.n	800473a <HAL_TIM_PWM_Start_IT+0xae>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d841      	bhi.n	80047c4 <HAL_TIM_PWM_Start_IT+0x138>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	080047c5 	.word	0x080047c5
 8004750:	080047c5 	.word	0x080047c5
 8004754:	080047c5 	.word	0x080047c5
 8004758:	0800478f 	.word	0x0800478f
 800475c:	080047c5 	.word	0x080047c5
 8004760:	080047c5 	.word	0x080047c5
 8004764:	080047c5 	.word	0x080047c5
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047c5 	.word	0x080047c5
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047b3 	.word	0x080047b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0202 	orr.w	r2, r2, #2
 800478a:	60da      	str	r2, [r3, #12]
      break;
 800478c:	e01d      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0204 	orr.w	r2, r2, #4
 800479c:	60da      	str	r2, [r3, #12]
      break;
 800479e:	e014      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	60da      	str	r2, [r3, #12]
      break;
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0210 	orr.w	r2, r2, #16
 80047c0:	60da      	str	r2, [r3, #12]
      break;
 80047c2:	e002      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d14b      	bne.n	8004868 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fce1 	bl	80051a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a24      	ldr	r2, [pc, #144]	; (8004874 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d013      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d010      	beq.n	8004868 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	e007      	b.n	8004868 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e048      	b.n	8004938 <HAL_TIM_OC_ConfigChannel+0xb0>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d839      	bhi.n	8004928 <HAL_TIM_OC_ConfigChannel+0xa0>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004929 	.word	0x08004929
 80048c4:	08004929 	.word	0x08004929
 80048c8:	08004929 	.word	0x08004929
 80048cc:	080048ff 	.word	0x080048ff
 80048d0:	08004929 	.word	0x08004929
 80048d4:	08004929 	.word	0x08004929
 80048d8:	08004929 	.word	0x08004929
 80048dc:	0800490d 	.word	0x0800490d
 80048e0:	08004929 	.word	0x08004929
 80048e4:	08004929 	.word	0x08004929
 80048e8:	08004929 	.word	0x08004929
 80048ec:	0800491b 	.word	0x0800491b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fa2c 	bl	8004d54 <TIM_OC1_SetConfig>
      break;
 80048fc:	e017      	b.n	800492e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fa8b 	bl	8004e20 <TIM_OC2_SetConfig>
      break;
 800490a:	e010      	b.n	800492e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 faf0 	bl	8004ef8 <TIM_OC3_SetConfig>
      break;
 8004918:	e009      	b.n	800492e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb53 	bl	8004fcc <TIM_OC4_SetConfig>
      break;
 8004926:	e002      	b.n	800492e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75fb      	strb	r3, [r7, #23]
      break;
 800492c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004936:	7dfb      	ldrb	r3, [r7, #23]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800495a:	2302      	movs	r3, #2
 800495c:	e0ae      	b.n	8004abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b0c      	cmp	r3, #12
 800496a:	f200 809f 	bhi.w	8004aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	080049a9 	.word	0x080049a9
 8004978:	08004aad 	.word	0x08004aad
 800497c:	08004aad 	.word	0x08004aad
 8004980:	08004aad 	.word	0x08004aad
 8004984:	080049e9 	.word	0x080049e9
 8004988:	08004aad 	.word	0x08004aad
 800498c:	08004aad 	.word	0x08004aad
 8004990:	08004aad 	.word	0x08004aad
 8004994:	08004a2b 	.word	0x08004a2b
 8004998:	08004aad 	.word	0x08004aad
 800499c:	08004aad 	.word	0x08004aad
 80049a0:	08004aad 	.word	0x08004aad
 80049a4:	08004a6b 	.word	0x08004a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f9d0 	bl	8004d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0208 	orr.w	r2, r2, #8
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	619a      	str	r2, [r3, #24]
      break;
 80049e6:	e064      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fa16 	bl	8004e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6999      	ldr	r1, [r3, #24]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	619a      	str	r2, [r3, #24]
      break;
 8004a28:	e043      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa61 	bl	8004ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0208 	orr.w	r2, r2, #8
 8004a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0204 	bic.w	r2, r2, #4
 8004a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	61da      	str	r2, [r3, #28]
      break;
 8004a68:	e023      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 faab 	bl	8004fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	021a      	lsls	r2, r3, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	61da      	str	r2, [r3, #28]
      break;
 8004aaa:	e002      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0b4      	b.n	8004c4a <HAL_TIM_ConfigClockSource+0x186>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d03e      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0xd4>
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1e:	f200 8087 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	f000 8086 	beq.w	8004c36 <HAL_TIM_ConfigClockSource+0x172>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d87f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d01a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xa6>
 8004b34:	2b70      	cmp	r3, #112	; 0x70
 8004b36:	d87b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d050      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x11a>
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d877      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b50      	cmp	r3, #80	; 0x50
 8004b42:	d03c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0xfa>
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d873      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d058      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x13a>
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d86f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d064      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d86b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d060      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d867      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d05c      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d05a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	e062      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6899      	ldr	r1, [r3, #8]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f000 faf1 	bl	8005160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
      break;
 8004b96:	e04f      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f000 fada 	bl	8005160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e03c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fa4e 	bl	800506c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2150      	movs	r1, #80	; 0x50
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 faa7 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e02c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa6d 	bl	80050ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2160      	movs	r1, #96	; 0x60
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fa97 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e01c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 fa2e 	bl	800506c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fa87 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fa7e 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004c2e:	e003      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a34      	ldr	r2, [pc, #208]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a31      	ldr	r2, [pc, #196]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a30      	ldr	r2, [pc, #192]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2f      	ldr	r2, [pc, #188]	; (8004d44 <TIM_Base_SetConfig+0xf0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d017      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00f      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a20      	ldr	r2, [pc, #128]	; (8004d44 <TIM_Base_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <TIM_Base_SetConfig+0xf4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <TIM_Base_SetConfig+0xf8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <TIM_Base_SetConfig+0xfc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d103      	bne.n	8004d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	615a      	str	r2, [r3, #20]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 0302 	bic.w	r3, r3, #2
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <TIM_OC1_SetConfig+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10c      	bne.n	8004dca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0308 	bic.w	r3, r3, #8
 8004db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <TIM_OC1_SetConfig+0xc8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000

08004e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f023 0210 	bic.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0320 	bic.w	r3, r3, #32
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <TIM_OC2_SetConfig+0xd4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10d      	bne.n	8004e9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <TIM_OC2_SetConfig+0xd4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d113      	bne.n	8004ecc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000

08004ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <TIM_OC3_SetConfig+0xd0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10d      	bne.n	8004f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <TIM_OC3_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40010000 	.word	0x40010000

08004fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	031b      	lsls	r3, r3, #12
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_OC4_SetConfig+0x9c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d109      	bne.n	8005040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000

0800506c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 030a 	bic.w	r3, r3, #10
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b087      	sub	sp, #28
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f023 0210 	bic.w	r2, r3, #16
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	031b      	lsls	r3, r3, #12
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	f043 0307 	orr.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	431a      	orrs	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2201      	movs	r2, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	431a      	orrs	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e050      	b.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d013      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a16      	ldr	r2, [pc, #88]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000

080052c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e03d      	b.n	8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800536c:	b084      	sub	sp, #16
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	f107 001c 	add.w	r0, r7, #28
 800537a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	d122      	bne.n	80053ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d105      	bne.n	80053be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 fbee 	bl	8006ba0 <USB_CoreReset>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e01a      	b.n	8005400 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 fbe2 	bl	8006ba0 <USB_CoreReset>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
 80053f2:	e005      	b.n	8005400 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10b      	bne.n	800541e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f043 0206 	orr.w	r2, r3, #6
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542a:	b004      	add	sp, #16
 800542c:	4770      	bx	lr
	...

08005430 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d165      	bne.n	8005510 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a41      	ldr	r2, [pc, #260]	; (800554c <USB_SetTurnaroundTime+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d906      	bls.n	800545a <USB_SetTurnaroundTime+0x2a>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4a40      	ldr	r2, [pc, #256]	; (8005550 <USB_SetTurnaroundTime+0x120>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d202      	bcs.n	800545a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005454:	230f      	movs	r3, #15
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e062      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4a3c      	ldr	r2, [pc, #240]	; (8005550 <USB_SetTurnaroundTime+0x120>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d306      	bcc.n	8005470 <USB_SetTurnaroundTime+0x40>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4a3b      	ldr	r2, [pc, #236]	; (8005554 <USB_SetTurnaroundTime+0x124>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d202      	bcs.n	8005470 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800546a:	230e      	movs	r3, #14
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e057      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a38      	ldr	r2, [pc, #224]	; (8005554 <USB_SetTurnaroundTime+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d306      	bcc.n	8005486 <USB_SetTurnaroundTime+0x56>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4a37      	ldr	r2, [pc, #220]	; (8005558 <USB_SetTurnaroundTime+0x128>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d202      	bcs.n	8005486 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005480:	230d      	movs	r3, #13
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e04c      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a33      	ldr	r2, [pc, #204]	; (8005558 <USB_SetTurnaroundTime+0x128>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d306      	bcc.n	800549c <USB_SetTurnaroundTime+0x6c>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4a32      	ldr	r2, [pc, #200]	; (800555c <USB_SetTurnaroundTime+0x12c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d802      	bhi.n	800549c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005496:	230c      	movs	r3, #12
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e041      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a2f      	ldr	r2, [pc, #188]	; (800555c <USB_SetTurnaroundTime+0x12c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d906      	bls.n	80054b2 <USB_SetTurnaroundTime+0x82>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <USB_SetTurnaroundTime+0x130>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d802      	bhi.n	80054b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054ac:	230b      	movs	r3, #11
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e036      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a2a      	ldr	r2, [pc, #168]	; (8005560 <USB_SetTurnaroundTime+0x130>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d906      	bls.n	80054c8 <USB_SetTurnaroundTime+0x98>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a29      	ldr	r2, [pc, #164]	; (8005564 <USB_SetTurnaroundTime+0x134>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d802      	bhi.n	80054c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054c2:	230a      	movs	r3, #10
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e02b      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a26      	ldr	r2, [pc, #152]	; (8005564 <USB_SetTurnaroundTime+0x134>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d906      	bls.n	80054de <USB_SetTurnaroundTime+0xae>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a25      	ldr	r2, [pc, #148]	; (8005568 <USB_SetTurnaroundTime+0x138>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d202      	bcs.n	80054de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054d8:	2309      	movs	r3, #9
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e020      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a21      	ldr	r2, [pc, #132]	; (8005568 <USB_SetTurnaroundTime+0x138>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d306      	bcc.n	80054f4 <USB_SetTurnaroundTime+0xc4>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4a20      	ldr	r2, [pc, #128]	; (800556c <USB_SetTurnaroundTime+0x13c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d802      	bhi.n	80054f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054ee:	2308      	movs	r3, #8
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e015      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a1d      	ldr	r2, [pc, #116]	; (800556c <USB_SetTurnaroundTime+0x13c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d906      	bls.n	800550a <USB_SetTurnaroundTime+0xda>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <USB_SetTurnaroundTime+0x140>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d202      	bcs.n	800550a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005504:	2307      	movs	r3, #7
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e00a      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800550a:	2306      	movs	r3, #6
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e007      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005516:	2309      	movs	r3, #9
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e001      	b.n	8005520 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800551c:	2309      	movs	r3, #9
 800551e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	00d8acbf 	.word	0x00d8acbf
 8005550:	00e4e1c0 	.word	0x00e4e1c0
 8005554:	00f42400 	.word	0x00f42400
 8005558:	01067380 	.word	0x01067380
 800555c:	011a499f 	.word	0x011a499f
 8005560:	01312cff 	.word	0x01312cff
 8005564:	014ca43f 	.word	0x014ca43f
 8005568:	016e3600 	.word	0x016e3600
 800556c:	01a6ab1f 	.word	0x01a6ab1f
 8005570:	01e84800 	.word	0x01e84800

08005574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f043 0201 	orr.w	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d115      	bne.n	8005606 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055e6:	2001      	movs	r0, #1
 80055e8:	f7fc fa40 	bl	8001a6c <HAL_Delay>
      ms++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fa45 	bl	8006a82 <USB_GetMode>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d01e      	beq.n	800563c <USB_SetCurrentMode+0x84>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b31      	cmp	r3, #49	; 0x31
 8005602:	d9f0      	bls.n	80055e6 <USB_SetCurrentMode+0x2e>
 8005604:	e01a      	b.n	800563c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d115      	bne.n	8005638 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005618:	2001      	movs	r0, #1
 800561a:	f7fc fa27 	bl	8001a6c <HAL_Delay>
      ms++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 fa2c 	bl	8006a82 <USB_GetMode>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <USB_SetCurrentMode+0x84>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b31      	cmp	r3, #49	; 0x31
 8005634:	d9f0      	bls.n	8005618 <USB_SetCurrentMode+0x60>
 8005636:	e001      	b.n	800563c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e005      	b.n	8005648 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b32      	cmp	r3, #50	; 0x32
 8005640:	d101      	bne.n	8005646 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005650:	b084      	sub	sp, #16
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800565e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e009      	b.n	8005684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3340      	adds	r3, #64	; 0x40
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3301      	adds	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b0e      	cmp	r3, #14
 8005688:	d9f2      	bls.n	8005670 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11c      	bne.n	80056ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569e:	f043 0302 	orr.w	r3, r3, #2
 80056a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
 80056c8:	e00b      	b.n	80056e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	4619      	mov	r1, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	461a      	mov	r2, r3
 80056fe:	680b      	ldr	r3, [r1, #0]
 8005700:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10c      	bne.n	8005722 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800570e:	2100      	movs	r1, #0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f965 	bl	80059e0 <USB_SetDevSpeed>
 8005716:	e008      	b.n	800572a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005718:	2101      	movs	r1, #1
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f960 	bl	80059e0 <USB_SetDevSpeed>
 8005720:	e003      	b.n	800572a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005722:	2103      	movs	r1, #3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f95b 	bl	80059e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800572a:	2110      	movs	r1, #16
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8f3 	bl	8005918 <USB_FlushTxFifo>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f91f 	bl	8005980 <USB_FlushRxFifo>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	461a      	mov	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	461a      	mov	r2, r3
 800576c:	2300      	movs	r3, #0
 800576e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e043      	b.n	80057fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578c:	d118      	bne.n	80057c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e013      	b.n	80057d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	461a      	mov	r2, r3
 80057b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e008      	b.n	80057d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	3301      	adds	r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	429a      	cmp	r2, r3
 8005804:	d3b7      	bcc.n	8005776 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e043      	b.n	8005894 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005822:	d118      	bne.n	8005856 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	461a      	mov	r2, r3
 8005838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e013      	b.n	8005868 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e008      	b.n	8005868 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	461a      	mov	r2, r3
 8005888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800588c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	429a      	cmp	r2, r3
 800589a:	d3b7      	bcc.n	800580c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f043 0210 	orr.w	r2, r3, #16
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <USB_DevInit+0x2c4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d107      	bne.n	8005904 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr
 8005914:	803c3800 	.word	0x803c3800

08005918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a13      	ldr	r2, [pc, #76]	; (800597c <USB_FlushTxFifo+0x64>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d901      	bls.n	8005938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e01b      	b.n	8005970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	daf2      	bge.n	8005926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	019b      	lsls	r3, r3, #6
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <USB_FlushTxFifo+0x64>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e006      	b.n	8005970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b20      	cmp	r3, #32
 800596c:	d0f0      	beq.n	8005950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	00030d40 	.word	0x00030d40

08005980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a11      	ldr	r2, [pc, #68]	; (80059dc <USB_FlushRxFifo+0x5c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e018      	b.n	80059d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	daf2      	bge.n	800598c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2210      	movs	r2, #16
 80059ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4a08      	ldr	r2, [pc, #32]	; (80059dc <USB_FlushRxFifo+0x5c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e006      	b.n	80059d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d0f0      	beq.n	80059b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	00030d40 	.word	0x00030d40

080059e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0306 	and.w	r3, r3, #6
 8005a2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
 8005a36:	e00a      	b.n	8005a4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d002      	beq.n	8005a44 <USB_GetDevSpeed+0x32>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b06      	cmp	r3, #6
 8005a42:	d102      	bne.n	8005a4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a44:	2302      	movs	r3, #2
 8005a46:	75fb      	strb	r3, [r7, #23]
 8005a48:	e001      	b.n	8005a4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a4a:	230f      	movs	r3, #15
 8005a4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d13a      	bne.n	8005aee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d155      	bne.n	8005b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	791b      	ldrb	r3, [r3, #4]
 8005aca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005acc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	059b      	lsls	r3, r3, #22
 8005ad2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e036      	b.n	8005b5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	2101      	movs	r1, #1
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11a      	bne.n	8005b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	791b      	ldrb	r3, [r3, #4]
 8005b40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b42:	430b      	orrs	r3, r1
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d161      	bne.n	8005c4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9e:	d11f      	bne.n	8005be0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c00:	4013      	ands	r3, r2
 8005c02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c24:	4013      	ands	r3, r2
 8005c26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	0159      	lsls	r1, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	4619      	mov	r1, r3
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <USB_DeactivateEndpoint+0x1b0>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]
 8005c4a:	e060      	b.n	8005d0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c62:	d11f      	bne.n	8005ca4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	2101      	movs	r1, #1
 8005cda:	fa01 f303 	lsl.w	r3, r1, r3
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	0159      	lsls	r1, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	440b      	add	r3, r1
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	4619      	mov	r1, r3
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <USB_DeactivateEndpoint+0x1b4>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	ec337800 	.word	0xec337800
 8005d20:	eff37800 	.word	0xeff37800

08005d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 815c 	bne.w	8005ffe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d132      	bne.n	8005db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	0cdb      	lsrs	r3, r3, #19
 8005dae:	04db      	lsls	r3, r3, #19
 8005db0:	6113      	str	r3, [r2, #16]
 8005db2:	e074      	b.n	8005e9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	0cdb      	lsrs	r3, r3, #19
 8005dd0:	04db      	lsls	r3, r3, #19
 8005dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	440b      	add	r3, r1
 8005e10:	1e59      	subs	r1, r3, #1
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e1c:	4b9d      	ldr	r3, [pc, #628]	; (8006094 <USB_EPStartXfer+0x370>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	0148      	lsls	r0, r1, #5
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	4401      	add	r1, r0
 8005e28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	0148      	lsls	r0, r1, #5
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	4401      	add	r1, r0
 8005e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e52:	4313      	orrs	r3, r2
 8005e54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d11f      	bne.n	8005e9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d14b      	bne.n	8005f3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d128      	bne.n	8005f1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d110      	bne.n	8005efa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e00f      	b.n	8005f1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e133      	b.n	80061a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	791b      	ldrb	r3, [r3, #4]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d015      	beq.n	8005f90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 811b 	beq.w	80061a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	2101      	movs	r1, #1
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f8e:	e109      	b.n	80061a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d110      	bne.n	8005fc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e00f      	b.n	8005fe2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6919      	ldr	r1, [r3, #16]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	b298      	uxth	r0, r3
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fade 	bl	80065b8 <USB_WritePacket>
 8005ffc:	e0d2      	b.n	80061a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006018:	0cdb      	lsrs	r3, r3, #19
 800601a:	04db      	lsls	r3, r3, #19
 800601c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800603c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d126      	bne.n	8006098 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	4401      	add	r1, r0
 8006068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800608e:	6113      	str	r3, [r2, #16]
 8006090:	e03a      	b.n	8006108 <USB_EPStartXfer+0x3e4>
 8006092:	bf00      	nop
 8006094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	1e5a      	subs	r2, r3, #1
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	8afa      	ldrh	r2, [r7, #22]
 80060b4:	fb03 f202 	mul.w	r2, r3, r2
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	8afb      	ldrh	r3, [r7, #22]
 80060cc:	04d9      	lsls	r1, r3, #19
 80060ce:	4b38      	ldr	r3, [pc, #224]	; (80061b0 <USB_EPStartXfer+0x48c>)
 80060d0:	400b      	ands	r3, r1
 80060d2:	69b9      	ldr	r1, [r7, #24]
 80060d4:	0148      	lsls	r0, r1, #5
 80060d6:	69f9      	ldr	r1, [r7, #28]
 80060d8:	4401      	add	r1, r0
 80060da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060de:	4313      	orrs	r3, r2
 80060e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f8:	69b9      	ldr	r1, [r7, #24]
 80060fa:	0148      	lsls	r0, r1, #5
 80060fc:	69f9      	ldr	r1, [r7, #28]
 80060fe:	4401      	add	r1, r0
 8006100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006104:	4313      	orrs	r3, r2
 8006106:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d10d      	bne.n	800612a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6919      	ldr	r1, [r3, #16]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	460a      	mov	r2, r1
 8006128:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	791b      	ldrb	r3, [r3, #4]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d128      	bne.n	8006184 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d110      	bne.n	8006164 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e00f      	b.n	8006184 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006182:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	440a      	add	r2, r1
 800619a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	1ff80000 	.word	0x1ff80000

080061b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	f040 80ce 	bne.w	8006372 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d132      	bne.n	8006244 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	0cdb      	lsrs	r3, r3, #19
 800623e:	04db      	lsls	r3, r3, #19
 8006240:	6113      	str	r3, [r2, #16]
 8006242:	e04e      	b.n	80062e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625e:	0cdb      	lsrs	r3, r3, #19
 8006260:	04db      	lsls	r3, r3, #19
 8006262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006286:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	429a      	cmp	r2, r3
 8006292:	d903      	bls.n	800629c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d2:	6939      	ldr	r1, [r7, #16]
 80062d4:	0148      	lsls	r0, r1, #5
 80062d6:	6979      	ldr	r1, [r7, #20]
 80062d8:	4401      	add	r1, r0
 80062da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062de:	4313      	orrs	r3, r2
 80062e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d11e      	bne.n	8006326 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e097      	b.n	8006456 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006344:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8083 	beq.w	8006456 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f303 	lsl.w	r3, r1, r3
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800636c:	4313      	orrs	r3, r2
 800636e:	634b      	str	r3, [r1, #52]	; 0x34
 8006370:	e071      	b.n	8006456 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638c:	0cdb      	lsrs	r3, r3, #19
 800638e:	04db      	lsls	r3, r3, #19
 8006390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006404:	6939      	ldr	r1, [r7, #16]
 8006406:	0148      	lsls	r0, r1, #5
 8006408:	6979      	ldr	r1, [r7, #20]
 800640a:	4401      	add	r1, r0
 800640c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006410:	4313      	orrs	r3, r2
 8006412:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10d      	bne.n	8006436 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6919      	ldr	r1, [r3, #16]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	460a      	mov	r2, r1
 8006434:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d14a      	bne.n	8006518 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800649a:	f040 8086 	bne.w	80065aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d902      	bls.n	80064fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
          break;
 80064fa:	e056      	b.n	80065aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006514:	d0e7      	beq.n	80064e6 <USB_EPStopXfer+0x82>
 8006516:	e048      	b.n	80065aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006530:	d13b      	bne.n	80065aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	7812      	ldrb	r2, [r2, #0]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006554:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f242 7210 	movw	r2, #10000	; 0x2710
 8006586:	4293      	cmp	r3, r2
 8006588:	d902      	bls.n	8006590 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
          break;
 800658e:	e00c      	b.n	80065aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a8:	d0e7      	beq.n	800657a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b089      	sub	sp, #36	; 0x24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4611      	mov	r1, r2
 80065c4:	461a      	mov	r2, r3
 80065c6:	460b      	mov	r3, r1
 80065c8:	71fb      	strb	r3, [r7, #7]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d123      	bne.n	8006626 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065de:	88bb      	ldrh	r3, [r7, #4]
 80065e0:	3303      	adds	r3, #3
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	e018      	b.n	800661e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	031a      	lsls	r2, r3, #12
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f8:	461a      	mov	r2, r3
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	3301      	adds	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3301      	adds	r3, #1
 800660a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	3301      	adds	r3, #1
 8006610:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	3301      	adds	r3, #1
 8006616:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	3301      	adds	r3, #1
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	429a      	cmp	r2, r3
 8006624:	d3e2      	bcc.n	80065ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3724      	adds	r7, #36	; 0x24
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006634:	b480      	push	{r7}
 8006636:	b08b      	sub	sp, #44	; 0x2c
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	089b      	lsrs	r3, r3, #2
 800664e:	b29b      	uxth	r3, r3
 8006650:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800665a:	2300      	movs	r3, #0
 800665c:	623b      	str	r3, [r7, #32]
 800665e:	e014      	b.n	800668a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	601a      	str	r2, [r3, #0]
    pDest++;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	3301      	adds	r3, #1
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	3301      	adds	r3, #1
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	3301      	adds	r3, #1
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	3301      	adds	r3, #1
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	3301      	adds	r3, #1
 8006688:	623b      	str	r3, [r7, #32]
 800668a:	6a3a      	ldr	r2, [r7, #32]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	429a      	cmp	r2, r3
 8006690:	d3e6      	bcc.n	8006660 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006692:	8bfb      	ldrh	r3, [r7, #30]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01e      	beq.n	80066d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a2:	461a      	mov	r2, r3
 80066a4:	f107 0310 	add.w	r3, r7, #16
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	fa22 f303 	lsr.w	r3, r2, r3
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	701a      	strb	r2, [r3, #0]
      i++;
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	3301      	adds	r3, #1
 80066c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	3301      	adds	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066ca:	8bfb      	ldrh	r3, [r7, #30]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066d0:	8bfb      	ldrh	r3, [r7, #30]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1ea      	bne.n	80066ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066d8:	4618      	mov	r0, r3
 80066da:	372c      	adds	r7, #44	; 0x2c
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d12c      	bne.n	800675a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	db12      	blt.n	8006738 <USB_EPSetStall+0x54>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00f      	beq.n	8006738 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006736:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	e02b      	b.n	80067b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	db12      	blt.n	8006792 <USB_EPSetStall+0xae>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00f      	beq.n	8006792 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006790:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d128      	bne.n	800682e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	791b      	ldrb	r3, [r3, #4]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d003      	beq.n	800680c <USB_EPClearStall+0x4c>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	791b      	ldrb	r3, [r3, #4]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d138      	bne.n	800687e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e027      	b.n	800687e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800684c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	791b      	ldrb	r3, [r3, #4]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d003      	beq.n	800685e <USB_EPClearStall+0x9e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	791b      	ldrb	r3, [r3, #4]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d10f      	bne.n	800687e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	440a      	add	r2, r1
 8006874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068c0:	68f9      	ldr	r1, [r7, #12]
 80068c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006906:	f023 0302 	bic.w	r3, r3, #2
 800690a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800691a:	b480      	push	{r7}
 800691c:	b085      	sub	sp, #20
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006934:	f023 0303 	bic.w	r3, r3, #3
 8006938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006948:	f043 0302 	orr.w	r3, r3, #2
 800694c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006974:	68fb      	ldr	r3, [r7, #12]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	0c1b      	lsrs	r3, r3, #16
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	b29b      	uxth	r3, r3
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a18:	68bb      	ldr	r3, [r7, #8]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b087      	sub	sp, #28
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	fa22 f303 	lsr.w	r3, r2, r3
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4013      	ands	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a74:	68bb      	ldr	r3, [r7, #8]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006abc:	f023 0307 	bic.w	r3, r3, #7
 8006ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	460b      	mov	r3, r1
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	333c      	adds	r3, #60	; 0x3c
 8006afa:	3304      	adds	r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <USB_EP0_OutStart+0xb8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d90a      	bls.n	8006b1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b18:	d101      	bne.n	8006b1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e037      	b.n	8006b8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	461a      	mov	r2, r3
 8006b26:	2300      	movs	r3, #0
 8006b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4c:	f043 0318 	orr.w	r3, r3, #24
 8006b50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b66:	7afb      	ldrb	r3, [r7, #11]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10f      	bne.n	8006b8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	4f54300a 	.word	0x4f54300a

08006ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <USB_CoreReset+0x64>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e01b      	b.n	8006bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	daf2      	bge.n	8006bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f043 0201 	orr.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <USB_CoreReset+0x64>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e006      	b.n	8006bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d0f0      	beq.n	8006bd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	00030d40 	.word	0x00030d40

08006c08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c18:	f002 fc90 	bl	800953c <USBD_static_malloc>
 8006c1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32b0      	adds	r2, #176	; 0xb0
 8006c2e:	2100      	movs	r1, #0
 8006c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c34:	2302      	movs	r3, #2
 8006c36:	e0d4      	b.n	8006de2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c38:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f002 fcfa 	bl	8009638 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32b0      	adds	r2, #176	; 0xb0
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	32b0      	adds	r2, #176	; 0xb0
 8006c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7c1b      	ldrb	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d138      	bne.n	8006ce2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c70:	4b5e      	ldr	r3, [pc, #376]	; (8006dec <USBD_CDC_Init+0x1e4>)
 8006c72:	7819      	ldrb	r1, [r3, #0]
 8006c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c78:	2202      	movs	r2, #2
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f002 fb3b 	bl	80092f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c80:	4b5a      	ldr	r3, [pc, #360]	; (8006dec <USBD_CDC_Init+0x1e4>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f003 020f 	and.w	r2, r3, #15
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3324      	adds	r3, #36	; 0x24
 8006c96:	2201      	movs	r2, #1
 8006c98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c9a:	4b55      	ldr	r3, [pc, #340]	; (8006df0 <USBD_CDC_Init+0x1e8>)
 8006c9c:	7819      	ldrb	r1, [r3, #0]
 8006c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f002 fb26 	bl	80092f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006caa:	4b51      	ldr	r3, [pc, #324]	; (8006df0 <USBD_CDC_Init+0x1e8>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	f003 020f 	and.w	r2, r3, #15
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006cc6:	4b4b      	ldr	r3, [pc, #300]	; (8006df4 <USBD_CDC_Init+0x1ec>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	f003 020f 	and.w	r2, r3, #15
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	3326      	adds	r3, #38	; 0x26
 8006cdc:	2210      	movs	r2, #16
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	e035      	b.n	8006d4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ce2:	4b42      	ldr	r3, [pc, #264]	; (8006dec <USBD_CDC_Init+0x1e4>)
 8006ce4:	7819      	ldrb	r1, [r3, #0]
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	2202      	movs	r2, #2
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f002 fb03 	bl	80092f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cf0:	4b3e      	ldr	r3, [pc, #248]	; (8006dec <USBD_CDC_Init+0x1e4>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	3324      	adds	r3, #36	; 0x24
 8006d06:	2201      	movs	r2, #1
 8006d08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d0a:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <USBD_CDC_Init+0x1e8>)
 8006d0c:	7819      	ldrb	r1, [r3, #0]
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	2202      	movs	r2, #2
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f002 faef 	bl	80092f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <USBD_CDC_Init+0x1e8>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 020f 	and.w	r2, r3, #15
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d30:	2201      	movs	r2, #1
 8006d32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d34:	4b2f      	ldr	r3, [pc, #188]	; (8006df4 <USBD_CDC_Init+0x1ec>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f003 020f 	and.w	r2, r3, #15
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3326      	adds	r3, #38	; 0x26
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d4e:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <USBD_CDC_Init+0x1ec>)
 8006d50:	7819      	ldrb	r1, [r3, #0]
 8006d52:	2308      	movs	r3, #8
 8006d54:	2203      	movs	r2, #3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 facd 	bl	80092f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d5c:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <USBD_CDC_Init+0x1ec>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	2201      	movs	r2, #1
 8006d74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	33b0      	adds	r3, #176	; 0xb0
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006dac:	2302      	movs	r3, #2
 8006dae:	e018      	b.n	8006de2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	7c1b      	ldrb	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <USBD_CDC_Init+0x1e8>)
 8006dba:	7819      	ldrb	r1, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f002 fb84 	bl	80094d4 <USBD_LL_PrepareReceive>
 8006dcc:	e008      	b.n	8006de0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <USBD_CDC_Init+0x1e8>)
 8006dd0:	7819      	ldrb	r1, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 fb7a 	bl	80094d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000093 	.word	0x20000093
 8006df0:	20000094 	.word	0x20000094
 8006df4:	20000095 	.word	0x20000095

08006df8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e04:	4b3a      	ldr	r3, [pc, #232]	; (8006ef0 <USBD_CDC_DeInit+0xf8>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f002 fa99 	bl	8009342 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e10:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <USBD_CDC_DeInit+0xf8>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	2200      	movs	r2, #0
 8006e28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e2a:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <USBD_CDC_DeInit+0xfc>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f002 fa86 	bl	8009342 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e36:	4b2f      	ldr	r3, [pc, #188]	; (8006ef4 <USBD_CDC_DeInit+0xfc>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e4e:	2200      	movs	r2, #0
 8006e50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e52:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <USBD_CDC_DeInit+0x100>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f002 fa72 	bl	8009342 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e5e:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <USBD_CDC_DeInit+0x100>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 020f 	and.w	r2, r3, #15
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	2200      	movs	r2, #0
 8006e76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e78:	4b1f      	ldr	r3, [pc, #124]	; (8006ef8 <USBD_CDC_DeInit+0x100>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	3326      	adds	r3, #38	; 0x26
 8006e8e:	2200      	movs	r2, #0
 8006e90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	32b0      	adds	r2, #176	; 0xb0
 8006e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01f      	beq.n	8006ee4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	33b0      	adds	r3, #176	; 0xb0
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	32b0      	adds	r2, #176	; 0xb0
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f002 fb46 	bl	8009558 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	32b0      	adds	r2, #176	; 0xb0
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000093 	.word	0x20000093
 8006ef4:	20000094 	.word	0x20000094
 8006ef8:	20000095 	.word	0x20000095

08006efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	32b0      	adds	r2, #176	; 0xb0
 8006f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e0bf      	b.n	80070ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d050      	beq.n	8006fda <USBD_CDC_Setup+0xde>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	f040 80af 	bne.w	800709c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	88db      	ldrh	r3, [r3, #6]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03a      	beq.n	8006fbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	b25b      	sxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da1b      	bge.n	8006f88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	33b0      	adds	r3, #176	; 0xb0
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	88d2      	ldrh	r2, [r2, #6]
 8006f6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b07      	cmp	r3, #7
 8006f74:	bf28      	it	cs
 8006f76:	2307      	movcs	r3, #7
 8006f78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	89fa      	ldrh	r2, [r7, #14]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fd89 	bl	8008a98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f86:	e090      	b.n	80070aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	785a      	ldrb	r2, [r3, #1]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	88db      	ldrh	r3, [r3, #6]
 8006f96:	2b3f      	cmp	r3, #63	; 0x3f
 8006f98:	d803      	bhi.n	8006fa2 <USBD_CDC_Setup+0xa6>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	e000      	b.n	8006fa4 <USBD_CDC_Setup+0xa8>
 8006fa2:	2240      	movs	r2, #64	; 0x40
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006faa:	6939      	ldr	r1, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 fd9b 	bl	8008af0 <USBD_CtlPrepareRx>
      break;
 8006fba:	e076      	b.n	80070aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	33b0      	adds	r3, #176	; 0xb0
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	7850      	ldrb	r0, [r2, #1]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	4798      	blx	r3
      break;
 8006fd8:	e067      	b.n	80070aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b0b      	cmp	r3, #11
 8006fe0:	d851      	bhi.n	8007086 <USBD_CDC_Setup+0x18a>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <USBD_CDC_Setup+0xec>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007019 	.word	0x08007019
 8006fec:	08007095 	.word	0x08007095
 8006ff0:	08007087 	.word	0x08007087
 8006ff4:	08007087 	.word	0x08007087
 8006ff8:	08007087 	.word	0x08007087
 8006ffc:	08007087 	.word	0x08007087
 8007000:	08007087 	.word	0x08007087
 8007004:	08007087 	.word	0x08007087
 8007008:	08007087 	.word	0x08007087
 800700c:	08007087 	.word	0x08007087
 8007010:	08007043 	.word	0x08007043
 8007014:	0800706d 	.word	0x0800706d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d107      	bne.n	8007034 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007024:	f107 030a 	add.w	r3, r7, #10
 8007028:	2202      	movs	r2, #2
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fd33 	bl	8008a98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007032:	e032      	b.n	800709a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fcbd 	bl	80089b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800703c:	2303      	movs	r3, #3
 800703e:	75fb      	strb	r3, [r7, #23]
          break;
 8007040:	e02b      	b.n	800709a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b03      	cmp	r3, #3
 800704c:	d107      	bne.n	800705e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800704e:	f107 030d 	add.w	r3, r7, #13
 8007052:	2201      	movs	r2, #1
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fd1e 	bl	8008a98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800705c:	e01d      	b.n	800709a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fca8 	bl	80089b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007066:	2303      	movs	r3, #3
 8007068:	75fb      	strb	r3, [r7, #23]
          break;
 800706a:	e016      	b.n	800709a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b03      	cmp	r3, #3
 8007076:	d00f      	beq.n	8007098 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fc9b 	bl	80089b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007084:	e008      	b.n	8007098 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fc94 	bl	80089b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	75fb      	strb	r3, [r7, #23]
          break;
 8007092:	e002      	b.n	800709a <USBD_CDC_Setup+0x19e>
          break;
 8007094:	bf00      	nop
 8007096:	e008      	b.n	80070aa <USBD_CDC_Setup+0x1ae>
          break;
 8007098:	bf00      	nop
      }
      break;
 800709a:	e006      	b.n	80070aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fc89 	bl	80089b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	32b0      	adds	r2, #176	; 0xb0
 80070d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80070da:	2303      	movs	r3, #3
 80070dc:	e065      	b.n	80071aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	32b0      	adds	r2, #176	; 0xb0
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	3318      	adds	r3, #24
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02f      	beq.n	8007168 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	f003 020f 	and.w	r2, r3, #15
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	3318      	adds	r3, #24
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	f003 010f 	and.w	r1, r3, #15
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	460b      	mov	r3, r1
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4403      	add	r3, r0
 8007130:	3348      	adds	r3, #72	; 0x48
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	fbb2 f1f3 	udiv	r1, r2, r3
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800713e:	2b00      	cmp	r3, #0
 8007140:	d112      	bne.n	8007168 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	f003 020f 	and.w	r2, r3, #15
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	3318      	adds	r3, #24
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800715a:	78f9      	ldrb	r1, [r7, #3]
 800715c:	2300      	movs	r3, #0
 800715e:	2200      	movs	r2, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 f996 	bl	8009492 <USBD_LL_Transmit>
 8007166:	e01f      	b.n	80071a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	33b0      	adds	r3, #176	; 0xb0
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d010      	beq.n	80071a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	33b0      	adds	r3, #176	; 0xb0
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	32b0      	adds	r2, #176	; 0xb0
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	32b0      	adds	r2, #176	; 0xb0
 80071d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e01a      	b.n	800721a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f002 f994 	bl	8009516 <USBD_LL_GetRxDataSize>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	33b0      	adds	r3, #176	; 0xb0
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007214:	4611      	mov	r1, r2
 8007216:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	32b0      	adds	r2, #176	; 0xb0
 8007234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007238:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	e025      	b.n	8007290 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	33b0      	adds	r3, #176	; 0xb0
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01a      	beq.n	800728e <USBD_CDC_EP0_RxReady+0x6c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800725e:	2bff      	cmp	r3, #255	; 0xff
 8007260:	d015      	beq.n	800728e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	33b0      	adds	r3, #176	; 0xb0
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800727a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007282:	b292      	uxth	r2, r2
 8007284:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	22ff      	movs	r2, #255	; 0xff
 800728a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072a0:	2182      	movs	r1, #130	; 0x82
 80072a2:	4818      	ldr	r0, [pc, #96]	; (8007304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072a4:	f000 fd4f 	bl	8007d46 <USBD_GetEpDesc>
 80072a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072aa:	2101      	movs	r1, #1
 80072ac:	4815      	ldr	r0, [pc, #84]	; (8007304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072ae:	f000 fd4a 	bl	8007d46 <USBD_GetEpDesc>
 80072b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072b4:	2181      	movs	r1, #129	; 0x81
 80072b6:	4813      	ldr	r0, [pc, #76]	; (8007304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072b8:	f000 fd45 	bl	8007d46 <USBD_GetEpDesc>
 80072bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2210      	movs	r2, #16
 80072c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d006      	beq.n	80072de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d8:	711a      	strb	r2, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ec:	711a      	strb	r2, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2243      	movs	r2, #67	; 0x43
 80072f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072f8:	4b02      	ldr	r3, [pc, #8]	; (8007304 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000050 	.word	0x20000050

08007308 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007310:	2182      	movs	r1, #130	; 0x82
 8007312:	4818      	ldr	r0, [pc, #96]	; (8007374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007314:	f000 fd17 	bl	8007d46 <USBD_GetEpDesc>
 8007318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800731a:	2101      	movs	r1, #1
 800731c:	4815      	ldr	r0, [pc, #84]	; (8007374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800731e:	f000 fd12 	bl	8007d46 <USBD_GetEpDesc>
 8007322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007324:	2181      	movs	r1, #129	; 0x81
 8007326:	4813      	ldr	r0, [pc, #76]	; (8007374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007328:	f000 fd0d 	bl	8007d46 <USBD_GetEpDesc>
 800732c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2210      	movs	r2, #16
 8007338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2200      	movs	r2, #0
 8007344:	711a      	strb	r2, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f042 0202 	orr.w	r2, r2, #2
 800734c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	711a      	strb	r2, [r3, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f042 0202 	orr.w	r2, r2, #2
 8007360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2243      	movs	r2, #67	; 0x43
 8007366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000050 	.word	0x20000050

08007378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007380:	2182      	movs	r1, #130	; 0x82
 8007382:	4818      	ldr	r0, [pc, #96]	; (80073e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007384:	f000 fcdf 	bl	8007d46 <USBD_GetEpDesc>
 8007388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800738a:	2101      	movs	r1, #1
 800738c:	4815      	ldr	r0, [pc, #84]	; (80073e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800738e:	f000 fcda 	bl	8007d46 <USBD_GetEpDesc>
 8007392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007394:	2181      	movs	r1, #129	; 0x81
 8007396:	4813      	ldr	r0, [pc, #76]	; (80073e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007398:	f000 fcd5 	bl	8007d46 <USBD_GetEpDesc>
 800739c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2210      	movs	r2, #16
 80073a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b8:	711a      	strb	r2, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073cc:	711a      	strb	r2, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2243      	movs	r2, #67	; 0x43
 80073d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073d8:	4b02      	ldr	r3, [pc, #8]	; (80073e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000050 	.word	0x20000050

080073e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220a      	movs	r2, #10
 80073f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073f6:	4b03      	ldr	r3, [pc, #12]	; (8007404 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	2000000c 	.word	0x2000000c

08007408 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007418:	2303      	movs	r3, #3
 800741a:	e009      	b.n	8007430 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	33b0      	adds	r3, #176	; 0xb0
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	32b0      	adds	r2, #176	; 0xb0
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800745e:	2303      	movs	r3, #3
 8007460:	e008      	b.n	8007474 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	32b0      	adds	r2, #176	; 0xb0
 8007494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e004      	b.n	80074ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32b0      	adds	r2, #176	; 0xb0
 80074ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	32b0      	adds	r2, #176	; 0xb0
 80074e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e025      	b.n	800753a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11f      	bne.n	8007538 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <USBD_CDC_TransmitPacket+0x88>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4403      	add	r3, r0
 800751a:	3318      	adds	r3, #24
 800751c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <USBD_CDC_TransmitPacket+0x88>)
 8007520:	7819      	ldrb	r1, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 ffaf 	bl	8009492 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000093 	.word	0x20000093

08007548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	32b0      	adds	r2, #176	; 0xb0
 800755a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32b0      	adds	r2, #176	; 0xb0
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007572:	2303      	movs	r3, #3
 8007574:	e018      	b.n	80075a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	7c1b      	ldrb	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <USBD_CDC_ReceivePacket+0x68>)
 8007580:	7819      	ldrb	r1, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 ffa1 	bl	80094d4 <USBD_LL_PrepareReceive>
 8007592:	e008      	b.n	80075a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <USBD_CDC_ReceivePacket+0x68>)
 8007596:	7819      	ldrb	r1, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 ff97 	bl	80094d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000094 	.word	0x20000094

080075b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e01f      	b.n	800760c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	79fa      	ldrb	r2, [r7, #7]
 80075fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f001 fe11 	bl	8009228 <USBD_LL_Init>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]

  return ret;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007628:	2303      	movs	r3, #3
 800762a:	e025      	b.n	8007678 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	32ae      	adds	r2, #174	; 0xae
 800763e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00f      	beq.n	8007668 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	32ae      	adds	r2, #174	; 0xae
 8007652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f107 020e 	add.w	r2, r7, #14
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	4602      	mov	r2, r0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 fe19 	bl	80092c0 <USBD_LL_Start>
 800768e:	4603      	mov	r3, r0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4611      	mov	r1, r2
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f001 f908 	bl	8008942 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007740:	461a      	mov	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	2b02      	cmp	r3, #2
 8007754:	d01a      	beq.n	800778c <USBD_LL_SetupStage+0x72>
 8007756:	2b02      	cmp	r3, #2
 8007758:	d822      	bhi.n	80077a0 <USBD_LL_SetupStage+0x86>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <USBD_LL_SetupStage+0x4a>
 800775e:	2b01      	cmp	r3, #1
 8007760:	d00a      	beq.n	8007778 <USBD_LL_SetupStage+0x5e>
 8007762:	e01d      	b.n	80077a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fb5f 	bl	8007e30 <USBD_StdDevReq>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]
      break;
 8007776:	e020      	b.n	80077ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fbc7 	bl	8007f14 <USBD_StdItfReq>
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
      break;
 800778a:	e016      	b.n	80077ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc29 	bl	8007fec <USBD_StdEPReq>
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]
      break;
 800779e:	e00c      	b.n	80077ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 fde6 	bl	8009380 <USBD_LL_StallEP>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	bf00      	nop
  }

  return ret;
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	460b      	mov	r3, r1
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d16e      	bne.n	80078ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	f040 8098 	bne.w	8007920 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d913      	bls.n	8007824 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	1ad2      	subs	r2, r2, r3
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4293      	cmp	r3, r2
 8007814:	bf28      	it	cs
 8007816:	4613      	movcs	r3, r2
 8007818:	461a      	mov	r2, r3
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f001 f984 	bl	8008b2a <USBD_CtlContinueRx>
 8007822:	e07d      	b.n	8007920 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2b02      	cmp	r3, #2
 8007830:	d014      	beq.n	800785c <USBD_LL_DataOutStage+0x98>
 8007832:	2b02      	cmp	r3, #2
 8007834:	d81d      	bhi.n	8007872 <USBD_LL_DataOutStage+0xae>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <USBD_LL_DataOutStage+0x7c>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d003      	beq.n	8007846 <USBD_LL_DataOutStage+0x82>
 800783e:	e018      	b.n	8007872 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	75bb      	strb	r3, [r7, #22]
            break;
 8007844:	e018      	b.n	8007878 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800784c:	b2db      	uxtb	r3, r3
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fa5e 	bl	8007d12 <USBD_CoreFindIF>
 8007856:	4603      	mov	r3, r0
 8007858:	75bb      	strb	r3, [r7, #22]
            break;
 800785a:	e00d      	b.n	8007878 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007862:	b2db      	uxtb	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fa60 	bl	8007d2c <USBD_CoreFindEP>
 800786c:	4603      	mov	r3, r0
 800786e:	75bb      	strb	r3, [r7, #22]
            break;
 8007870:	e002      	b.n	8007878 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	75bb      	strb	r3, [r7, #22]
            break;
 8007876:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007878:	7dbb      	ldrb	r3, [r7, #22]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d119      	bne.n	80078b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b03      	cmp	r3, #3
 8007888:	d113      	bne.n	80078b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800788a:	7dba      	ldrb	r2, [r7, #22]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	32ae      	adds	r2, #174	; 0xae
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800789a:	7dba      	ldrb	r2, [r7, #22]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80078a2:	7dba      	ldrb	r2, [r7, #22]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	32ae      	adds	r2, #174	; 0xae
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f001 f94a 	bl	8008b4c <USBD_CtlSendStatus>
 80078b8:	e032      	b.n	8007920 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	4619      	mov	r1, r3
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fa31 	bl	8007d2c <USBD_CoreFindEP>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ce:	7dbb      	ldrb	r3, [r7, #22]
 80078d0:	2bff      	cmp	r3, #255	; 0xff
 80078d2:	d025      	beq.n	8007920 <USBD_LL_DataOutStage+0x15c>
 80078d4:	7dbb      	ldrb	r3, [r7, #22]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d122      	bne.n	8007920 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d117      	bne.n	8007916 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80078e6:	7dba      	ldrb	r2, [r7, #22]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	32ae      	adds	r2, #174	; 0xae
 80078ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00f      	beq.n	8007916 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078f6:	7dba      	ldrb	r2, [r7, #22]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078fe:	7dba      	ldrb	r2, [r7, #22]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	32ae      	adds	r2, #174	; 0xae
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	7afa      	ldrb	r2, [r7, #11]
 800790c:	4611      	mov	r1, r2
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	e000      	b.n	8007922 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	460b      	mov	r3, r1
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d16f      	bne.n	8007a1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3314      	adds	r3, #20
 8007942:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800794a:	2b02      	cmp	r3, #2
 800794c:	d15a      	bne.n	8007a04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	429a      	cmp	r2, r3
 8007958:	d914      	bls.n	8007984 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	461a      	mov	r2, r3
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f001 f8ac 	bl	8008ace <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007976:	2300      	movs	r3, #0
 8007978:	2200      	movs	r2, #0
 800797a:	2100      	movs	r1, #0
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f001 fda9 	bl	80094d4 <USBD_LL_PrepareReceive>
 8007982:	e03f      	b.n	8007a04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d11c      	bne.n	80079ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007998:	429a      	cmp	r2, r3
 800799a:	d316      	bcc.n	80079ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d20f      	bcs.n	80079ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079aa:	2200      	movs	r2, #0
 80079ac:	2100      	movs	r1, #0
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f001 f88d 	bl	8008ace <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079bc:	2300      	movs	r3, #0
 80079be:	2200      	movs	r2, #0
 80079c0:	2100      	movs	r1, #0
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f001 fd86 	bl	80094d4 <USBD_LL_PrepareReceive>
 80079c8:	e01c      	b.n	8007a04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d10f      	bne.n	80079f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079f6:	2180      	movs	r1, #128	; 0x80
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f001 fcc1 	bl	8009380 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f001 f8b7 	bl	8008b72 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d03a      	beq.n	8007a84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fe42 	bl	8007698 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a1c:	e032      	b.n	8007a84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	4619      	mov	r1, r3
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f97f 	bl	8007d2c <USBD_CoreFindEP>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	2bff      	cmp	r3, #255	; 0xff
 8007a36:	d025      	beq.n	8007a84 <USBD_LL_DataInStage+0x15a>
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d122      	bne.n	8007a84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d11c      	bne.n	8007a84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007a4a:	7dfa      	ldrb	r2, [r7, #23]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	32ae      	adds	r2, #174	; 0xae
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d014      	beq.n	8007a84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a5a:	7dfa      	ldrb	r2, [r7, #23]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a62:	7dfa      	ldrb	r2, [r7, #23]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	32ae      	adds	r2, #174	; 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	7afa      	ldrb	r2, [r7, #11]
 8007a70:	4611      	mov	r1, r2
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a7a:	7dbb      	ldrb	r3, [r7, #22]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a80:	7dbb      	ldrb	r3, [r7, #22]
 8007a82:	e000      	b.n	8007a86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d014      	beq.n	8007af4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6852      	ldr	r2, [r2, #4]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007af4:	2340      	movs	r3, #64	; 0x40
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fbfb 	bl	80092f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2240      	movs	r2, #64	; 0x40
 8007b0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b10:	2340      	movs	r3, #64	; 0x40
 8007b12:	2200      	movs	r2, #0
 8007b14:	2180      	movs	r1, #128	; 0x80
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fbed 	bl	80092f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2240      	movs	r2, #64	; 0x40
 8007b26:	621a      	str	r2, [r3, #32]

  return ret;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d106      	bne.n	8007ba0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d110      	bne.n	8007be4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	32ae      	adds	r2, #174	; 0xae
 8007c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e01c      	b.n	8007c4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d115      	bne.n	8007c48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	32ae      	adds	r2, #174	; 0xae
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	; 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	4611      	mov	r1, r2
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	32ae      	adds	r2, #174	; 0xae
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e01c      	b.n	8007cae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d115      	bne.n	8007cac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	32ae      	adds	r2, #174	; 0xae
 8007c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	32ae      	adds	r2, #174	; 0xae
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00e      	beq.n	8007d08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	885b      	ldrh	r3, [r3, #2]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d920      	bls.n	8007db0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d76:	e013      	b.n	8007da0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d78:	f107 030a 	add.w	r3, r7, #10
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6978      	ldr	r0, [r7, #20]
 8007d80:	f000 f81b 	bl	8007dba <USBD_GetNextDesc>
 8007d84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d108      	bne.n	8007da0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	789b      	ldrb	r3, [r3, #2]
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d008      	beq.n	8007dae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	897b      	ldrh	r3, [r7, #10]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d8e5      	bhi.n	8007d78 <USBD_GetEpDesc+0x32>
 8007dac:	e000      	b.n	8007db0 <USBD_GetEpDesc+0x6a>
          break;
 8007dae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007db0:	693b      	ldr	r3, [r7, #16]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	881a      	ldrh	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4413      	add	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e12:	8a3b      	ldrh	r3, [r7, #16]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	b21a      	sxth	r2, r3
 8007e18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	b21b      	sxth	r3, r3
 8007e20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e22:	89fb      	ldrh	r3, [r7, #14]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d005      	beq.n	8007e56 <USBD_StdDevReq+0x26>
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d857      	bhi.n	8007efe <USBD_StdDevReq+0xce>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00f      	beq.n	8007e72 <USBD_StdDevReq+0x42>
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d153      	bne.n	8007efe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	32ae      	adds	r2, #174	; 0xae
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e70:	e04a      	b.n	8007f08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b09      	cmp	r3, #9
 8007e78:	d83b      	bhi.n	8007ef2 <USBD_StdDevReq+0xc2>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <USBD_StdDevReq+0x50>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007ee9 	.word	0x08007ee9
 8007e88:	08007ef3 	.word	0x08007ef3
 8007e8c:	08007edf 	.word	0x08007edf
 8007e90:	08007ef3 	.word	0x08007ef3
 8007e94:	08007eb3 	.word	0x08007eb3
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007ef3 	.word	0x08007ef3
 8007ea0:	08007ecb 	.word	0x08007ecb
 8007ea4:	08007ebd 	.word	0x08007ebd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa3c 	bl	8008328 <USBD_GetDescriptor>
          break;
 8007eb0:	e024      	b.n	8007efc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fba1 	bl	80085fc <USBD_SetAddress>
          break;
 8007eba:	e01f      	b.n	8007efc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fbe0 	bl	8008684 <USBD_SetConfig>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8007ec8:	e018      	b.n	8007efc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc83 	bl	80087d8 <USBD_GetConfig>
          break;
 8007ed2:	e013      	b.n	8007efc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fcb4 	bl	8008844 <USBD_GetStatus>
          break;
 8007edc:	e00e      	b.n	8007efc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fce3 	bl	80088ac <USBD_SetFeature>
          break;
 8007ee6:	e009      	b.n	8007efc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fd07 	bl	80088fe <USBD_ClrFeature>
          break;
 8007ef0:	e004      	b.n	8007efc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fd5e 	bl	80089b6 <USBD_CtlError>
          break;
 8007efa:	bf00      	nop
      }
      break;
 8007efc:	e004      	b.n	8007f08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fd58 	bl	80089b6 <USBD_CtlError>
      break;
 8007f06:	bf00      	nop
  }

  return ret;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d005      	beq.n	8007f3a <USBD_StdItfReq+0x26>
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d852      	bhi.n	8007fd8 <USBD_StdItfReq+0xc4>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <USBD_StdItfReq+0x26>
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d14e      	bne.n	8007fd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d840      	bhi.n	8007fca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	889b      	ldrh	r3, [r3, #4]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d836      	bhi.n	8007fc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	889b      	ldrh	r3, [r3, #4]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fed9 	bl	8007d12 <USBD_CoreFindIF>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2bff      	cmp	r3, #255	; 0xff
 8007f68:	d01d      	beq.n	8007fa6 <USBD_StdItfReq+0x92>
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d11a      	bne.n	8007fa6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f70:	7bba      	ldrb	r2, [r7, #14]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	32ae      	adds	r2, #174	; 0xae
 8007f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00f      	beq.n	8007fa0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f80:	7bba      	ldrb	r2, [r7, #14]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f88:	7bba      	ldrb	r2, [r7, #14]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	32ae      	adds	r2, #174	; 0xae
 8007f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f9e:	e004      	b.n	8007faa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007fa4:	e001      	b.n	8007faa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d110      	bne.n	8007fd4 <USBD_StdItfReq+0xc0>
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10d      	bne.n	8007fd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fdc7 	bl	8008b4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fbe:	e009      	b.n	8007fd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fcf7 	bl	80089b6 <USBD_CtlError>
          break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fcf2 	bl	80089b6 <USBD_CtlError>
          break;
 8007fd2:	e000      	b.n	8007fd6 <USBD_StdItfReq+0xc2>
          break;
 8007fd4:	bf00      	nop
      }
      break;
 8007fd6:	e004      	b.n	8007fe2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fceb 	bl	80089b6 <USBD_CtlError>
      break;
 8007fe0:	bf00      	nop
  }

  return ret;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	889b      	ldrh	r3, [r3, #4]
 8007ffe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008008:	2b40      	cmp	r3, #64	; 0x40
 800800a:	d007      	beq.n	800801c <USBD_StdEPReq+0x30>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	f200 817f 	bhi.w	8008310 <USBD_StdEPReq+0x324>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d02a      	beq.n	800806c <USBD_StdEPReq+0x80>
 8008016:	2b20      	cmp	r3, #32
 8008018:	f040 817a 	bne.w	8008310 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff fe83 	bl	8007d2c <USBD_CoreFindEP>
 8008026:	4603      	mov	r3, r0
 8008028:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800802a:	7b7b      	ldrb	r3, [r7, #13]
 800802c:	2bff      	cmp	r3, #255	; 0xff
 800802e:	f000 8174 	beq.w	800831a <USBD_StdEPReq+0x32e>
 8008032:	7b7b      	ldrb	r3, [r7, #13]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f040 8170 	bne.w	800831a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800803a:	7b7a      	ldrb	r2, [r7, #13]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008042:	7b7a      	ldrb	r2, [r7, #13]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	32ae      	adds	r2, #174	; 0xae
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8163 	beq.w	800831a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008054:	7b7a      	ldrb	r2, [r7, #13]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	32ae      	adds	r2, #174	; 0xae
 800805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800806a:	e156      	b.n	800831a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b03      	cmp	r3, #3
 8008072:	d008      	beq.n	8008086 <USBD_StdEPReq+0x9a>
 8008074:	2b03      	cmp	r3, #3
 8008076:	f300 8145 	bgt.w	8008304 <USBD_StdEPReq+0x318>
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 809b 	beq.w	80081b6 <USBD_StdEPReq+0x1ca>
 8008080:	2b01      	cmp	r3, #1
 8008082:	d03c      	beq.n	80080fe <USBD_StdEPReq+0x112>
 8008084:	e13e      	b.n	8008304 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d002      	beq.n	8008098 <USBD_StdEPReq+0xac>
 8008092:	2b03      	cmp	r3, #3
 8008094:	d016      	beq.n	80080c4 <USBD_StdEPReq+0xd8>
 8008096:	e02c      	b.n	80080f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00d      	beq.n	80080ba <USBD_StdEPReq+0xce>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d00a      	beq.n	80080ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 f969 	bl	8009380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f965 	bl	8009380 <USBD_LL_StallEP>
 80080b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080b8:	e020      	b.n	80080fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc7a 	bl	80089b6 <USBD_CtlError>
              break;
 80080c2:	e01b      	b.n	80080fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10e      	bne.n	80080ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00b      	beq.n	80080ea <USBD_StdEPReq+0xfe>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d008      	beq.n	80080ea <USBD_StdEPReq+0xfe>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	88db      	ldrh	r3, [r3, #6]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f94b 	bl	8009380 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fd2e 	bl	8008b4c <USBD_CtlSendStatus>

              break;
 80080f0:	e004      	b.n	80080fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc5e 	bl	80089b6 <USBD_CtlError>
              break;
 80080fa:	bf00      	nop
          }
          break;
 80080fc:	e107      	b.n	800830e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d002      	beq.n	8008110 <USBD_StdEPReq+0x124>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d016      	beq.n	800813c <USBD_StdEPReq+0x150>
 800810e:	e04b      	b.n	80081a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00d      	beq.n	8008132 <USBD_StdEPReq+0x146>
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b80      	cmp	r3, #128	; 0x80
 800811a:	d00a      	beq.n	8008132 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 f92d 	bl	8009380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008126:	2180      	movs	r1, #128	; 0x80
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 f929 	bl	8009380 <USBD_LL_StallEP>
 800812e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008130:	e040      	b.n	80081b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc3e 	bl	80089b6 <USBD_CtlError>
              break;
 800813a:	e03b      	b.n	80081b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	885b      	ldrh	r3, [r3, #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d136      	bne.n	80081b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 f933 	bl	80093be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fcf7 	bl	8008b4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fde2 	bl	8007d2c <USBD_CoreFindEP>
 8008168:	4603      	mov	r3, r0
 800816a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800816c:	7b7b      	ldrb	r3, [r7, #13]
 800816e:	2bff      	cmp	r3, #255	; 0xff
 8008170:	d01f      	beq.n	80081b2 <USBD_StdEPReq+0x1c6>
 8008172:	7b7b      	ldrb	r3, [r7, #13]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d11c      	bne.n	80081b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008178:	7b7a      	ldrb	r2, [r7, #13]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008180:	7b7a      	ldrb	r2, [r7, #13]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	32ae      	adds	r2, #174	; 0xae
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d010      	beq.n	80081b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008190:	7b7a      	ldrb	r2, [r7, #13]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32ae      	adds	r2, #174	; 0xae
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80081a6:	e004      	b.n	80081b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fc03 	bl	80089b6 <USBD_CtlError>
              break;
 80081b0:	e000      	b.n	80081b4 <USBD_StdEPReq+0x1c8>
              break;
 80081b2:	bf00      	nop
          }
          break;
 80081b4:	e0ab      	b.n	800830e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d002      	beq.n	80081c8 <USBD_StdEPReq+0x1dc>
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d032      	beq.n	800822c <USBD_StdEPReq+0x240>
 80081c6:	e097      	b.n	80082f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <USBD_StdEPReq+0x1f2>
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b80      	cmp	r3, #128	; 0x80
 80081d2:	d004      	beq.n	80081de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fbed 	bl	80089b6 <USBD_CtlError>
                break;
 80081dc:	e091      	b.n	8008302 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	da0b      	bge.n	80081fe <USBD_StdEPReq+0x212>
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	3310      	adds	r3, #16
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	4413      	add	r3, r2
 80081fa:	3304      	adds	r3, #4
 80081fc:	e00b      	b.n	8008216 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2202      	movs	r2, #2
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc37 	bl	8008a98 <USBD_CtlSendData>
              break;
 800822a:	e06a      	b.n	8008302 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800822c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008230:	2b00      	cmp	r3, #0
 8008232:	da11      	bge.n	8008258 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	f003 020f 	and.w	r2, r3, #15
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	3324      	adds	r3, #36	; 0x24
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d117      	bne.n	800827e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fbb0 	bl	80089b6 <USBD_CtlError>
                  break;
 8008256:	e054      	b.n	8008302 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fb9d 	bl	80089b6 <USBD_CtlError>
                  break;
 800827c:	e041      	b.n	8008302 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800827e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008282:	2b00      	cmp	r3, #0
 8008284:	da0b      	bge.n	800829e <USBD_StdEPReq+0x2b2>
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	3310      	adds	r3, #16
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	3304      	adds	r3, #4
 800829c:	e00b      	b.n	80082b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <USBD_StdEPReq+0x2d8>
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b80      	cmp	r3, #128	; 0x80
 80082c2:	d103      	bne.n	80082cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	e00e      	b.n	80082ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f893 	bl	80093fc <USBD_LL_IsStallEP>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2201      	movs	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e002      	b.n	80082ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2202      	movs	r2, #2
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fbd1 	bl	8008a98 <USBD_CtlSendData>
              break;
 80082f6:	e004      	b.n	8008302 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fb5b 	bl	80089b6 <USBD_CtlError>
              break;
 8008300:	bf00      	nop
          }
          break;
 8008302:	e004      	b.n	800830e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fb55 	bl	80089b6 <USBD_CtlError>
          break;
 800830c:	bf00      	nop
      }
      break;
 800830e:	e005      	b.n	800831c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fb4f 	bl	80089b6 <USBD_CtlError>
      break;
 8008318:	e000      	b.n	800831c <USBD_StdEPReq+0x330>
      break;
 800831a:	bf00      	nop
  }

  return ret;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	2b06      	cmp	r3, #6
 800834a:	f200 8128 	bhi.w	800859e <USBD_GetDescriptor+0x276>
 800834e:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <USBD_GetDescriptor+0x2c>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	08008371 	.word	0x08008371
 8008358:	08008389 	.word	0x08008389
 800835c:	080083c9 	.word	0x080083c9
 8008360:	0800859f 	.word	0x0800859f
 8008364:	0800859f 	.word	0x0800859f
 8008368:	0800853f 	.word	0x0800853f
 800836c:	0800856b 	.word	0x0800856b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	7c12      	ldrb	r2, [r2, #16]
 800837c:	f107 0108 	add.w	r1, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
      break;
 8008386:	e112      	b.n	80085ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7c1b      	ldrb	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10d      	bne.n	80083ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	f107 0208 	add.w	r2, r7, #8
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	2202      	movs	r2, #2
 80083a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083aa:	e100      	b.n	80085ae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	f107 0208 	add.w	r2, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	2202      	movs	r2, #2
 80083c4:	701a      	strb	r2, [r3, #0]
      break;
 80083c6:	e0f2      	b.n	80085ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	885b      	ldrh	r3, [r3, #2]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b05      	cmp	r3, #5
 80083d0:	f200 80ac 	bhi.w	800852c <USBD_GetDescriptor+0x204>
 80083d4:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <USBD_GetDescriptor+0xb4>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	080083f5 	.word	0x080083f5
 80083e0:	08008429 	.word	0x08008429
 80083e4:	0800845d 	.word	0x0800845d
 80083e8:	08008491 	.word	0x08008491
 80083ec:	080084c5 	.word	0x080084c5
 80083f0:	080084f9 	.word	0x080084f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	7c12      	ldrb	r2, [r2, #16]
 800840c:	f107 0108 	add.w	r1, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008416:	e091      	b.n	800853c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 facb 	bl	80089b6 <USBD_CtlError>
            err++;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	3301      	adds	r3, #1
 8008424:	72fb      	strb	r3, [r7, #11]
          break;
 8008426:	e089      	b.n	800853c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	7c12      	ldrb	r2, [r2, #16]
 8008440:	f107 0108 	add.w	r1, r7, #8
 8008444:	4610      	mov	r0, r2
 8008446:	4798      	blx	r3
 8008448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800844a:	e077      	b.n	800853c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fab1 	bl	80089b6 <USBD_CtlError>
            err++;
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	3301      	adds	r3, #1
 8008458:	72fb      	strb	r3, [r7, #11]
          break;
 800845a:	e06f      	b.n	800853c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	7c12      	ldrb	r2, [r2, #16]
 8008474:	f107 0108 	add.w	r1, r7, #8
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800847e:	e05d      	b.n	800853c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa97 	bl	80089b6 <USBD_CtlError>
            err++;
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	3301      	adds	r3, #1
 800848c:	72fb      	strb	r3, [r7, #11]
          break;
 800848e:	e055      	b.n	800853c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	7c12      	ldrb	r2, [r2, #16]
 80084a8:	f107 0108 	add.w	r1, r7, #8
 80084ac:	4610      	mov	r0, r2
 80084ae:	4798      	blx	r3
 80084b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b2:	e043      	b.n	800853c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa7d 	bl	80089b6 <USBD_CtlError>
            err++;
 80084bc:	7afb      	ldrb	r3, [r7, #11]
 80084be:	3301      	adds	r3, #1
 80084c0:	72fb      	strb	r3, [r7, #11]
          break;
 80084c2:	e03b      	b.n	800853c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	7c12      	ldrb	r2, [r2, #16]
 80084dc:	f107 0108 	add.w	r1, r7, #8
 80084e0:	4610      	mov	r0, r2
 80084e2:	4798      	blx	r3
 80084e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e6:	e029      	b.n	800853c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa63 	bl	80089b6 <USBD_CtlError>
            err++;
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	3301      	adds	r3, #1
 80084f4:	72fb      	strb	r3, [r7, #11]
          break;
 80084f6:	e021      	b.n	800853c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	7c12      	ldrb	r2, [r2, #16]
 8008510:	f107 0108 	add.w	r1, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851a:	e00f      	b.n	800853c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa49 	bl	80089b6 <USBD_CtlError>
            err++;
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	3301      	adds	r3, #1
 8008528:	72fb      	strb	r3, [r7, #11]
          break;
 800852a:	e007      	b.n	800853c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa41 	bl	80089b6 <USBD_CtlError>
          err++;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	3301      	adds	r3, #1
 8008538:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800853a:	bf00      	nop
      }
      break;
 800853c:	e037      	b.n	80085ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7c1b      	ldrb	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f107 0208 	add.w	r2, r7, #8
 8008552:	4610      	mov	r0, r2
 8008554:	4798      	blx	r3
 8008556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008558:	e029      	b.n	80085ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa2a 	bl	80089b6 <USBD_CtlError>
        err++;
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	3301      	adds	r3, #1
 8008566:	72fb      	strb	r3, [r7, #11]
      break;
 8008568:	e021      	b.n	80085ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7c1b      	ldrb	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10d      	bne.n	800858e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857a:	f107 0208 	add.w	r2, r7, #8
 800857e:	4610      	mov	r0, r2
 8008580:	4798      	blx	r3
 8008582:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3301      	adds	r3, #1
 8008588:	2207      	movs	r2, #7
 800858a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800858c:	e00f      	b.n	80085ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa10 	bl	80089b6 <USBD_CtlError>
        err++;
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	3301      	adds	r3, #1
 800859a:	72fb      	strb	r3, [r7, #11]
      break;
 800859c:	e007      	b.n	80085ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa08 	bl	80089b6 <USBD_CtlError>
      err++;
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	3301      	adds	r3, #1
 80085aa:	72fb      	strb	r3, [r7, #11]
      break;
 80085ac:	bf00      	nop
  }

  if (err != 0U)
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11e      	bne.n	80085f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	88db      	ldrh	r3, [r3, #6]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d016      	beq.n	80085ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00e      	beq.n	80085e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	88da      	ldrh	r2, [r3, #6]
 80085c6:	893b      	ldrh	r3, [r7, #8]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bf28      	it	cs
 80085cc:	4613      	movcs	r3, r2
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085d2:	893b      	ldrh	r3, [r7, #8]
 80085d4:	461a      	mov	r2, r3
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa5d 	bl	8008a98 <USBD_CtlSendData>
 80085de:	e009      	b.n	80085f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9e7 	bl	80089b6 <USBD_CtlError>
 80085e8:	e004      	b.n	80085f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 faae 	bl	8008b4c <USBD_CtlSendStatus>
 80085f0:	e000      	b.n	80085f4 <USBD_GetDescriptor+0x2cc>
    return;
 80085f2:	bf00      	nop
  }
}
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop

080085fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	889b      	ldrh	r3, [r3, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d131      	bne.n	8008672 <USBD_SetAddress+0x76>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	88db      	ldrh	r3, [r3, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d12d      	bne.n	8008672 <USBD_SetAddress+0x76>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	2b7f      	cmp	r3, #127	; 0x7f
 800861c:	d829      	bhi.n	8008672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b03      	cmp	r3, #3
 8008634:	d104      	bne.n	8008640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f9bc 	bl	80089b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863e:	e01d      	b.n	800867c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7bfa      	ldrb	r2, [r7, #15]
 8008644:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 ff01 	bl	8009454 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa7a 	bl	8008b4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d004      	beq.n	8008668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2202      	movs	r2, #2
 8008662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008666:	e009      	b.n	800867c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008670:	e004      	b.n	800867c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f99e 	bl	80089b6 <USBD_CtlError>
  }
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	b2da      	uxtb	r2, r3
 8008698:	4b4e      	ldr	r3, [pc, #312]	; (80087d4 <USBD_SetConfig+0x150>)
 800869a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800869c:	4b4d      	ldr	r3, [pc, #308]	; (80087d4 <USBD_SetConfig+0x150>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d905      	bls.n	80086b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f985 	bl	80089b6 <USBD_CtlError>
    return USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e08c      	b.n	80087ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d002      	beq.n	80086c2 <USBD_SetConfig+0x3e>
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d029      	beq.n	8008714 <USBD_SetConfig+0x90>
 80086c0:	e075      	b.n	80087ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086c2:	4b44      	ldr	r3, [pc, #272]	; (80087d4 <USBD_SetConfig+0x150>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d020      	beq.n	800870c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086ca:	4b42      	ldr	r3, [pc, #264]	; (80087d4 <USBD_SetConfig+0x150>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086d4:	4b3f      	ldr	r3, [pc, #252]	; (80087d4 <USBD_SetConfig+0x150>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fe ffe7 	bl	80076ae <USBD_SetClassConfig>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f962 	bl	80089b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2202      	movs	r2, #2
 80086f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086fa:	e065      	b.n	80087c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa25 	bl	8008b4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2203      	movs	r2, #3
 8008706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800870a:	e05d      	b.n	80087c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa1d 	bl	8008b4c <USBD_CtlSendStatus>
      break;
 8008712:	e059      	b.n	80087c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008714:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <USBD_SetConfig+0x150>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d112      	bne.n	8008742 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008724:	4b2b      	ldr	r3, [pc, #172]	; (80087d4 <USBD_SetConfig+0x150>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800872e:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <USBD_SetConfig+0x150>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7fe ffd6 	bl	80076e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa06 	bl	8008b4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008740:	e042      	b.n	80087c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008742:	4b24      	ldr	r3, [pc, #144]	; (80087d4 <USBD_SetConfig+0x150>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d02a      	beq.n	80087a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7fe ffc4 	bl	80076e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800875e:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <USBD_SetConfig+0x150>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008768:	4b1a      	ldr	r3, [pc, #104]	; (80087d4 <USBD_SetConfig+0x150>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fe ff9d 	bl	80076ae <USBD_SetClassConfig>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00f      	beq.n	800879e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f918 	bl	80089b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7fe ffa9 	bl	80076e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800879c:	e014      	b.n	80087c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f9d4 	bl	8008b4c <USBD_CtlSendStatus>
      break;
 80087a4:	e010      	b.n	80087c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9d0 	bl	8008b4c <USBD_CtlSendStatus>
      break;
 80087ac:	e00c      	b.n	80087c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f900 	bl	80089b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087b6:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <USBD_SetConfig+0x150>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7fe ff92 	bl	80076e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087c2:	2303      	movs	r3, #3
 80087c4:	73fb      	strb	r3, [r7, #15]
      break;
 80087c6:	bf00      	nop
  }

  return ret;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000308 	.word	0x20000308

080087d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	88db      	ldrh	r3, [r3, #6]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d004      	beq.n	80087f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f8e2 	bl	80089b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087f2:	e023      	b.n	800883c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	dc02      	bgt.n	8008806 <USBD_GetConfig+0x2e>
 8008800:	2b00      	cmp	r3, #0
 8008802:	dc03      	bgt.n	800880c <USBD_GetConfig+0x34>
 8008804:	e015      	b.n	8008832 <USBD_GetConfig+0x5a>
 8008806:	2b03      	cmp	r3, #3
 8008808:	d00b      	beq.n	8008822 <USBD_GetConfig+0x4a>
 800880a:	e012      	b.n	8008832 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3308      	adds	r3, #8
 8008816:	2201      	movs	r2, #1
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f93c 	bl	8008a98 <USBD_CtlSendData>
        break;
 8008820:	e00c      	b.n	800883c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3304      	adds	r3, #4
 8008826:	2201      	movs	r2, #1
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f934 	bl	8008a98 <USBD_CtlSendData>
        break;
 8008830:	e004      	b.n	800883c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f8be 	bl	80089b6 <USBD_CtlError>
        break;
 800883a:	bf00      	nop
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008854:	b2db      	uxtb	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	2b02      	cmp	r3, #2
 800885a:	d81e      	bhi.n	800889a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	88db      	ldrh	r3, [r3, #6]
 8008860:	2b02      	cmp	r3, #2
 8008862:	d004      	beq.n	800886e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f8a5 	bl	80089b6 <USBD_CtlError>
        break;
 800886c:	e01a      	b.n	80088a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f043 0202 	orr.w	r2, r3, #2
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	330c      	adds	r3, #12
 800888e:	2202      	movs	r2, #2
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f900 	bl	8008a98 <USBD_CtlSendData>
      break;
 8008898:	e004      	b.n	80088a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f88a 	bl	80089b6 <USBD_CtlError>
      break;
 80088a2:	bf00      	nop
  }
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d107      	bne.n	80088ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f940 	bl	8008b4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088cc:	e013      	b.n	80088f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d10b      	bne.n	80088ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	889b      	ldrh	r3, [r3, #4]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	b29b      	uxth	r3, r3
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f930 	bl	8008b4c <USBD_CtlSendStatus>
}
 80088ec:	e003      	b.n	80088f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f860 	bl	80089b6 <USBD_CtlError>
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	b2db      	uxtb	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	2b02      	cmp	r3, #2
 8008914:	d80b      	bhi.n	800892e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d10c      	bne.n	8008938 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f910 	bl	8008b4c <USBD_CtlSendStatus>
      }
      break;
 800892c:	e004      	b.n	8008938 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f840 	bl	80089b6 <USBD_CtlError>
      break;
 8008936:	e000      	b.n	800893a <USBD_ClrFeature+0x3c>
      break;
 8008938:	bf00      	nop
  }
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3301      	adds	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff fa41 	bl	8007df4 <SWAPBYTE>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3301      	adds	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fa34 	bl	8007df4 <SWAPBYTE>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f7ff fa27 	bl	8007df4 <SWAPBYTE>
 80089a6:	4603      	mov	r3, r0
 80089a8:	461a      	mov	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	80da      	strh	r2, [r3, #6]
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c0:	2180      	movs	r1, #128	; 0x80
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fcdc 	bl	8009380 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fcd8 	bl	8009380 <USBD_LL_StallEP>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d036      	beq.n	8008a5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f000 f836 	bl	8008a64 <USBD_GetLen>
 80089f8:	4603      	mov	r3, r0
 80089fa:	3301      	adds	r3, #1
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	3301      	adds	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	2203      	movs	r2, #3
 8008a20:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	3301      	adds	r3, #1
 8008a26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a28:	e013      	b.n	8008a52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4413      	add	r3, r2
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	613b      	str	r3, [r7, #16]
    idx++;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	4413      	add	r3, r2
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e7      	bne.n	8008a2a <USBD_GetString+0x52>
 8008a5a:	e000      	b.n	8008a5e <USBD_GetString+0x86>
    return;
 8008a5c:	bf00      	nop
  }
}
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a74:	e005      	b.n	8008a82 <USBD_GetLen+0x1e>
  {
    len++;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f5      	bne.n	8008a76 <USBD_GetLen+0x12>
  }

  return len;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fce7 	bl	8009492 <USBD_LL_Transmit>

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	2100      	movs	r1, #0
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 fcd6 	bl	8009492 <USBD_LL_Transmit>

  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2203      	movs	r2, #3
 8008b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	2100      	movs	r1, #0
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 fcda 	bl	80094d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fcc9 	bl	80094d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2204      	movs	r2, #4
 8008b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc95 	bl	8009492 <USBD_LL_Transmit>

  return USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2205      	movs	r2, #5
 8008b7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b82:	2300      	movs	r3, #0
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fca3 	bl	80094d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4912      	ldr	r1, [pc, #72]	; (8008be8 <MX_USB_DEVICE_Init+0x50>)
 8008ba0:	4812      	ldr	r0, [pc, #72]	; (8008bec <MX_USB_DEVICE_Init+0x54>)
 8008ba2:	f7fe fd07 	bl	80075b4 <USBD_Init>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bac:	f7f8 fd10 	bl	80015d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bb0:	490f      	ldr	r1, [pc, #60]	; (8008bf0 <MX_USB_DEVICE_Init+0x58>)
 8008bb2:	480e      	ldr	r0, [pc, #56]	; (8008bec <MX_USB_DEVICE_Init+0x54>)
 8008bb4:	f7fe fd2e 	bl	8007614 <USBD_RegisterClass>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bbe:	f7f8 fd07 	bl	80015d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bc2:	490c      	ldr	r1, [pc, #48]	; (8008bf4 <MX_USB_DEVICE_Init+0x5c>)
 8008bc4:	4809      	ldr	r0, [pc, #36]	; (8008bec <MX_USB_DEVICE_Init+0x54>)
 8008bc6:	f7fe fc1f 	bl	8007408 <USBD_CDC_RegisterInterface>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bd0:	f7f8 fcfe 	bl	80015d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bd4:	4805      	ldr	r0, [pc, #20]	; (8008bec <MX_USB_DEVICE_Init+0x54>)
 8008bd6:	f7fe fd53 	bl	8007680 <USBD_Start>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008be0:	f7f8 fcf6 	bl	80015d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008be4:	bf00      	nop
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	200000ac 	.word	0x200000ac
 8008bec:	2000030c 	.word	0x2000030c
 8008bf0:	20000018 	.word	0x20000018
 8008bf4:	20000098 	.word	0x20000098

08008bf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4905      	ldr	r1, [pc, #20]	; (8008c14 <CDC_Init_FS+0x1c>)
 8008c00:	4805      	ldr	r0, [pc, #20]	; (8008c18 <CDC_Init_FS+0x20>)
 8008c02:	f7fe fc1b 	bl	800743c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c06:	4905      	ldr	r1, [pc, #20]	; (8008c1c <CDC_Init_FS+0x24>)
 8008c08:	4803      	ldr	r0, [pc, #12]	; (8008c18 <CDC_Init_FS+0x20>)
 8008c0a:	f7fe fc39 	bl	8007480 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20000de8 	.word	0x20000de8
 8008c18:	2000030c 	.word	0x2000030c
 8008c1c:	200005e8 	.word	0x200005e8

08008c20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	71fb      	strb	r3, [r7, #7]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	2b23      	cmp	r3, #35	; 0x23
 8008c44:	d84a      	bhi.n	8008cdc <CDC_Control_FS+0xac>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <CDC_Control_FS+0x1c>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008cdd 	.word	0x08008cdd
 8008c50:	08008cdd 	.word	0x08008cdd
 8008c54:	08008cdd 	.word	0x08008cdd
 8008c58:	08008cdd 	.word	0x08008cdd
 8008c5c:	08008cdd 	.word	0x08008cdd
 8008c60:	08008cdd 	.word	0x08008cdd
 8008c64:	08008cdd 	.word	0x08008cdd
 8008c68:	08008cdd 	.word	0x08008cdd
 8008c6c:	08008cdd 	.word	0x08008cdd
 8008c70:	08008cdd 	.word	0x08008cdd
 8008c74:	08008cdd 	.word	0x08008cdd
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008cdd 	.word	0x08008cdd
 8008c80:	08008cdd 	.word	0x08008cdd
 8008c84:	08008cdd 	.word	0x08008cdd
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008cdd 	.word	0x08008cdd
 8008c94:	08008cdd 	.word	0x08008cdd
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cdd 	.word	0x08008cdd
 8008ca8:	08008cdd 	.word	0x08008cdd
 8008cac:	08008cdd 	.word	0x08008cdd
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	08008cdd 	.word	0x08008cdd
 8008cb8:	08008cdd 	.word	0x08008cdd
 8008cbc:	08008cdd 	.word	0x08008cdd
 8008cc0:	08008cdd 	.word	0x08008cdd
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008cdd 	.word	0x08008cdd
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008cdd 	.word	0x08008cdd
 8008cd4:	08008cdd 	.word	0x08008cdd
 8008cd8:	08008cdd 	.word	0x08008cdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cdc:	bf00      	nop
  }

  return (USBD_OK);
 8008cde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4808      	ldr	r0, [pc, #32]	; (8008d1c <CDC_Receive_FS+0x30>)
 8008cfa:	f7fe fbc1 	bl	8007480 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cfe:	4807      	ldr	r0, [pc, #28]	; (8008d1c <CDC_Receive_FS+0x30>)
 8008d00:	f7fe fc22 	bl	8007548 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7f8 fb86 	bl	800141c <CDC_ReceiveCallBack>
  return (USBD_OK);
 8008d10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	2000030c 	.word	0x2000030c

08008d20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <CDC_Transmit_FS+0x48>)
 8008d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e00b      	b.n	8008d5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	4806      	ldr	r0, [pc, #24]	; (8008d68 <CDC_Transmit_FS+0x48>)
 8008d4e:	f7fe fb75 	bl	800743c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d52:	4805      	ldr	r0, [pc, #20]	; (8008d68 <CDC_Transmit_FS+0x48>)
 8008d54:	f7fe fbb2 	bl	80074bc <USBD_CDC_TransmitPacket>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	2000030c 	.word	0x2000030c

08008d6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
	...

08008d90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	6039      	str	r1, [r7, #0]
 8008d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2212      	movs	r2, #18
 8008da0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008da2:	4b03      	ldr	r3, [pc, #12]	; (8008db0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	200000c8 	.word	0x200000c8

08008db4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dc6:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	200000dc 	.word	0x200000dc

08008dd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d105      	bne.n	8008df6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	4907      	ldr	r1, [pc, #28]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008dee:	4808      	ldr	r0, [pc, #32]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008df0:	f7ff fdf2 	bl	80089d8 <USBD_GetString>
 8008df4:	e004      	b.n	8008e00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	4904      	ldr	r1, [pc, #16]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008dfa:	4805      	ldr	r0, [pc, #20]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dfc:	f7ff fdec 	bl	80089d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	200015e8 	.word	0x200015e8
 8008e10:	0800985c 	.word	0x0800985c

08008e14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	4904      	ldr	r1, [pc, #16]	; (8008e34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e24:	4804      	ldr	r0, [pc, #16]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e26:	f7ff fdd7 	bl	80089d8 <USBD_GetString>
  return USBD_StrDesc;
 8008e2a:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	200015e8 	.word	0x200015e8
 8008e38:	08009874 	.word	0x08009874

08008e3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	221a      	movs	r2, #26
 8008e4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e4e:	f000 f843 	bl	8008ed8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e52:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200000e0 	.word	0x200000e0

08008e60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	4907      	ldr	r1, [pc, #28]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e76:	4808      	ldr	r0, [pc, #32]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e78:	f7ff fdae 	bl	80089d8 <USBD_GetString>
 8008e7c:	e004      	b.n	8008e88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4904      	ldr	r1, [pc, #16]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e82:	4805      	ldr	r0, [pc, #20]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e84:	f7ff fda8 	bl	80089d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e88:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200015e8 	.word	0x200015e8
 8008e98:	08009888 	.word	0x08009888

08008e9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d105      	bne.n	8008eba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4907      	ldr	r1, [pc, #28]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb4:	f7ff fd90 	bl	80089d8 <USBD_GetString>
 8008eb8:	e004      	b.n	8008ec4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4904      	ldr	r1, [pc, #16]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ec0:	f7ff fd8a 	bl	80089d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	200015e8 	.word	0x200015e8
 8008ed4:	08009894 	.word	0x08009894

08008ed8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <Get_SerialNum+0x44>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <Get_SerialNum+0x48>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eea:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <Get_SerialNum+0x4c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008efe:	2208      	movs	r2, #8
 8008f00:	4909      	ldr	r1, [pc, #36]	; (8008f28 <Get_SerialNum+0x50>)
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 f814 	bl	8008f30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f08:	2204      	movs	r2, #4
 8008f0a:	4908      	ldr	r1, [pc, #32]	; (8008f2c <Get_SerialNum+0x54>)
 8008f0c:	68b8      	ldr	r0, [r7, #8]
 8008f0e:	f000 f80f 	bl	8008f30 <IntToUnicode>
  }
}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	1fff7a10 	.word	0x1fff7a10
 8008f20:	1fff7a14 	.word	0x1fff7a14
 8008f24:	1fff7a18 	.word	0x1fff7a18
 8008f28:	200000e2 	.word	0x200000e2
 8008f2c:	200000f2 	.word	0x200000f2

08008f30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]
 8008f46:	e027      	b.n	8008f98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	0f1b      	lsrs	r3, r3, #28
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d80b      	bhi.n	8008f68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	0f1b      	lsrs	r3, r3, #28
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	440b      	add	r3, r1
 8008f60:	3230      	adds	r2, #48	; 0x30
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e00a      	b.n	8008f7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	0f1b      	lsrs	r3, r3, #28
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	4619      	mov	r1, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	440b      	add	r3, r1
 8008f78:	3237      	adds	r2, #55	; 0x37
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	3301      	adds	r3, #1
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	3301      	adds	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
 8008f98:	7dfa      	ldrb	r2, [r7, #23]
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d3d3      	bcc.n	8008f48 <IntToUnicode+0x18>
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
	...

08008fb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fb8:	f107 0314 	add.w	r3, r7, #20
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	609a      	str	r2, [r3, #8]
 8008fc4:	60da      	str	r2, [r3, #12]
 8008fc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fd0:	d13a      	bne.n	8009048 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	613b      	str	r3, [r7, #16]
 8008fd6:	4b1e      	ldr	r3, [pc, #120]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	4a1d      	ldr	r2, [pc, #116]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe2:	4b1b      	ldr	r3, [pc, #108]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009000:	230a      	movs	r3, #10
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	4619      	mov	r1, r3
 800900a:	4812      	ldr	r0, [pc, #72]	; (8009054 <HAL_PCD_MspInit+0xa4>)
 800900c:	f7f9 f998 	bl	8002340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	4a0e      	ldr	r2, [pc, #56]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8009016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901a:	6353      	str	r3, [r2, #52]	; 0x34
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8009022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009024:	4a0a      	ldr	r2, [pc, #40]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 8009026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800902a:	6453      	str	r3, [r2, #68]	; 0x44
 800902c:	4b08      	ldr	r3, [pc, #32]	; (8009050 <HAL_PCD_MspInit+0xa0>)
 800902e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009038:	2200      	movs	r2, #0
 800903a:	2100      	movs	r1, #0
 800903c:	2043      	movs	r0, #67	; 0x43
 800903e:	f7f9 f948 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009042:	2043      	movs	r0, #67	; 0x43
 8009044:	f7f9 f961 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009048:	bf00      	nop
 800904a:	3728      	adds	r7, #40	; 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40023800 	.word	0x40023800
 8009054:	40020000 	.word	0x40020000

08009058 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7fe fb53 	bl	800771a <USBD_LL_SetupStage>
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7fe fb8d 	bl	80077c4 <USBD_LL_DataOutStage>
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	334c      	adds	r3, #76	; 0x4c
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	4619      	mov	r1, r3
 80090da:	f7fe fc26 	bl	800792a <USBD_LL_DataInStage>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fd5a 	bl	8007bae <USBD_LL_SOF>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800910a:	2301      	movs	r3, #1
 800910c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d001      	beq.n	800911a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009116:	f7f8 fa5b 	bl	80015d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009120:	7bfa      	ldrb	r2, [r7, #15]
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fd04 	bl	8007b32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fcac 	bl	8007a8e <USBD_LL_Reset>
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fcff 	bl	8007b52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	6812      	ldr	r2, [r2, #0]
 8009162:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <HAL_PCD_SuspendCallback+0x48>)
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	4a03      	ldr	r2, [pc, #12]	; (8009188 <HAL_PCD_SuspendCallback+0x48>)
 800917a:	f043 0306 	orr.w	r3, r3, #6
 800917e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	e000ed00 	.word	0xe000ed00

0800918c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fcef 	bl	8007b7e <USBD_LL_Resume>
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fd47 	bl	8007c52 <USBD_LL_IsoOUTIncomplete>
}
 80091c4:	bf00      	nop
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fd03 	bl	8007bee <USBD_LL_IsoINIncomplete>
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fd59 	bl	8007cb6 <USBD_LL_DevConnected>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fd56 	bl	8007ccc <USBD_LL_DevDisconnected>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d13c      	bne.n	80092b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009238:	4a20      	ldr	r2, [pc, #128]	; (80092bc <USBD_LL_Init+0x94>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a1e      	ldr	r2, [pc, #120]	; (80092bc <USBD_LL_Init+0x94>)
 8009244:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009248:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <USBD_LL_Init+0x94>)
 800924a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800924e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <USBD_LL_Init+0x94>)
 8009252:	2204      	movs	r2, #4
 8009254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009256:	4b19      	ldr	r3, [pc, #100]	; (80092bc <USBD_LL_Init+0x94>)
 8009258:	2202      	movs	r2, #2
 800925a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800925c:	4b17      	ldr	r3, [pc, #92]	; (80092bc <USBD_LL_Init+0x94>)
 800925e:	2200      	movs	r2, #0
 8009260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009262:	4b16      	ldr	r3, [pc, #88]	; (80092bc <USBD_LL_Init+0x94>)
 8009264:	2202      	movs	r2, #2
 8009266:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009268:	4b14      	ldr	r3, [pc, #80]	; (80092bc <USBD_LL_Init+0x94>)
 800926a:	2200      	movs	r2, #0
 800926c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <USBD_LL_Init+0x94>)
 8009270:	2200      	movs	r2, #0
 8009272:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009274:	4b11      	ldr	r3, [pc, #68]	; (80092bc <USBD_LL_Init+0x94>)
 8009276:	2200      	movs	r2, #0
 8009278:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800927a:	4b10      	ldr	r3, [pc, #64]	; (80092bc <USBD_LL_Init+0x94>)
 800927c:	2200      	movs	r2, #0
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009280:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <USBD_LL_Init+0x94>)
 8009282:	2200      	movs	r2, #0
 8009284:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009286:	480d      	ldr	r0, [pc, #52]	; (80092bc <USBD_LL_Init+0x94>)
 8009288:	f7f9 f9f7 	bl	800267a <HAL_PCD_Init>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009292:	f7f8 f99d 	bl	80015d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009296:	2180      	movs	r1, #128	; 0x80
 8009298:	4808      	ldr	r0, [pc, #32]	; (80092bc <USBD_LL_Init+0x94>)
 800929a:	f7fa fc4e 	bl	8003b3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800929e:	2240      	movs	r2, #64	; 0x40
 80092a0:	2100      	movs	r1, #0
 80092a2:	4806      	ldr	r0, [pc, #24]	; (80092bc <USBD_LL_Init+0x94>)
 80092a4:	f7fa fc02 	bl	8003aac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092a8:	2280      	movs	r2, #128	; 0x80
 80092aa:	2101      	movs	r1, #1
 80092ac:	4803      	ldr	r0, [pc, #12]	; (80092bc <USBD_LL_Init+0x94>)
 80092ae:	f7fa fbfd 	bl	8003aac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	200017e8 	.word	0x200017e8

080092c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f9 faec 	bl	80028b4 <HAL_PCD_Start>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f942 	bl	800956c <USBD_Get_USB_Status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	461a      	mov	r2, r3
 8009304:	4603      	mov	r3, r0
 8009306:	70fb      	strb	r3, [r7, #3]
 8009308:	460b      	mov	r3, r1
 800930a:	70bb      	strb	r3, [r7, #2]
 800930c:	4613      	mov	r3, r2
 800930e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800931e:	78bb      	ldrb	r3, [r7, #2]
 8009320:	883a      	ldrh	r2, [r7, #0]
 8009322:	78f9      	ldrb	r1, [r7, #3]
 8009324:	f7f9 ffbd 	bl	80032a2 <HAL_PCD_EP_Open>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f91c 	bl	800956c <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f7fa f806 	bl	8003372 <HAL_PCD_EP_Close>
 8009366:	4603      	mov	r3, r0
 8009368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f8fd 	bl	800956c <USBD_Get_USB_Status>
 8009372:	4603      	mov	r3, r0
 8009374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009376:	7bbb      	ldrb	r3, [r7, #14]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fa f8de 	bl	8003560 <HAL_PCD_EP_SetStall>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f8de 	bl	800956c <USBD_Get_USB_Status>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fa f923 	bl	8003628 <HAL_PCD_EP_ClrStall>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f8bf 	bl	800956c <USBD_Get_USB_Status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da0b      	bge.n	8009430 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	4613      	mov	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	333e      	adds	r3, #62	; 0x3e
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	e00b      	b.n	8009448 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009446:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f7f9 fef0 	bl	8003258 <HAL_PCD_SetAddress>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f874 	bl	800956c <USBD_Get_USB_Status>
 8009484:	4603      	mov	r3, r0
 8009486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009488:	7bbb      	ldrb	r3, [r7, #14]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	460b      	mov	r3, r1
 80094a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094b0:	7af9      	ldrb	r1, [r7, #11]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	f7fa f809 	bl	80034cc <HAL_PCD_EP_Transmit>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 f853 	bl	800956c <USBD_Get_USB_Status>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	460b      	mov	r3, r1
 80094e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094f2:	7af9      	ldrb	r1, [r7, #11]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	f7f9 ff85 	bl	8003406 <HAL_PCD_EP_Receive>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f832 	bl	800956c <USBD_Get_USB_Status>
 8009508:	4603      	mov	r3, r0
 800950a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800950c:	7dbb      	ldrb	r3, [r7, #22]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009528:	78fa      	ldrb	r2, [r7, #3]
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f7f9 ffb5 	bl	800349c <HAL_PCD_EP_GetRxCount>
 8009532:	4603      	mov	r3, r0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009544:	4b03      	ldr	r3, [pc, #12]	; (8009554 <USBD_static_malloc+0x18>)
}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	20001cf4 	.word	0x20001cf4

08009558 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b03      	cmp	r3, #3
 800957e:	d817      	bhi.n	80095b0 <USBD_Get_USB_Status+0x44>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <USBD_Get_USB_Status+0x1c>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	08009599 	.word	0x08009599
 800958c:	0800959f 	.word	0x0800959f
 8009590:	080095a5 	.word	0x080095a5
 8009594:	080095ab 	.word	0x080095ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
    break;
 800959c:	e00b      	b.n	80095b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800959e:	2303      	movs	r3, #3
 80095a0:	73fb      	strb	r3, [r7, #15]
    break;
 80095a2:	e008      	b.n	80095b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095a4:	2301      	movs	r3, #1
 80095a6:	73fb      	strb	r3, [r7, #15]
    break;
 80095a8:	e005      	b.n	80095b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095aa:	2303      	movs	r3, #3
 80095ac:	73fb      	strb	r3, [r7, #15]
    break;
 80095ae:	e002      	b.n	80095b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095b0:	2303      	movs	r3, #3
 80095b2:	73fb      	strb	r3, [r7, #15]
    break;
 80095b4:	bf00      	nop
  }
  return usb_status;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <__errno>:
 80095c4:	4b01      	ldr	r3, [pc, #4]	; (80095cc <__errno+0x8>)
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	200000fc 	.word	0x200000fc

080095d0 <__libc_init_array>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4d0d      	ldr	r5, [pc, #52]	; (8009608 <__libc_init_array+0x38>)
 80095d4:	4c0d      	ldr	r4, [pc, #52]	; (800960c <__libc_init_array+0x3c>)
 80095d6:	1b64      	subs	r4, r4, r5
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	2600      	movs	r6, #0
 80095dc:	42a6      	cmp	r6, r4
 80095de:	d109      	bne.n	80095f4 <__libc_init_array+0x24>
 80095e0:	4d0b      	ldr	r5, [pc, #44]	; (8009610 <__libc_init_array+0x40>)
 80095e2:	4c0c      	ldr	r4, [pc, #48]	; (8009614 <__libc_init_array+0x44>)
 80095e4:	f000 f92e 	bl	8009844 <_init>
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	2600      	movs	r6, #0
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	d105      	bne.n	80095fe <__libc_init_array+0x2e>
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f8:	4798      	blx	r3
 80095fa:	3601      	adds	r6, #1
 80095fc:	e7ee      	b.n	80095dc <__libc_init_array+0xc>
 80095fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009602:	4798      	blx	r3
 8009604:	3601      	adds	r6, #1
 8009606:	e7f2      	b.n	80095ee <__libc_init_array+0x1e>
 8009608:	080098bc 	.word	0x080098bc
 800960c:	080098bc 	.word	0x080098bc
 8009610:	080098bc 	.word	0x080098bc
 8009614:	080098c0 	.word	0x080098c0

08009618 <malloc>:
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <malloc+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f000 b87f 	b.w	8009720 <_malloc_r>
 8009622:	bf00      	nop
 8009624:	200000fc 	.word	0x200000fc

08009628 <free>:
 8009628:	4b02      	ldr	r3, [pc, #8]	; (8009634 <free+0xc>)
 800962a:	4601      	mov	r1, r0
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	f000 b80b 	b.w	8009648 <_free_r>
 8009632:	bf00      	nop
 8009634:	200000fc 	.word	0x200000fc

08009638 <memset>:
 8009638:	4402      	add	r2, r0
 800963a:	4603      	mov	r3, r0
 800963c:	4293      	cmp	r3, r2
 800963e:	d100      	bne.n	8009642 <memset+0xa>
 8009640:	4770      	bx	lr
 8009642:	f803 1b01 	strb.w	r1, [r3], #1
 8009646:	e7f9      	b.n	800963c <memset+0x4>

08009648 <_free_r>:
 8009648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800964a:	2900      	cmp	r1, #0
 800964c:	d044      	beq.n	80096d8 <_free_r+0x90>
 800964e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009652:	9001      	str	r0, [sp, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f1a1 0404 	sub.w	r4, r1, #4
 800965a:	bfb8      	it	lt
 800965c:	18e4      	addlt	r4, r4, r3
 800965e:	f000 f8e3 	bl	8009828 <__malloc_lock>
 8009662:	4a1e      	ldr	r2, [pc, #120]	; (80096dc <_free_r+0x94>)
 8009664:	9801      	ldr	r0, [sp, #4]
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	b933      	cbnz	r3, 8009678 <_free_r+0x30>
 800966a:	6063      	str	r3, [r4, #4]
 800966c:	6014      	str	r4, [r2, #0]
 800966e:	b003      	add	sp, #12
 8009670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009674:	f000 b8de 	b.w	8009834 <__malloc_unlock>
 8009678:	42a3      	cmp	r3, r4
 800967a:	d908      	bls.n	800968e <_free_r+0x46>
 800967c:	6825      	ldr	r5, [r4, #0]
 800967e:	1961      	adds	r1, r4, r5
 8009680:	428b      	cmp	r3, r1
 8009682:	bf01      	itttt	eq
 8009684:	6819      	ldreq	r1, [r3, #0]
 8009686:	685b      	ldreq	r3, [r3, #4]
 8009688:	1949      	addeq	r1, r1, r5
 800968a:	6021      	streq	r1, [r4, #0]
 800968c:	e7ed      	b.n	800966a <_free_r+0x22>
 800968e:	461a      	mov	r2, r3
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	b10b      	cbz	r3, 8009698 <_free_r+0x50>
 8009694:	42a3      	cmp	r3, r4
 8009696:	d9fa      	bls.n	800968e <_free_r+0x46>
 8009698:	6811      	ldr	r1, [r2, #0]
 800969a:	1855      	adds	r5, r2, r1
 800969c:	42a5      	cmp	r5, r4
 800969e:	d10b      	bne.n	80096b8 <_free_r+0x70>
 80096a0:	6824      	ldr	r4, [r4, #0]
 80096a2:	4421      	add	r1, r4
 80096a4:	1854      	adds	r4, r2, r1
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	d1e0      	bne.n	800966e <_free_r+0x26>
 80096ac:	681c      	ldr	r4, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	6053      	str	r3, [r2, #4]
 80096b2:	4421      	add	r1, r4
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	e7da      	b.n	800966e <_free_r+0x26>
 80096b8:	d902      	bls.n	80096c0 <_free_r+0x78>
 80096ba:	230c      	movs	r3, #12
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	e7d6      	b.n	800966e <_free_r+0x26>
 80096c0:	6825      	ldr	r5, [r4, #0]
 80096c2:	1961      	adds	r1, r4, r5
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf04      	itt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	bf04      	itt	eq
 80096d0:	1949      	addeq	r1, r1, r5
 80096d2:	6021      	streq	r1, [r4, #0]
 80096d4:	6054      	str	r4, [r2, #4]
 80096d6:	e7ca      	b.n	800966e <_free_r+0x26>
 80096d8:	b003      	add	sp, #12
 80096da:	bd30      	pop	{r4, r5, pc}
 80096dc:	20001f14 	.word	0x20001f14

080096e0 <sbrk_aligned>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4e0e      	ldr	r6, [pc, #56]	; (800971c <sbrk_aligned+0x3c>)
 80096e4:	460c      	mov	r4, r1
 80096e6:	6831      	ldr	r1, [r6, #0]
 80096e8:	4605      	mov	r5, r0
 80096ea:	b911      	cbnz	r1, 80096f2 <sbrk_aligned+0x12>
 80096ec:	f000 f88c 	bl	8009808 <_sbrk_r>
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 f887 	bl	8009808 <_sbrk_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	d00a      	beq.n	8009714 <sbrk_aligned+0x34>
 80096fe:	1cc4      	adds	r4, r0, #3
 8009700:	f024 0403 	bic.w	r4, r4, #3
 8009704:	42a0      	cmp	r0, r4
 8009706:	d007      	beq.n	8009718 <sbrk_aligned+0x38>
 8009708:	1a21      	subs	r1, r4, r0
 800970a:	4628      	mov	r0, r5
 800970c:	f000 f87c 	bl	8009808 <_sbrk_r>
 8009710:	3001      	adds	r0, #1
 8009712:	d101      	bne.n	8009718 <sbrk_aligned+0x38>
 8009714:	f04f 34ff 	mov.w	r4, #4294967295
 8009718:	4620      	mov	r0, r4
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	20001f18 	.word	0x20001f18

08009720 <_malloc_r>:
 8009720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009724:	1ccd      	adds	r5, r1, #3
 8009726:	f025 0503 	bic.w	r5, r5, #3
 800972a:	3508      	adds	r5, #8
 800972c:	2d0c      	cmp	r5, #12
 800972e:	bf38      	it	cc
 8009730:	250c      	movcc	r5, #12
 8009732:	2d00      	cmp	r5, #0
 8009734:	4607      	mov	r7, r0
 8009736:	db01      	blt.n	800973c <_malloc_r+0x1c>
 8009738:	42a9      	cmp	r1, r5
 800973a:	d905      	bls.n	8009748 <_malloc_r+0x28>
 800973c:	230c      	movs	r3, #12
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	2600      	movs	r6, #0
 8009742:	4630      	mov	r0, r6
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009748:	4e2e      	ldr	r6, [pc, #184]	; (8009804 <_malloc_r+0xe4>)
 800974a:	f000 f86d 	bl	8009828 <__malloc_lock>
 800974e:	6833      	ldr	r3, [r6, #0]
 8009750:	461c      	mov	r4, r3
 8009752:	bb34      	cbnz	r4, 80097a2 <_malloc_r+0x82>
 8009754:	4629      	mov	r1, r5
 8009756:	4638      	mov	r0, r7
 8009758:	f7ff ffc2 	bl	80096e0 <sbrk_aligned>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	4604      	mov	r4, r0
 8009760:	d14d      	bne.n	80097fe <_malloc_r+0xde>
 8009762:	6834      	ldr	r4, [r6, #0]
 8009764:	4626      	mov	r6, r4
 8009766:	2e00      	cmp	r6, #0
 8009768:	d140      	bne.n	80097ec <_malloc_r+0xcc>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	4631      	mov	r1, r6
 800976e:	4638      	mov	r0, r7
 8009770:	eb04 0803 	add.w	r8, r4, r3
 8009774:	f000 f848 	bl	8009808 <_sbrk_r>
 8009778:	4580      	cmp	r8, r0
 800977a:	d13a      	bne.n	80097f2 <_malloc_r+0xd2>
 800977c:	6821      	ldr	r1, [r4, #0]
 800977e:	3503      	adds	r5, #3
 8009780:	1a6d      	subs	r5, r5, r1
 8009782:	f025 0503 	bic.w	r5, r5, #3
 8009786:	3508      	adds	r5, #8
 8009788:	2d0c      	cmp	r5, #12
 800978a:	bf38      	it	cc
 800978c:	250c      	movcc	r5, #12
 800978e:	4629      	mov	r1, r5
 8009790:	4638      	mov	r0, r7
 8009792:	f7ff ffa5 	bl	80096e0 <sbrk_aligned>
 8009796:	3001      	adds	r0, #1
 8009798:	d02b      	beq.n	80097f2 <_malloc_r+0xd2>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	442b      	add	r3, r5
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	e00e      	b.n	80097c0 <_malloc_r+0xa0>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	1b52      	subs	r2, r2, r5
 80097a6:	d41e      	bmi.n	80097e6 <_malloc_r+0xc6>
 80097a8:	2a0b      	cmp	r2, #11
 80097aa:	d916      	bls.n	80097da <_malloc_r+0xba>
 80097ac:	1961      	adds	r1, r4, r5
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	6025      	str	r5, [r4, #0]
 80097b2:	bf18      	it	ne
 80097b4:	6059      	strne	r1, [r3, #4]
 80097b6:	6863      	ldr	r3, [r4, #4]
 80097b8:	bf08      	it	eq
 80097ba:	6031      	streq	r1, [r6, #0]
 80097bc:	5162      	str	r2, [r4, r5]
 80097be:	604b      	str	r3, [r1, #4]
 80097c0:	4638      	mov	r0, r7
 80097c2:	f104 060b 	add.w	r6, r4, #11
 80097c6:	f000 f835 	bl	8009834 <__malloc_unlock>
 80097ca:	f026 0607 	bic.w	r6, r6, #7
 80097ce:	1d23      	adds	r3, r4, #4
 80097d0:	1af2      	subs	r2, r6, r3
 80097d2:	d0b6      	beq.n	8009742 <_malloc_r+0x22>
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	50a3      	str	r3, [r4, r2]
 80097d8:	e7b3      	b.n	8009742 <_malloc_r+0x22>
 80097da:	6862      	ldr	r2, [r4, #4]
 80097dc:	42a3      	cmp	r3, r4
 80097de:	bf0c      	ite	eq
 80097e0:	6032      	streq	r2, [r6, #0]
 80097e2:	605a      	strne	r2, [r3, #4]
 80097e4:	e7ec      	b.n	80097c0 <_malloc_r+0xa0>
 80097e6:	4623      	mov	r3, r4
 80097e8:	6864      	ldr	r4, [r4, #4]
 80097ea:	e7b2      	b.n	8009752 <_malloc_r+0x32>
 80097ec:	4634      	mov	r4, r6
 80097ee:	6876      	ldr	r6, [r6, #4]
 80097f0:	e7b9      	b.n	8009766 <_malloc_r+0x46>
 80097f2:	230c      	movs	r3, #12
 80097f4:	603b      	str	r3, [r7, #0]
 80097f6:	4638      	mov	r0, r7
 80097f8:	f000 f81c 	bl	8009834 <__malloc_unlock>
 80097fc:	e7a1      	b.n	8009742 <_malloc_r+0x22>
 80097fe:	6025      	str	r5, [r4, #0]
 8009800:	e7de      	b.n	80097c0 <_malloc_r+0xa0>
 8009802:	bf00      	nop
 8009804:	20001f14 	.word	0x20001f14

08009808 <_sbrk_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d06      	ldr	r5, [pc, #24]	; (8009824 <_sbrk_r+0x1c>)
 800980c:	2300      	movs	r3, #0
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	f7f8 f846 	bl	80018a4 <_sbrk>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d102      	bne.n	8009822 <_sbrk_r+0x1a>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b103      	cbz	r3, 8009822 <_sbrk_r+0x1a>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	20001f1c 	.word	0x20001f1c

08009828 <__malloc_lock>:
 8009828:	4801      	ldr	r0, [pc, #4]	; (8009830 <__malloc_lock+0x8>)
 800982a:	f000 b809 	b.w	8009840 <__retarget_lock_acquire_recursive>
 800982e:	bf00      	nop
 8009830:	20001f20 	.word	0x20001f20

08009834 <__malloc_unlock>:
 8009834:	4801      	ldr	r0, [pc, #4]	; (800983c <__malloc_unlock+0x8>)
 8009836:	f000 b804 	b.w	8009842 <__retarget_lock_release_recursive>
 800983a:	bf00      	nop
 800983c:	20001f20 	.word	0x20001f20

08009840 <__retarget_lock_acquire_recursive>:
 8009840:	4770      	bx	lr

08009842 <__retarget_lock_release_recursive>:
 8009842:	4770      	bx	lr

08009844 <_init>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr

08009850 <_fini>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr
